
{==============================================================================
  ____  ____  _     
 / ___||  _ \| |    
 \___ \| | | | |    
  ___) | |_| | |___ 
 |____/|____/|_____|
 Simple DirectMedia 
  Layer for Delphi

 Pascal bindings that allow you to use SDL and other useful libraries with
 Delphi.

 Inclued:
   - SDL (https://github.com/libsdl-org/SDL)
   - SDL2_gfx (https://github.com/Semphriss/SDL2_gfx)
   - pl_mpeg (https://github.com/phoboslab/pl_mpeg)
   - Nuklear (https://github.com/Immediate-Mode-UI/Nuklear)
   - stb_image (https://github.com/nothings/stb)
   - stb_image_write (https://github.com/nothings/stb)
   - stb_truetype (https://github.com/nothings/stb)
   - miniaudio (https://github.com/mackron/miniaudio)
   - physfs (https://github.com/icculus/physfs)
   - minizip (https://github.com/madler/zlib)
   - enet (https://github.com/lsalzman/enet)
      
 Minimum Requirements:
   - Windows 10+ (64 bits)
   - Delphi Community Edition (Win64 platform only)
   
 Usage:
   You simply add SDL to your uses section and everything will be linked in
   and ready for use. You will have direct access to all the above
   libraries.

 NOTE: We're using SDL for our game projects therefore these bindings will
       always remain up to date.ðŸ†’    

 Copyright Â© 2021 tinyBigGAMESâ„¢ LLC
 All Rights Reserved.

 Website: https://tinybiggames.com
 Email  : support@tinybiggames.com

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. The origin of this software must not be misrepresented; you must not
    claim that you wrote the original software. If you use this software in
    a product, an acknowledgment in the product documentation would be
    appreciated but is not required.
 2. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

 3. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.

 4. Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

 5. All video, audio, graphics and other content accessed through the
    software in this distro is the property of the applicable content owner
    and may be protected by applicable copyright law. This License gives
    Customer no rights to such content, and Company disclaims any liability
    for misuse of content.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.
============================================================================= }

{$IFNDEF WIN64}
  {$MESSAGE Error 'Unsupported platform'}
{$ENDIF}

{$Z4}
{$A8}

unit SDL;

interface

uses
  Winapi.WinSock2;

const
  NK_INCLUDE_DEFAULT_ALLOCATOR = 1;
  NK_INCLUDE_FONT_BAKING = 1;
  NK_INCLUDE_DEFAULT_FONT = 1;
  NK_INCLUDE_SOFTWARE_FONT = 1;
  HAVE_WINAPIFAMILY_H = 1;
  WINAPI_FAMILY_DESKTOP_APP = 100;
  WINAPI_FAMILY = WINAPI_FAMILY_DESKTOP_APP;
  WINAPI_PARTITION_DESKTOP = (WINAPI_FAMILY=WINAPI_FAMILY_DESKTOP_APP);
  HAVE_LIBC = 1;
  STDC_HEADERS = 1;
  HAVE_CTYPE_H = 1;
  HAVE_LIMITS_H = 1;
  HAVE_MATH_H = 1;
  HAVE_SIGNAL_H = 1;
  HAVE_STDIO_H = 1;
  HAVE_STRING_H = 1;
  HAVE_WCHAR_H = 1;
  HAVE_MALLOC = 1;
  HAVE_CALLOC = 1;
  HAVE_REALLOC = 1;
  HAVE_FREE = 1;
  HAVE_ALLOCA = 1;
  HAVE_QSORT = 1;
  HAVE_ABS = 1;
  HAVE_MEMSET = 1;
  HAVE_MEMCPY = 1;
  HAVE_MEMMOVE = 1;
  HAVE_MEMCMP = 1;
  HAVE_WCSLEN = 1;
  HAVE__WCSDUP = 1;
  HAVE_WCSDUP = 1;
  HAVE_WCSSTR = 1;
  HAVE_WCSCMP = 1;
  HAVE_WCSNCMP = 1;
  HAVE__WCSICMP = 1;
  HAVE__WCSNICMP = 1;
  HAVE_STRLEN = 1;
  HAVE__STRREV = 1;
  HAVE__STRUPR = 1;
  HAVE__STRLWR = 1;
  HAVE_STRCHR = 1;
  HAVE_STRRCHR = 1;
  HAVE_STRSTR = 1;
  HAVE_ITOA = 1;
  HAVE__LTOA = 1;
  HAVE__ULTOA = 1;
  HAVE_STRTOL = 1;
  HAVE_STRTOUL = 1;
  HAVE_STRTOLL = 1;
  HAVE_STRTOD = 1;
  HAVE_ATOI = 1;
  HAVE_ATOF = 1;
  HAVE_STRCMP = 1;
  HAVE_STRNCMP = 1;
  HAVE__STRICMP = 1;
  HAVE__STRNICMP = 1;
  HAVE_SSCANF = 1;
  HAVE_M_PI = 1;
  HAVE_ACOS = 1;
  HAVE_ACOSF = 1;
  HAVE_ASIN = 1;
  HAVE_ASINF = 1;
  HAVE_ATAN = 1;
  HAVE_ATANF = 1;
  HAVE_ATAN2 = 1;
  HAVE_ATAN2F = 1;
  HAVE_CEIL = 1;
  HAVE_CEILF = 1;
  HAVE_COPYSIGN = 1;
  HAVE_COPYSIGNF = 1;
  HAVE_COS = 1;
  HAVE_COSF = 1;
  HAVE_EXP = 1;
  HAVE_EXPF = 1;
  HAVE_FABS = 1;
  HAVE_FABSF = 1;
  HAVE_FLOOR = 1;
  HAVE_FLOORF = 1;
  HAVE_FMOD = 1;
  HAVE_FMODF = 1;
  HAVE_LOG = 1;
  HAVE_LOGF = 1;
  HAVE_LOG10 = 1;
  HAVE_LOG10F = 1;
  HAVE_LROUND = 1;
  HAVE_LROUNDF = 1;
  HAVE_POW = 1;
  HAVE_POWF = 1;
  HAVE_ROUND = 1;
  HAVE_ROUNDF = 1;
  HAVE_SCALBN = 1;
  HAVE_SCALBNF = 1;
  HAVE_SIN = 1;
  HAVE_SINF = 1;
  HAVE_SQRT = 1;
  HAVE_SQRTF = 1;
  HAVE_TAN = 1;
  HAVE_TANF = 1;
  HAVE_TRUNC = 1;
  HAVE_TRUNCF = 1;
  HAVE_IMMINTRIN_H = 1;
  HAVE_D3D_H = 1;
  HAVE_D3D11_H = 1;
  HAVE_DDRAW_H = 1;
  HAVE_DSOUND_H = 1;
  HAVE_DINPUT_H = 1;
  HAVE_XINPUT_H = 1;
  HAVE_WINDOWS_GAMING_INPUT_H = 1;
  HAVE_DXGI_H = 1;
  HAVE_MMDEVICEAPI_H = 1;
  HAVE_AUDIOCLIENT_H = 1;
  HAVE_SENSORSAPI_H = 1;
  SDL_AUDIO_DRIVER_DISK = 1;
  SDL_AUDIO_DRIVER_DSOUND = 1;
  SDL_AUDIO_DRIVER_DUMMY = 1;
  SDL_AUDIO_DRIVER_WASAPI = 1;
  SDL_AUDIO_DRIVER_WINMM = 1;
  SDL_JOYSTICK_WGI = 1;
  SDL_JOYSTICK_DINPUT = 1;
  SDL_JOYSTICK_XINPUT = 1;
  SDL_JOYSTICK_HIDAPI = 1;
  SDL_JOYSTICK_RAWINPUT = 1;
  SDL_JOYSTICK_VIRTUAL = 1;
  SDL_HAPTIC_DINPUT = 1;
  SDL_HAPTIC_XINPUT = 1;
  SDL_SENSOR_WINDOWS = 1;
  SDL_LOADSO_WINDOWS = 1;
  SDL_THREAD_GENERIC_COND_SUFFIX = 1;
  SDL_THREAD_WINDOWS = 1;
  SDL_TIMER_WINDOWS = 1;
  SDL_VIDEO_DRIVER_DUMMY = 1;
  SDL_VIDEO_DRIVER_WINDOWS = 1;
  SDL_VIDEO_RENDER_D3D = 1;
  SDL_VIDEO_RENDER_D3D11 = 1;
  SDL_VIDEO_RENDER_OGL = 1;
  SDL_VIDEO_RENDER_OGL_ES2 = 1;
  SDL_VIDEO_OPENGL = 1;
  SDL_VIDEO_OPENGL_ES2 = 1;
  SDL_VIDEO_OPENGL_WGL = 1;
  SDL_VIDEO_OPENGL_EGL = 1;
  SDL_VIDEO_VULKAN = 1;
  SDL_POWER_WINDOWS = 1;
  SDL_FILESYSTEM_WINDOWS = 1;
  SDL_ASSEMBLY_ROUTINES = 1;
  SDL_MAX_SINT8 = ($7F);
  SDL_MIN_SINT8 = (( not $7F));
  SDL_MAX_UINT8 = ($FF);
  SDL_MIN_UINT8 = ($00);
  SDL_MAX_SINT16 = ($7FFF);
  SDL_MIN_SINT16 = (( not $7FFF));
  SDL_MAX_UINT16 = ($FFFF);
  SDL_MIN_UINT16 = ($0000);
  SDL_MAX_SINT32 = ($7FFFFFFF);
  SDL_MIN_SINT32 = (( not $7FFFFFFF));
  SDL_MAX_UINT32 = ($FFFFFFFF);
  SDL_MIN_UINT32 = ($00000000);
  SDL_MAX_SINT64 = ($7FFFFFFFFFFFFFFF);
  SDL_MIN_SINT64 = (( not $7FFFFFFFFFFFFFFF));
  SDL_MAX_UINT64 = ($FFFFFFFFFFFFFFFF);
  SDL_MIN_UINT64 = (($0000000000000000));
  SDL_PRIs64 = 'I64d';
  SDL_PRIu64 = 'I64u';
  SDL_PRIx64 = 'I64x';
  SDL_PRIs32 = 'd';
  SDL_PRIu32 = 'u';
  SDL_PRIx32 = 'x';
  SDL_ASSERT_LEVEL = 1;
  SDL_LIL_ENDIAN = 1234;
  SDL_BIG_ENDIAN = 4321;
  SDL_BYTEORDER = SDL_LIL_ENDIAN;
  SDL_MUTEX_TIMEDOUT = 1;
  SDL_MUTEX_MAXWAIT = ( not 0);
  SDL_RWOPS_UNKNOWN = 0;
  SDL_RWOPS_WINFILE = 1;
  SDL_RWOPS_STDFILE = 2;
  SDL_RWOPS_JNIFILE = 3;
  SDL_RWOPS_MEMORY = 4;
  SDL_RWOPS_MEMORY_RO = 5;
  RW_SEEK_SET = 0;
  RW_SEEK_CUR = 1;
  RW_SEEK_END = 2;
  SDL_AUDIO_MASK_BITSIZE = ($FF);
  SDL_AUDIO_MASK_DATATYPE = (1 shl 8);
  SDL_AUDIO_MASK_ENDIAN = (1 shl 12);
  SDL_AUDIO_MASK_SIGNED = (1 shl 15);
  AUDIO_U8 = $0008;
  AUDIO_S8 = $8008;
  AUDIO_U16LSB = $0010;
  AUDIO_S16LSB = $8010;
  AUDIO_U16MSB = $1010;
  AUDIO_S16MSB = $9010;
  AUDIO_U16 = AUDIO_U16LSB;
  AUDIO_S16 = AUDIO_S16LSB;
  AUDIO_S32LSB = $8020;
  AUDIO_S32MSB = $9020;
  AUDIO_S32 = AUDIO_S32LSB;
  AUDIO_F32LSB = $8120;
  AUDIO_F32MSB = $9120;
  AUDIO_F32 = AUDIO_F32LSB;
  AUDIO_U16SYS = AUDIO_U16LSB;
  AUDIO_S16SYS = AUDIO_S16LSB;
  AUDIO_S32SYS = AUDIO_S32LSB;
  AUDIO_F32SYS = AUDIO_F32LSB;
  SDL_AUDIO_ALLOW_FREQUENCY_CHANGE = $00000001;
  SDL_AUDIO_ALLOW_FORMAT_CHANGE = $00000002;
  SDL_AUDIO_ALLOW_CHANNELS_CHANGE = $00000004;
  SDL_AUDIO_ALLOW_SAMPLES_CHANGE = $00000008;
  SDL_AUDIO_ALLOW_ANY_CHANGE = (SDL_AUDIO_ALLOW_FREQUENCY_CHANGE or SDL_AUDIO_ALLOW_FORMAT_CHANGE or SDL_AUDIO_ALLOW_CHANNELS_CHANGE or SDL_AUDIO_ALLOW_SAMPLES_CHANGE);
  SDL_AUDIOCVT_MAX_FILTERS = 9;
  SDL_MIX_MAXVOLUME = 128;
  SDL_CACHELINE_SIZE = 128;
  SDL_ALPHA_OPAQUE = 255;
  SDL_ALPHA_TRANSPARENT = 0;
  SDL_SWSURFACE = 0;
  SDL_PREALLOC = $00000001;
  SDL_RLEACCEL = $00000002;
  SDL_DONTFREE = $00000004;
  SDL_SIMD_ALIGNED = $00000008;
  SDL_WINDOWPOS_UNDEFINED_MASK = $1FFF0000;
  SDL_WINDOWPOS_CENTERED_MASK = $2FFF0000;
  SDLK_SCANCODE_MASK = (1 shl 30);
  SDL_BUTTON_LEFT = 1;
  SDL_BUTTON_MIDDLE = 2;
  SDL_BUTTON_RIGHT = 3;
  SDL_BUTTON_X1 = 4;
  SDL_BUTTON_X2 = 5;
  SDL_IPHONE_MAX_GFORCE = 5.0;
  SDL_JOYSTICK_AXIS_MAX = 32767;
  SDL_JOYSTICK_AXIS_MIN = -32768;
  SDL_HAT_CENTERED = $00;
  SDL_HAT_UP = $01;
  SDL_HAT_RIGHT = $02;
  SDL_HAT_DOWN = $04;
  SDL_HAT_LEFT = $08;
  SDL_HAT_RIGHTUP = (SDL_HAT_RIGHT or SDL_HAT_UP);
  SDL_HAT_RIGHTDOWN = (SDL_HAT_RIGHT or SDL_HAT_DOWN);
  SDL_HAT_LEFTUP = (SDL_HAT_LEFT or SDL_HAT_UP);
  SDL_HAT_LEFTDOWN = (SDL_HAT_LEFT or SDL_HAT_DOWN);
  SDL_STANDARD_GRAVITY = 9.80665;
  SDL_TOUCH_MOUSEID = (-1);
  SDL_MOUSE_TOUCHID = (-1);
  SDL_RELEASED = 0;
  SDL_PRESSED = 1;
  SDL_TEXTEDITINGEVENT_TEXT_SIZE = (32);
  SDL_TEXTINPUTEVENT_TEXT_SIZE = (32);
  SDL_QUERY = -1;
  SDL_IGNORE = 0;
  SDL_DISABLE = 0;
  SDL_ENABLE = 1;
  SDL_HAPTIC_CONSTANT = (1 shl 0);
  SDL_HAPTIC_SINE = (1 shl 1);
  SDL_HAPTIC_LEFTRIGHT = (1 shl 2);
  SDL_HAPTIC_TRIANGLE = (1 shl 3);
  SDL_HAPTIC_SAWTOOTHUP = (1 shl 4);
  SDL_HAPTIC_SAWTOOTHDOWN = (1 shl 5);
  SDL_HAPTIC_RAMP = (1 shl 6);
  SDL_HAPTIC_SPRING = (1 shl 7);
  SDL_HAPTIC_DAMPER = (1 shl 8);
  SDL_HAPTIC_INERTIA = (1 shl 9);
  SDL_HAPTIC_FRICTION = (1 shl 10);
  SDL_HAPTIC_CUSTOM = (1 shl 11);
  SDL_HAPTIC_GAIN = (1 shl 12);
  SDL_HAPTIC_AUTOCENTER = (1 shl 13);
  SDL_HAPTIC_STATUS = (1 shl 14);
  SDL_HAPTIC_PAUSE = (1 shl 15);
  SDL_HAPTIC_POLAR = 0;
  SDL_HAPTIC_CARTESIAN = 1;
  SDL_HAPTIC_SPHERICAL = 2;
  SDL_HAPTIC_STEERING_AXIS = 3;
  SDL_HAPTIC_INFINITY = 4294967295;
  SDL_HINT_ACCELEROMETER_AS_JOYSTICK = 'SDL_ACCELEROMETER_AS_JOYSTICK';
  SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED = 'SDL_ALLOW_ALT_TAB_WHILE_GRABBED';
  SDL_HINT_ALLOW_TOPMOST = 'SDL_ALLOW_TOPMOST';
  SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION = 'SDL_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION';
  SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION = 'SDL_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION';
  SDL_HINT_ANDROID_BLOCK_ON_PAUSE = 'SDL_ANDROID_BLOCK_ON_PAUSE';
  SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO = 'SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO';
  SDL_HINT_ANDROID_TRAP_BACK_BUTTON = 'SDL_ANDROID_TRAP_BACK_BUTTON';
  SDL_HINT_APP_NAME = 'SDL_APP_NAME';
  SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS = 'SDL_APPLE_TV_CONTROLLER_UI_EVENTS';
  SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION = 'SDL_APPLE_TV_REMOTE_ALLOW_ROTATION';
  SDL_HINT_AUDIO_CATEGORY = 'SDL_AUDIO_CATEGORY';
  SDL_HINT_AUDIO_DEVICE_APP_NAME = 'SDL_AUDIO_DEVICE_APP_NAME';
  SDL_HINT_AUDIO_DEVICE_STREAM_NAME = 'SDL_AUDIO_DEVICE_STREAM_NAME';
  SDL_HINT_AUDIO_DEVICE_STREAM_ROLE = 'SDL_AUDIO_DEVICE_STREAM_ROLE';
  SDL_HINT_AUDIO_RESAMPLING_MODE = 'SDL_AUDIO_RESAMPLING_MODE';
  SDL_HINT_AUTO_UPDATE_JOYSTICKS = 'SDL_AUTO_UPDATE_JOYSTICKS';
  SDL_HINT_AUTO_UPDATE_SENSORS = 'SDL_AUTO_UPDATE_SENSORS';
  SDL_HINT_BMP_SAVE_LEGACY_FORMAT = 'SDL_BMP_SAVE_LEGACY_FORMAT';
  SDL_HINT_DISPLAY_USABLE_BOUNDS = 'SDL_DISPLAY_USABLE_BOUNDS';
  SDL_HINT_EMSCRIPTEN_ASYNCIFY = 'SDL_EMSCRIPTEN_ASYNCIFY';
  SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT = 'SDL_EMSCRIPTEN_KEYBOARD_ELEMENT';
  SDL_HINT_ENABLE_STEAM_CONTROLLERS = 'SDL_ENABLE_STEAM_CONTROLLERS';
  SDL_HINT_EVENT_LOGGING = 'SDL_EVENT_LOGGING';
  SDL_HINT_FRAMEBUFFER_ACCELERATION = 'SDL_FRAMEBUFFER_ACCELERATION';
  SDL_HINT_GAMECONTROLLERCONFIG = 'SDL_GAMECONTROLLERCONFIG';
  SDL_HINT_GAMECONTROLLERCONFIG_FILE = 'SDL_GAMECONTROLLERCONFIG_FILE';
  SDL_HINT_GAMECONTROLLERTYPE = 'SDL_GAMECONTROLLERTYPE';
  SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES = 'SDL_GAMECONTROLLER_IGNORE_DEVICES';
  SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT = 'SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT';
  SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS = 'SDL_GAMECONTROLLER_USE_BUTTON_LABELS';
  SDL_HINT_GRAB_KEYBOARD = 'SDL_GRAB_KEYBOARD';
  SDL_HINT_IDLE_TIMER_DISABLED = 'SDL_IOS_IDLE_TIMER_DISABLED';
  SDL_HINT_IME_INTERNAL_EDITING = 'SDL_IME_INTERNAL_EDITING';
  SDL_HINT_IME_SHOW_UI = 'SDL_IME_SHOW_UI';
  SDL_HINT_IOS_HIDE_HOME_INDICATOR = 'SDL_IOS_HIDE_HOME_INDICATOR';
  SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = 'SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS';
  SDL_HINT_JOYSTICK_HIDAPI = 'SDL_JOYSTICK_HIDAPI';
  SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE = 'SDL_JOYSTICK_HIDAPI_GAMECUBE';
  SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS = 'SDL_JOYSTICK_HIDAPI_JOY_CONS';
  SDL_HINT_JOYSTICK_HIDAPI_LUNA = 'SDL_JOYSTICK_HIDAPI_LUNA';
  SDL_HINT_JOYSTICK_HIDAPI_PS4 = 'SDL_JOYSTICK_HIDAPI_PS4';
  SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE = 'SDL_JOYSTICK_HIDAPI_PS4_RUMBLE';
  SDL_HINT_JOYSTICK_HIDAPI_PS5 = 'SDL_JOYSTICK_HIDAPI_PS5';
  SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED = 'SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED';
  SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE = 'SDL_JOYSTICK_HIDAPI_PS5_RUMBLE';
  SDL_HINT_JOYSTICK_HIDAPI_STADIA = 'SDL_JOYSTICK_HIDAPI_STADIA';
  SDL_HINT_JOYSTICK_HIDAPI_STEAM = 'SDL_JOYSTICK_HIDAPI_STEAM';
  SDL_HINT_JOYSTICK_HIDAPI_SWITCH = 'SDL_JOYSTICK_HIDAPI_SWITCH';
  SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED = 'SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED';
  SDL_HINT_JOYSTICK_HIDAPI_XBOX = 'SDL_JOYSTICK_HIDAPI_XBOX';
  SDL_HINT_JOYSTICK_RAWINPUT = 'SDL_JOYSTICK_RAWINPUT';
  SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT = 'SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT';
  SDL_HINT_JOYSTICK_THREAD = 'SDL_JOYSTICK_THREAD';
  SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER = 'SDL_KMSDRM_REQUIRE_DRM_MASTER';
  SDL_HINT_JOYSTICK_DEVICE = 'SDL_JOYSTICK_DEVICE';
  SDL_HINT_LINUX_JOYSTICK_CLASSIC = 'SDL_LINUX_JOYSTICK_CLASSIC';
  SDL_HINT_LINUX_JOYSTICK_DEADZONES = 'SDL_LINUX_JOYSTICK_DEADZONES';
  SDL_HINT_MAC_BACKGROUND_APP = 'SDL_MAC_BACKGROUND_APP';
  SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK = 'SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK';
  SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS = 'SDL_MOUSE_DOUBLE_CLICK_RADIUS';
  SDL_HINT_MOUSE_DOUBLE_CLICK_TIME = 'SDL_MOUSE_DOUBLE_CLICK_TIME';
  SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH = 'SDL_MOUSE_FOCUS_CLICKTHROUGH';
  SDL_HINT_MOUSE_NORMAL_SPEED_SCALE = 'SDL_MOUSE_NORMAL_SPEED_SCALE';
  SDL_HINT_MOUSE_RELATIVE_MODE_WARP = 'SDL_MOUSE_RELATIVE_MODE_WARP';
  SDL_HINT_MOUSE_RELATIVE_SCALING = 'SDL_MOUSE_RELATIVE_SCALING';
  SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE = 'SDL_MOUSE_RELATIVE_SPEED_SCALE';
  SDL_HINT_MOUSE_TOUCH_EVENTS = 'SDL_MOUSE_TOUCH_EVENTS';
  SDL_HINT_NO_SIGNAL_HANDLERS = 'SDL_NO_SIGNAL_HANDLERS';
  SDL_HINT_OPENGL_ES_DRIVER = 'SDL_OPENGL_ES_DRIVER';
  SDL_HINT_ORIENTATIONS = 'SDL_IOS_ORIENTATIONS';
  SDL_HINT_POLL_SENTINEL = 'SDL_POLL_SENTINEL';
  SDL_HINT_PREFERRED_LOCALES = 'SDL_PREFERRED_LOCALES';
  SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION = 'SDL_QTWAYLAND_CONTENT_ORIENTATION';
  SDL_HINT_QTWAYLAND_WINDOW_FLAGS = 'SDL_QTWAYLAND_WINDOW_FLAGS';
  SDL_HINT_RENDER_BATCHING = 'SDL_RENDER_BATCHING';
  SDL_HINT_RENDER_DIRECT3D11_DEBUG = 'SDL_RENDER_DIRECT3D11_DEBUG';
  SDL_HINT_RENDER_DIRECT3D_THREADSAFE = 'SDL_RENDER_DIRECT3D_THREADSAFE';
  SDL_HINT_RENDER_DRIVER = 'SDL_RENDER_DRIVER';
  SDL_HINT_RENDER_LOGICAL_SIZE_MODE = 'SDL_RENDER_LOGICAL_SIZE_MODE';
  SDL_HINT_RENDER_OPENGL_SHADERS = 'SDL_RENDER_OPENGL_SHADERS';
  SDL_HINT_RENDER_SCALE_QUALITY = 'SDL_RENDER_SCALE_QUALITY';
  SDL_HINT_RENDER_VSYNC = 'SDL_RENDER_VSYNC';
  SDL_HINT_RETURN_KEY_HIDES_IME = 'SDL_RETURN_KEY_HIDES_IME';
  SDL_HINT_RPI_VIDEO_LAYER = 'SDL_RPI_VIDEO_LAYER';
  SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME = 'SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME';
  SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL = 'SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL';
  SDL_HINT_THREAD_PRIORITY_POLICY = 'SDL_THREAD_PRIORITY_POLICY';
  SDL_HINT_THREAD_STACK_SIZE = 'SDL_THREAD_STACK_SIZE';
  SDL_HINT_TIMER_RESOLUTION = 'SDL_TIMER_RESOLUTION';
  SDL_HINT_TOUCH_MOUSE_EVENTS = 'SDL_TOUCH_MOUSE_EVENTS';
  SDL_HINT_TV_REMOTE_AS_JOYSTICK = 'SDL_TV_REMOTE_AS_JOYSTICK';
  SDL_HINT_VIDEO_ALLOW_SCREENSAVER = 'SDL_VIDEO_ALLOW_SCREENSAVER';
  SDL_HINT_VIDEO_DOUBLE_BUFFER = 'SDL_VIDEO_DOUBLE_BUFFER';
  SDL_HINT_VIDEO_EGL_ALLOW_TRANSPARENCY = 'SDL_VIDEO_EGL_ALLOW_TRANSPARENCY';
  SDL_HINT_VIDEO_EXTERNAL_CONTEXT = 'SDL_VIDEO_EXTERNAL_CONTEXT';
  SDL_HINT_VIDEO_HIGHDPI_DISABLED = 'SDL_VIDEO_HIGHDPI_DISABLED';
  SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES = 'SDL_VIDEO_MAC_FULLSCREEN_SPACES';
  SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = 'SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS';
  SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR = 'SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR';
  SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT = 'SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT';
  SDL_HINT_VIDEO_WIN_D3DCOMPILER = 'SDL_VIDEO_WIN_D3DCOMPILER';
  SDL_HINT_VIDEO_X11_FORCE_EGL = 'SDL_VIDEO_X11_FORCE_EGL';
  SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR = 'SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR';
  SDL_HINT_VIDEO_X11_NET_WM_PING = 'SDL_VIDEO_X11_NET_WM_PING';
  SDL_HINT_VIDEO_X11_WINDOW_VISUALID = 'SDL_VIDEO_X11_WINDOW_VISUALID';
  SDL_HINT_VIDEO_X11_XINERAMA = 'SDL_VIDEO_X11_XINERAMA';
  SDL_HINT_VIDEO_X11_XRANDR = 'SDL_VIDEO_X11_XRANDR';
  SDL_HINT_VIDEO_X11_XVIDMODE = 'SDL_VIDEO_X11_XVIDMODE';
  SDL_HINT_WAVE_FACT_CHUNK = 'SDL_WAVE_FACT_CHUNK';
  SDL_HINT_WAVE_RIFF_CHUNK_SIZE = 'SDL_WAVE_RIFF_CHUNK_SIZE';
  SDL_HINT_WAVE_TRUNCATION = 'SDL_WAVE_TRUNCATION';
  SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING = 'SDL_WINDOWS_DISABLE_THREAD_NAMING';
  SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP = 'SDL_WINDOWS_ENABLE_MESSAGELOOP';
  SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS = 'SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS';
  SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL = 'SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL';
  SDL_HINT_WINDOWS_INTRESOURCE_ICON = 'SDL_WINDOWS_INTRESOURCE_ICON';
  SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL = 'SDL_WINDOWS_INTRESOURCE_ICON_SMALL';
  SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 = 'SDL_WINDOWS_NO_CLOSE_ON_ALT_F4';
  SDL_HINT_WINDOWS_USE_D3D9EX = 'SDL_WINDOWS_USE_D3D9EX';
  SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN = 'SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN';
  SDL_HINT_WINDOW_NO_ACTIVATION_WHEN_SHOWN = 'SDL_WINDOW_NO_ACTIVATION_WHEN_SHOWN';
  SDL_HINT_WINRT_HANDLE_BACK_BUTTON = 'SDL_WINRT_HANDLE_BACK_BUTTON';
  SDL_HINT_WINRT_PRIVACY_POLICY_LABEL = 'SDL_WINRT_PRIVACY_POLICY_LABEL';
  SDL_HINT_WINRT_PRIVACY_POLICY_URL = 'SDL_WINRT_PRIVACY_POLICY_URL';
  SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT = 'SDL_X11_FORCE_OVERRIDE_REDIRECT';
  SDL_HINT_XINPUT_ENABLED = 'SDL_XINPUT_ENABLED';
  SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING = 'SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING';
  SDL_HINT_AUDIO_INCLUDE_MONITORS = 'SDL_AUDIO_INCLUDE_MONITORS';
  SDL_MAX_LOG_MESSAGE = 4096;
  SDL_NONSHAPEABLE_WINDOW = -1;
  SDL_INVALID_SHAPE_ARGUMENT = -2;
  SDL_WINDOW_LACKS_SHAPE = -3;
  SDL_MAJOR_VERSION = 2;
  SDL_MINOR_VERSION = 0;
  SDL_PATCHLEVEL = 19;
  SDL_INIT_TIMER = $00000001;
  SDL_INIT_AUDIO = $00000010;
  SDL_INIT_VIDEO = $00000020;
  SDL_INIT_JOYSTICK = $00000200;
  SDL_INIT_HAPTIC = $00001000;
  SDL_INIT_GAMECONTROLLER = $00002000;
  SDL_INIT_EVENTS = $00004000;
  SDL_INIT_SENSOR = $00008000;
  SDL_INIT_NOPARACHUTE = $00100000;
  SDL_INIT_EVERYTHING = (SDL_INIT_TIMER or SDL_INIT_AUDIO or SDL_INIT_VIDEO or SDL_INIT_EVENTS or SDL_INIT_JOYSTICK or SDL_INIT_HAPTIC or SDL_INIT_GAMECONTROLLER or SDL_INIT_SENSOR);
  NK_UNDEFINED = (-1.0);
  NK_UTF_INVALID = $FFFD;
  NK_UTF_SIZE = 4;
  NK_INPUT_MAX = 16;
  NK_MAX_NUMBER_BUFFER = 64;
  NK_SCROLLBAR_HIDING_TIMEOUT = 4.0;
  NK_TEXTEDIT_UNDOSTATECOUNT = 99;
  NK_TEXTEDIT_UNDOCHARCOUNT = 999;
  NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS = 16;
  NK_CHART_MAX_SLOT = 4;
  NK_WINDOW_MAX_NAME = 64;
  NK_BUTTON_BEHAVIOR_STACK_SIZE = 8;
  NK_FONT_STACK_SIZE = 8;
  NK_STYLE_ITEM_STACK_SIZE = 16;
  NK_FLOAT_STACK_SIZE = 32;
  NK_VECTOR_STACK_SIZE = 16;
  NK_FLAGS_STACK_SIZE = 32;
  NK_COLOR_STACK_SIZE = 32;
  NK_PI = 3.141592654;
  NK_MAX_FLOAT_PRECISION = 2;
  PLM_PACKET_INVALID_TS = -1;
  PLM_AUDIO_SAMPLES_PER_FRAME = 1152;
  PLM_BUFFER_DEFAULT_SIZE = (128*1024);
  STBI_VERSION = 1;
  STBTT_MACSTYLE_DONTCARE = 0;
  STBTT_MACSTYLE_BOLD = 1;
  STBTT_MACSTYLE_ITALIC = 2;
  STBTT_MACSTYLE_UNDERSCORE = 4;
  STBTT_MACSTYLE_NONE = 8;
  MA_VERSION_MAJOR = 0;
  MA_VERSION_MINOR = 11;
  MA_VERSION_REVISION = 1;
  MA_SIZEOF_PTR = 8;
  MA_TRUE = 1;
  MA_FALSE = 0;
  SIZE_MAX = $ffffffffffffffff;
  MA_SIZE_MAX = SIZE_MAX;
  MA_SIMD_ALIGNMENT = 32;
  MA_LOG_LEVEL_DEBUG = 4;
  MA_LOG_LEVEL_INFO = 3;
  MA_LOG_LEVEL_WARNING = 2;
  MA_LOG_LEVEL_ERROR = 1;
  MA_MIN_CHANNELS = 1;
  MA_MAX_CHANNELS = 254;
  MA_MAX_FILTER_ORDER = 8;
  MA_MAX_LOG_CALLBACKS = 4;
  MA_CHANNEL_INDEX_NULL = 255;
  MA_DATA_FORMAT_FLAG_EXCLUSIVE_MODE = (1 shl 1);
  MA_MAX_DEVICE_NAME_LENGTH = 255;
  MA_DATA_SOURCE_SELF_MANAGED_RANGE_AND_LOOP_POINT = $00000001;
  MA_RESOURCE_MANAGER_MAX_JOB_THREAD_COUNT = 64;
  MA_MAX_NODE_BUS_COUNT = 254;
  MA_MAX_NODE_LOCAL_BUS_COUNT = 2;
  MA_NODE_BUS_COUNT_UNKNOWN = 255;
  MA_ENGINE_MAX_LISTENERS = 4;
  MA_SOUND_SOURCE_CHANNEL_COUNT = $FFFFFFFF;
  PHYSFS_VER_MAJOR = 3;
  PHYSFS_VER_MINOR = 1;
  PHYSFS_VER_PATCH = 0;
  MAX_MEM_LEVEL = 9;
  MAX_WBITS = 15;
  ZLIB_VERSION = '1.2.11';
  ZLIB_VERNUM = $12b0;
  ZLIB_VER_MAJOR = 1;
  ZLIB_VER_MINOR = 2;
  ZLIB_VER_REVISION = 11;
  ZLIB_VER_SUBREVISION = 0;
  Z_NO_FLUSH = 0;
  Z_PARTIAL_FLUSH = 1;
  Z_SYNC_FLUSH = 2;
  Z_FULL_FLUSH = 3;
  Z_FINISH = 4;
  Z_BLOCK = 5;
  Z_TREES = 6;
  Z_OK = 0;
  Z_STREAM_END = 1;
  Z_NEED_DICT = 2;
  Z_ERRNO = (-1);
  Z_STREAM_ERROR = (-2);
  Z_DATA_ERROR = (-3);
  Z_MEM_ERROR = (-4);
  Z_BUF_ERROR = (-5);
  Z_VERSION_ERROR = (-6);
  Z_NO_COMPRESSION = 0;
  Z_BEST_SPEED = 1;
  Z_BEST_COMPRESSION = 9;
  Z_DEFAULT_COMPRESSION = (-1);
  Z_FILTERED = 1;
  Z_HUFFMAN_ONLY = 2;
  Z_RLE = 3;
  Z_FIXED = 4;
  Z_DEFAULT_STRATEGY = 0;
  Z_BINARY = 0;
  Z_TEXT = 1;
  Z_ASCII = Z_TEXT;
  Z_UNKNOWN = 2;
  Z_DEFLATED = 8;
  Z_NULL = 0;
  MAXU32 = $ffffffff;
  ZLIB_FILEFUNC_SEEK_CUR = (1);
  ZLIB_FILEFUNC_SEEK_END = (2);
  ZLIB_FILEFUNC_SEEK_SET = (0);
  ZLIB_FILEFUNC_MODE_READ = (1);
  ZLIB_FILEFUNC_MODE_WRITE = (2);
  ZLIB_FILEFUNC_MODE_READWRITEFILTER = (3);
  ZLIB_FILEFUNC_MODE_EXISTING = (4);
  ZLIB_FILEFUNC_MODE_CREATE = (8);
  Z_BZIP2ED = 12;
  ZIP_OK = (0);
  ZIP_EOF = (0);
  ZIP_ERRNO = (Z_ERRNO);
  ZIP_PARAMERROR = (-102);
  ZIP_BADZIPFILE = (-103);
  ZIP_INTERNALERROR = (-104);
  DEF_MEM_LEVEL = 8;
  APPEND_STATUS_CREATE = (0);
  APPEND_STATUS_CREATEAFTER = (1);
  APPEND_STATUS_ADDINZIP = (2);
  UNZ_OK = (0);
  UNZ_END_OF_LIST_OF_FILE = (-100);
  UNZ_ERRNO = (Z_ERRNO);
  UNZ_EOF = (0);
  UNZ_PARAMERROR = (-102);
  UNZ_BADZIPFILE = (-103);
  UNZ_INTERNALERROR = (-104);
  UNZ_CRCERROR = (-105);
  FPS_UPPER_LIMIT = 200;
  FPS_LOWER_LIMIT = 1;
  FPS_DEFAULT = 30;
  M_PI = 3.1415926535897932384626433832795;
  SDL2_GFXPRIMITIVES_MAJOR = 1;
  SDL2_GFXPRIMITIVES_MINOR = 0;
  SDL2_GFXPRIMITIVES_MICRO = 4;
  GFX_FONTDATAMAX = (8*256);
  SMOOTHING_OFF = 0;
  SMOOTHING_ON = 1;
  INVALID_SOCKET = ( not 0);
  ENET_SOCKET_NULL = INVALID_SOCKET;
  ENET_VERSION_MAJOR = 1;
  ENET_VERSION_MINOR = 3;
  ENET_VERSION_PATCH = 17;
  ENET_HOST_ANY = 0;
  ENET_HOST_BROADCAST_ = $FFFFFFFF;
  ENET_PORT_ANY = 0;
  SDL_FALSE = 0;
  SDL_TRUE = 1;
  SDL_ASSERTION_RETRY = 0;
  SDL_ASSERTION_BREAK = 1;
  SDL_ASSERTION_ABORT = 2;
  SDL_ASSERTION_IGNORE = 3;
  SDL_ASSERTION_ALWAYS_IGNORE = 4;
  SDL_ENOMEM = 0;
  SDL_EFREAD = 1;
  SDL_EFWRITE = 2;
  SDL_EFSEEK = 3;
  SDL_UNSUPPORTED = 4;
  SDL_LASTERROR = 5;
  SDL_THREAD_PRIORITY_LOW = 0;
  SDL_THREAD_PRIORITY_NORMAL = 1;
  SDL_THREAD_PRIORITY_HIGH = 2;
  SDL_THREAD_PRIORITY_TIME_CRITICAL = 3;
  SDL_AUDIO_STOPPED = 0;
  SDL_AUDIO_PLAYING = 1;
  SDL_AUDIO_PAUSED = 2;
  SDL_PIXELTYPE_UNKNOWN = 0;
  SDL_PIXELTYPE_INDEX1 = 1;
  SDL_PIXELTYPE_INDEX4 = 2;
  SDL_PIXELTYPE_INDEX8 = 3;
  SDL_PIXELTYPE_PACKED8 = 4;
  SDL_PIXELTYPE_PACKED16 = 5;
  SDL_PIXELTYPE_PACKED32 = 6;
  SDL_PIXELTYPE_ARRAYU8 = 7;
  SDL_PIXELTYPE_ARRAYU16 = 8;
  SDL_PIXELTYPE_ARRAYU32 = 9;
  SDL_PIXELTYPE_ARRAYF16 = 10;
  SDL_PIXELTYPE_ARRAYF32 = 11;
  SDL_BITMAPORDER_NONE = 0;
  SDL_BITMAPORDER_4321 = 1;
  SDL_BITMAPORDER_1234 = 2;
  SDL_PACKEDORDER_NONE = 0;
  SDL_PACKEDORDER_XRGB = 1;
  SDL_PACKEDORDER_RGBX = 2;
  SDL_PACKEDORDER_ARGB = 3;
  SDL_PACKEDORDER_RGBA = 4;
  SDL_PACKEDORDER_XBGR = 5;
  SDL_PACKEDORDER_BGRX = 6;
  SDL_PACKEDORDER_ABGR = 7;
  SDL_PACKEDORDER_BGRA = 8;
  SDL_ARRAYORDER_NONE = 0;
  SDL_ARRAYORDER_RGB = 1;
  SDL_ARRAYORDER_RGBA = 2;
  SDL_ARRAYORDER_ARGB = 3;
  SDL_ARRAYORDER_BGR = 4;
  SDL_ARRAYORDER_BGRA = 5;
  SDL_ARRAYORDER_ABGR = 6;
  SDL_PACKEDLAYOUT_NONE = 0;
  SDL_PACKEDLAYOUT_332 = 1;
  SDL_PACKEDLAYOUT_4444 = 2;
  SDL_PACKEDLAYOUT_1555 = 3;
  SDL_PACKEDLAYOUT_5551 = 4;
  SDL_PACKEDLAYOUT_565 = 5;
  SDL_PACKEDLAYOUT_8888 = 6;
  SDL_PACKEDLAYOUT_2101010 = 7;
  SDL_PACKEDLAYOUT_1010102 = 8;
  SDL_PIXELFORMAT_UNKNOWN = 0;
  SDL_PIXELFORMAT_INDEX1LSB = 286261504;
  SDL_PIXELFORMAT_INDEX1MSB = 287310080;
  SDL_PIXELFORMAT_INDEX4LSB = 303039488;
  SDL_PIXELFORMAT_INDEX4MSB = 304088064;
  SDL_PIXELFORMAT_INDEX8 = 318769153;
  SDL_PIXELFORMAT_RGB332 = 336660481;
  SDL_PIXELFORMAT_XRGB4444 = 353504258;
  SDL_PIXELFORMAT_RGB444 = 353504258;
  SDL_PIXELFORMAT_XBGR4444 = 357698562;
  SDL_PIXELFORMAT_BGR444 = 357698562;
  SDL_PIXELFORMAT_XRGB1555 = 353570562;
  SDL_PIXELFORMAT_RGB555 = 353570562;
  SDL_PIXELFORMAT_XBGR1555 = 357764866;
  SDL_PIXELFORMAT_BGR555 = 357764866;
  SDL_PIXELFORMAT_ARGB4444 = 355602434;
  SDL_PIXELFORMAT_RGBA4444 = 356651010;
  SDL_PIXELFORMAT_ABGR4444 = 359796738;
  SDL_PIXELFORMAT_BGRA4444 = 360845314;
  SDL_PIXELFORMAT_ARGB1555 = 355667970;
  SDL_PIXELFORMAT_RGBA5551 = 356782082;
  SDL_PIXELFORMAT_ABGR1555 = 359862274;
  SDL_PIXELFORMAT_BGRA5551 = 360976386;
  SDL_PIXELFORMAT_RGB565 = 353701890;
  SDL_PIXELFORMAT_BGR565 = 357896194;
  SDL_PIXELFORMAT_RGB24 = 386930691;
  SDL_PIXELFORMAT_BGR24 = 390076419;
  SDL_PIXELFORMAT_XRGB8888 = 370546692;
  SDL_PIXELFORMAT_RGB888 = 370546692;
  SDL_PIXELFORMAT_RGBX8888 = 371595268;
  SDL_PIXELFORMAT_XBGR8888 = 374740996;
  SDL_PIXELFORMAT_BGR888 = 374740996;
  SDL_PIXELFORMAT_BGRX8888 = 375789572;
  SDL_PIXELFORMAT_ARGB8888 = 372645892;
  SDL_PIXELFORMAT_RGBA8888 = 373694468;
  SDL_PIXELFORMAT_ABGR8888 = 376840196;
  SDL_PIXELFORMAT_BGRA8888 = 377888772;
  SDL_PIXELFORMAT_ARGB2101010 = 372711428;
  SDL_PIXELFORMAT_RGBA32 = 376840196;
  SDL_PIXELFORMAT_ARGB32 = 377888772;
  SDL_PIXELFORMAT_BGRA32 = 372645892;
  SDL_PIXELFORMAT_ABGR32 = 373694468;
  SDL_PIXELFORMAT_YV12 = 842094169;
  SDL_PIXELFORMAT_IYUV = 1448433993;
  SDL_PIXELFORMAT_YUY2 = 844715353;
  SDL_PIXELFORMAT_UYVY = 1498831189;
  SDL_PIXELFORMAT_YVYU = 1431918169;
  SDL_PIXELFORMAT_NV12 = 842094158;
  SDL_PIXELFORMAT_NV21 = 825382478;
  SDL_PIXELFORMAT_EXTERNAL_OES = 542328143;
  SDL_BLENDMODE_NONE = 0;
  SDL_BLENDMODE_BLEND = 1;
  SDL_BLENDMODE_ADD = 2;
  SDL_BLENDMODE_MOD = 4;
  SDL_BLENDMODE_MUL = 8;
  SDL_BLENDMODE_INVALID = 2147483647;
  SDL_BLENDOPERATION_ADD = 1;
  SDL_BLENDOPERATION_SUBTRACT = 2;
  SDL_BLENDOPERATION_REV_SUBTRACT = 3;
  SDL_BLENDOPERATION_MINIMUM = 4;
  SDL_BLENDOPERATION_MAXIMUM = 5;
  SDL_BLENDFACTOR_ZERO = 1;
  SDL_BLENDFACTOR_ONE = 2;
  SDL_BLENDFACTOR_SRC_COLOR = 3;
  SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4;
  SDL_BLENDFACTOR_SRC_ALPHA = 5;
  SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6;
  SDL_BLENDFACTOR_DST_COLOR = 7;
  SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8;
  SDL_BLENDFACTOR_DST_ALPHA = 9;
  SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10;
  SDL_YUV_CONVERSION_JPEG = 0;
  SDL_YUV_CONVERSION_BT601 = 1;
  SDL_YUV_CONVERSION_BT709 = 2;
  SDL_YUV_CONVERSION_AUTOMATIC = 3;
  SDL_WINDOW_FULLSCREEN = 1;
  SDL_WINDOW_OPENGL = 2;
  SDL_WINDOW_SHOWN = 4;
  SDL_WINDOW_HIDDEN = 8;
  SDL_WINDOW_BORDERLESS = 16;
  SDL_WINDOW_RESIZABLE = 32;
  SDL_WINDOW_MINIMIZED = 64;
  SDL_WINDOW_MAXIMIZED = 128;
  SDL_WINDOW_MOUSE_GRABBED = 256;
  SDL_WINDOW_INPUT_FOCUS = 512;
  SDL_WINDOW_MOUSE_FOCUS = 1024;
  SDL_WINDOW_FULLSCREEN_DESKTOP = 4097;
  SDL_WINDOW_FOREIGN = 2048;
  SDL_WINDOW_ALLOW_HIGHDPI = 8192;
  SDL_WINDOW_MOUSE_CAPTURE = 16384;
  SDL_WINDOW_ALWAYS_ON_TOP = 32768;
  SDL_WINDOW_SKIP_TASKBAR = 65536;
  SDL_WINDOW_UTILITY = 131072;
  SDL_WINDOW_TOOLTIP = 262144;
  SDL_WINDOW_POPUP_MENU = 524288;
  SDL_WINDOW_KEYBOARD_GRABBED = 1048576;
  SDL_WINDOW_VULKAN = 268435456;
  SDL_WINDOW_METAL = 536870912;
  SDL_WINDOW_INPUT_GRABBED = 256;
  SDL_WINDOWEVENT_NONE = 0;
  SDL_WINDOWEVENT_SHOWN = 1;
  SDL_WINDOWEVENT_HIDDEN = 2;
  SDL_WINDOWEVENT_EXPOSED = 3;
  SDL_WINDOWEVENT_MOVED = 4;
  SDL_WINDOWEVENT_RESIZED = 5;
  SDL_WINDOWEVENT_SIZE_CHANGED = 6;
  SDL_WINDOWEVENT_MINIMIZED = 7;
  SDL_WINDOWEVENT_MAXIMIZED = 8;
  SDL_WINDOWEVENT_RESTORED = 9;
  SDL_WINDOWEVENT_ENTER = 10;
  SDL_WINDOWEVENT_LEAVE = 11;
  SDL_WINDOWEVENT_FOCUS_GAINED = 12;
  SDL_WINDOWEVENT_FOCUS_LOST = 13;
  SDL_WINDOWEVENT_CLOSE = 14;
  SDL_WINDOWEVENT_TAKE_FOCUS = 15;
  SDL_WINDOWEVENT_HIT_TEST = 16;
  SDL_WINDOWEVENT_ICCPROF_CHANGED = 17;
  SDL_WINDOWEVENT_DISPLAY_CHANGED = 18;
  SDL_DISPLAYEVENT__NONE = 0;
  SDL_DISPLAYEVENT__ORIENTATION = 1;
  SDL_DISPLAYEVENT__CONNECTED = 2;
  SDL_DISPLAYEVENT__DISCONNECTED = 3;
  SDL_ORIENTATION_UNKNOWN = 0;
  SDL_ORIENTATION_LANDSCAPE = 1;
  SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2;
  SDL_ORIENTATION_PORTRAIT = 3;
  SDL_ORIENTATION_PORTRAIT_FLIPPED = 4;
  SDL_FLASH_CANCEL = 0;
  SDL_FLASH_BRIEFLY = 1;
  SDL_FLASH_UNTIL_FOCUSED = 2;
  SDL_GL_RED_SIZE = 0;
  SDL_GL_GREEN_SIZE = 1;
  SDL_GL_BLUE_SIZE = 2;
  SDL_GL_ALPHA_SIZE = 3;
  SDL_GL_BUFFER_SIZE = 4;
  SDL_GL_DOUBLEBUFFER = 5;
  SDL_GL_DEPTH_SIZE = 6;
  SDL_GL_STENCIL_SIZE = 7;
  SDL_GL_ACCUM_RED_SIZE = 8;
  SDL_GL_ACCUM_GREEN_SIZE = 9;
  SDL_GL_ACCUM_BLUE_SIZE = 10;
  SDL_GL_ACCUM_ALPHA_SIZE = 11;
  SDL_GL_STEREO = 12;
  SDL_GL_MULTISAMPLEBUFFERS = 13;
  SDL_GL_MULTISAMPLESAMPLES = 14;
  SDL_GL_ACCELERATED_VISUAL = 15;
  SDL_GL_RETAINED_BACKING = 16;
  SDL_GL_CONTEXT_MAJOR_VERSION = 17;
  SDL_GL_CONTEXT_MINOR_VERSION = 18;
  SDL_GL_CONTEXT_EGL = 19;
  SDL_GL_CONTEXT_FLAGS = 20;
  SDL_GL_CONTEXT_PROFILE_MASK = 21;
  SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22;
  SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 23;
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 24;
  SDL_GL_CONTEXT_RESET_NOTIFICATION = 25;
  SDL_GL_CONTEXT_NO_ERROR = 26;
  SDL_GL_CONTEXT_PROFILE_CORE = 1;
  SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 2;
  SDL_GL_CONTEXT_PROFILE_ES = 4;
  SDL_GL_CONTEXT_DEBUG_FLAG = 1;
  SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2;
  SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 4;
  SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 8;
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0;
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 1;
  SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0;
  SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 1;
  SDL_HITTEST_NORMAL = 0;
  SDL_HITTEST_DRAGGABLE = 1;
  SDL_HITTEST_RESIZE_TOPLEFT = 2;
  SDL_HITTEST_RESIZE_TOP = 3;
  SDL_HITTEST_RESIZE_TOPRIGHT = 4;
  SDL_HITTEST_RESIZE_RIGHT = 5;
  SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6;
  SDL_HITTEST_RESIZE_BOTTOM = 7;
  SDL_HITTEST_RESIZE_BOTTOMLEFT = 8;
  SDL_HITTEST_RESIZE_LEFT = 9;
  SDL_SCANCODE_UNKNOWN = 0;
  SDL_SCANCODE_A = 4;
  SDL_SCANCODE_B = 5;
  SDL_SCANCODE_C = 6;
  SDL_SCANCODE_D = 7;
  SDL_SCANCODE_E = 8;
  SDL_SCANCODE_F = 9;
  SDL_SCANCODE_G = 10;
  SDL_SCANCODE_H = 11;
  SDL_SCANCODE_I = 12;
  SDL_SCANCODE_J = 13;
  SDL_SCANCODE_K = 14;
  SDL_SCANCODE_L = 15;
  SDL_SCANCODE_M = 16;
  SDL_SCANCODE_N = 17;
  SDL_SCANCODE_O = 18;
  SDL_SCANCODE_P = 19;
  SDL_SCANCODE_Q = 20;
  SDL_SCANCODE_R = 21;
  SDL_SCANCODE_S = 22;
  SDL_SCANCODE_T = 23;
  SDL_SCANCODE_U = 24;
  SDL_SCANCODE_V = 25;
  SDL_SCANCODE_W = 26;
  SDL_SCANCODE_X = 27;
  SDL_SCANCODE_Y = 28;
  SDL_SCANCODE_Z = 29;
  SDL_SCANCODE_1 = 30;
  SDL_SCANCODE_2 = 31;
  SDL_SCANCODE_3 = 32;
  SDL_SCANCODE_4 = 33;
  SDL_SCANCODE_5 = 34;
  SDL_SCANCODE_6 = 35;
  SDL_SCANCODE_7 = 36;
  SDL_SCANCODE_8 = 37;
  SDL_SCANCODE_9 = 38;
  SDL_SCANCODE_0 = 39;
  SDL_SCANCODE_RETURN = 40;
  SDL_SCANCODE_ESCAPE = 41;
  SDL_SCANCODE_BACKSPACE = 42;
  SDL_SCANCODE_TAB = 43;
  SDL_SCANCODE_SPACE = 44;
  SDL_SCANCODE_MINUS = 45;
  SDL_SCANCODE_EQUALS = 46;
  SDL_SCANCODE_LEFTBRACKET = 47;
  SDL_SCANCODE_RIGHTBRACKET = 48;
  SDL_SCANCODE_BACKSLASH = 49;
  SDL_SCANCODE_NONUSHASH = 50;
  SDL_SCANCODE_SEMICOLON = 51;
  SDL_SCANCODE_APOSTROPHE = 52;
  SDL_SCANCODE_GRAVE = 53;
  SDL_SCANCODE_COMMA = 54;
  SDL_SCANCODE_PERIOD = 55;
  SDL_SCANCODE_SLASH = 56;
  SDL_SCANCODE_CAPSLOCK = 57;
  SDL_SCANCODE_F1 = 58;
  SDL_SCANCODE_F2 = 59;
  SDL_SCANCODE_F3 = 60;
  SDL_SCANCODE_F4 = 61;
  SDL_SCANCODE_F5 = 62;
  SDL_SCANCODE_F6 = 63;
  SDL_SCANCODE_F7 = 64;
  SDL_SCANCODE_F8 = 65;
  SDL_SCANCODE_F9 = 66;
  SDL_SCANCODE_F10 = 67;
  SDL_SCANCODE_F11 = 68;
  SDL_SCANCODE_F12 = 69;
  SDL_SCANCODE_PRINTSCREEN = 70;
  SDL_SCANCODE_SCROLLLOCK = 71;
  SDL_SCANCODE_PAUSE = 72;
  SDL_SCANCODE_INSERT = 73;
  SDL_SCANCODE_HOME = 74;
  SDL_SCANCODE_PAGEUP = 75;
  SDL_SCANCODE_DELETE = 76;
  SDL_SCANCODE_END = 77;
  SDL_SCANCODE_PAGEDOWN = 78;
  SDL_SCANCODE_RIGHT = 79;
  SDL_SCANCODE_LEFT = 80;
  SDL_SCANCODE_DOWN = 81;
  SDL_SCANCODE_UP = 82;
  SDL_SCANCODE_NUMLOCKCLEAR = 83;
  SDL_SCANCODE_KP_DIVIDE = 84;
  SDL_SCANCODE_KP_MULTIPLY = 85;
  SDL_SCANCODE_KP_MINUS = 86;
  SDL_SCANCODE_KP_PLUS = 87;
  SDL_SCANCODE_KP_ENTER = 88;
  SDL_SCANCODE_KP_1 = 89;
  SDL_SCANCODE_KP_2 = 90;
  SDL_SCANCODE_KP_3 = 91;
  SDL_SCANCODE_KP_4 = 92;
  SDL_SCANCODE_KP_5 = 93;
  SDL_SCANCODE_KP_6 = 94;
  SDL_SCANCODE_KP_7 = 95;
  SDL_SCANCODE_KP_8 = 96;
  SDL_SCANCODE_KP_9 = 97;
  SDL_SCANCODE_KP_0 = 98;
  SDL_SCANCODE_KP_PERIOD = 99;
  SDL_SCANCODE_NONUSBACKSLASH = 100;
  SDL_SCANCODE_APPLICATION = 101;
  SDL_SCANCODE_POWER = 102;
  SDL_SCANCODE_KP_EQUALS = 103;
  SDL_SCANCODE_F13 = 104;
  SDL_SCANCODE_F14 = 105;
  SDL_SCANCODE_F15 = 106;
  SDL_SCANCODE_F16 = 107;
  SDL_SCANCODE_F17 = 108;
  SDL_SCANCODE_F18 = 109;
  SDL_SCANCODE_F19 = 110;
  SDL_SCANCODE_F20 = 111;
  SDL_SCANCODE_F21 = 112;
  SDL_SCANCODE_F22 = 113;
  SDL_SCANCODE_F23 = 114;
  SDL_SCANCODE_F24 = 115;
  SDL_SCANCODE_EXECUTE = 116;
  SDL_SCANCODE_HELP = 117;
  SDL_SCANCODE_MENU = 118;
  SDL_SCANCODE_SELECT = 119;
  SDL_SCANCODE_STOP = 120;
  SDL_SCANCODE_AGAIN = 121;
  SDL_SCANCODE_UNDO = 122;
  SDL_SCANCODE_CUT = 123;
  SDL_SCANCODE_COPY = 124;
  SDL_SCANCODE_PASTE = 125;
  SDL_SCANCODE_FIND = 126;
  SDL_SCANCODE_MUTE = 127;
  SDL_SCANCODE_VOLUMEUP = 128;
  SDL_SCANCODE_VOLUMEDOWN = 129;
  SDL_SCANCODE_KP_COMMA = 133;
  SDL_SCANCODE_KP_EQUALSAS400 = 134;
  SDL_SCANCODE_INTERNATIONAL1 = 135;
  SDL_SCANCODE_INTERNATIONAL2 = 136;
  SDL_SCANCODE_INTERNATIONAL3 = 137;
  SDL_SCANCODE_INTERNATIONAL4 = 138;
  SDL_SCANCODE_INTERNATIONAL5 = 139;
  SDL_SCANCODE_INTERNATIONAL6 = 140;
  SDL_SCANCODE_INTERNATIONAL7 = 141;
  SDL_SCANCODE_INTERNATIONAL8 = 142;
  SDL_SCANCODE_INTERNATIONAL9 = 143;
  SDL_SCANCODE_LANG1 = 144;
  SDL_SCANCODE_LANG2 = 145;
  SDL_SCANCODE_LANG3 = 146;
  SDL_SCANCODE_LANG4 = 147;
  SDL_SCANCODE_LANG5 = 148;
  SDL_SCANCODE_LANG6 = 149;
  SDL_SCANCODE_LANG7 = 150;
  SDL_SCANCODE_LANG8 = 151;
  SDL_SCANCODE_LANG9 = 152;
  SDL_SCANCODE_ALTERASE = 153;
  SDL_SCANCODE_SYSREQ = 154;
  SDL_SCANCODE_CANCEL = 155;
  SDL_SCANCODE_CLEAR = 156;
  SDL_SCANCODE_PRIOR = 157;
  SDL_SCANCODE_RETURN2 = 158;
  SDL_SCANCODE_SEPARATOR = 159;
  SDL_SCANCODE_OUT = 160;
  SDL_SCANCODE_OPER = 161;
  SDL_SCANCODE_CLEARAGAIN = 162;
  SDL_SCANCODE_CRSEL = 163;
  SDL_SCANCODE_EXSEL = 164;
  SDL_SCANCODE_KP_00 = 176;
  SDL_SCANCODE_KP_000 = 177;
  SDL_SCANCODE_THOUSANDSSEPARATOR = 178;
  SDL_SCANCODE_DECIMALSEPARATOR = 179;
  SDL_SCANCODE_CURRENCYUNIT = 180;
  SDL_SCANCODE_CURRENCYSUBUNIT = 181;
  SDL_SCANCODE_KP_LEFTPAREN = 182;
  SDL_SCANCODE_KP_RIGHTPAREN = 183;
  SDL_SCANCODE_KP_LEFTBRACE = 184;
  SDL_SCANCODE_KP_RIGHTBRACE = 185;
  SDL_SCANCODE_KP_TAB = 186;
  SDL_SCANCODE_KP_BACKSPACE = 187;
  SDL_SCANCODE_KP_A = 188;
  SDL_SCANCODE_KP_B = 189;
  SDL_SCANCODE_KP_C = 190;
  SDL_SCANCODE_KP_D = 191;
  SDL_SCANCODE_KP_E = 192;
  SDL_SCANCODE_KP_F = 193;
  SDL_SCANCODE_KP_XOR = 194;
  SDL_SCANCODE_KP_POWER = 195;
  SDL_SCANCODE_KP_PERCENT = 196;
  SDL_SCANCODE_KP_LESS = 197;
  SDL_SCANCODE_KP_GREATER = 198;
  SDL_SCANCODE_KP_AMPERSAND = 199;
  SDL_SCANCODE_KP_DBLAMPERSAND = 200;
  SDL_SCANCODE_KP_VERTICALBAR = 201;
  SDL_SCANCODE_KP_DBLVERTICALBAR = 202;
  SDL_SCANCODE_KP_COLON = 203;
  SDL_SCANCODE_KP_HASH = 204;
  SDL_SCANCODE_KP_SPACE = 205;
  SDL_SCANCODE_KP_AT = 206;
  SDL_SCANCODE_KP_EXCLAM = 207;
  SDL_SCANCODE_KP_MEMSTORE = 208;
  SDL_SCANCODE_KP_MEMRECALL = 209;
  SDL_SCANCODE_KP_MEMCLEAR = 210;
  SDL_SCANCODE_KP_MEMADD = 211;
  SDL_SCANCODE_KP_MEMSUBTRACT = 212;
  SDL_SCANCODE_KP_MEMMULTIPLY = 213;
  SDL_SCANCODE_KP_MEMDIVIDE = 214;
  SDL_SCANCODE_KP_PLUSMINUS = 215;
  SDL_SCANCODE_KP_CLEAR = 216;
  SDL_SCANCODE_KP_CLEARENTRY = 217;
  SDL_SCANCODE_KP_BINARY = 218;
  SDL_SCANCODE_KP_OCTAL = 219;
  SDL_SCANCODE_KP_DECIMAL = 220;
  SDL_SCANCODE_KP_HEXADECIMAL = 221;
  SDL_SCANCODE_LCTRL = 224;
  SDL_SCANCODE_LSHIFT = 225;
  SDL_SCANCODE_LALT = 226;
  SDL_SCANCODE_LGUI = 227;
  SDL_SCANCODE_RCTRL = 228;
  SDL_SCANCODE_RSHIFT = 229;
  SDL_SCANCODE_RALT = 230;
  SDL_SCANCODE_RGUI = 231;
  SDL_SCANCODE_MODE = 257;
  SDL_SCANCODE_AUDIONEXT = 258;
  SDL_SCANCODE_AUDIOPREV = 259;
  SDL_SCANCODE_AUDIOSTOP = 260;
  SDL_SCANCODE_AUDIOPLAY = 261;
  SDL_SCANCODE_AUDIOMUTE = 262;
  SDL_SCANCODE_MEDIASELECT = 263;
  SDL_SCANCODE_WWW = 264;
  SDL_SCANCODE_MAIL = 265;
  SDL_SCANCODE_CALCULATOR = 266;
  SDL_SCANCODE_COMPUTER = 267;
  SDL_SCANCODE_AC_SEARCH = 268;
  SDL_SCANCODE_AC_HOME = 269;
  SDL_SCANCODE_AC_BACK = 270;
  SDL_SCANCODE_AC_FORWARD = 271;
  SDL_SCANCODE_AC_STOP = 272;
  SDL_SCANCODE_AC_REFRESH = 273;
  SDL_SCANCODE_AC_BOOKMARKS = 274;
  SDL_SCANCODE_BRIGHTNESSDOWN = 275;
  SDL_SCANCODE_BRIGHTNESSUP = 276;
  SDL_SCANCODE_DISPLAYSWITCH = 277;
  SDL_SCANCODE_KBDILLUMTOGGLE = 278;
  SDL_SCANCODE_KBDILLUMDOWN = 279;
  SDL_SCANCODE_KBDILLUMUP = 280;
  SDL_SCANCODE_EJECT = 281;
  SDL_SCANCODE_SLEEP = 282;
  SDL_SCANCODE_APP1 = 283;
  SDL_SCANCODE_APP2 = 284;
  SDL_SCANCODE_AUDIOREWIND = 285;
  SDL_SCANCODE_AUDIOFASTFORWARD = 286;
  SDL_NUM_SCANCODES = 512;
  SDLK_UNKNOWN = 0;
  SDLK_RETURN = 13;
  SDLK_ESCAPE = 27;
  SDLK_BACKSPACE = 8;
  SDLK_TAB = 9;
  SDLK_SPACE = 32;
  SDLK_EXCLAIM = 33;
  SDLK_QUOTEDBL = 34;
  SDLK_HASH = 35;
  SDLK_PERCENT = 37;
  SDLK_DOLLAR = 36;
  SDLK_AMPERSAND = 38;
  SDLK_QUOTE = 39;
  SDLK_LEFTPAREN = 40;
  SDLK_RIGHTPAREN = 41;
  SDLK_ASTERISK = 42;
  SDLK_PLUS = 43;
  SDLK_COMMA = 44;
  SDLK_MINUS = 45;
  SDLK_PERIOD = 46;
  SDLK_SLASH = 47;
  SDLK_0 = 48;
  SDLK_1 = 49;
  SDLK_2 = 50;
  SDLK_3 = 51;
  SDLK_4 = 52;
  SDLK_5 = 53;
  SDLK_6 = 54;
  SDLK_7 = 55;
  SDLK_8 = 56;
  SDLK_9 = 57;
  SDLK_COLON = 58;
  SDLK_SEMICOLON = 59;
  SDLK_LESS = 60;
  SDLK_EQUALS = 61;
  SDLK_GREATER = 62;
  SDLK_QUESTION = 63;
  SDLK_AT = 64;
  SDLK_LEFTBRACKET = 91;
  SDLK_BACKSLASH = 92;
  SDLK_RIGHTBRACKET = 93;
  SDLK_CARET = 94;
  SDLK_UNDERSCORE = 95;
  SDLK_BACKQUOTE = 96;
  SDLK_a = 97;
  SDLK_b = 98;
  SDLK_c = 99;
  SDLK_d = 100;
  SDLK_e = 101;
  SDLK_f = 102;
  SDLK_g = 103;
  SDLK_h = 104;
  SDLK_i = 105;
  SDLK_j = 106;
  SDLK_k = 107;
  SDLK_l = 108;
  SDLK_m = 109;
  SDLK_n = 110;
  SDLK_o = 111;
  SDLK_p = 112;
  SDLK_q = 113;
  SDLK_r = 114;
  SDLK_s = 115;
  SDLK_t = 116;
  SDLK_u = 117;
  SDLK_v = 118;
  SDLK_w = 119;
  SDLK_x = 120;
  SDLK_y = 121;
  SDLK_z = 122;
  SDLK_CAPSLOCK = 1073741881;
  SDLK_F1 = 1073741882;
  SDLK_F2 = 1073741883;
  SDLK_F3 = 1073741884;
  SDLK_F4 = 1073741885;
  SDLK_F5 = 1073741886;
  SDLK_F6 = 1073741887;
  SDLK_F7 = 1073741888;
  SDLK_F8 = 1073741889;
  SDLK_F9 = 1073741890;
  SDLK_F10 = 1073741891;
  SDLK_F11 = 1073741892;
  SDLK_F12 = 1073741893;
  SDLK_PRINTSCREEN = 1073741894;
  SDLK_SCROLLLOCK = 1073741895;
  SDLK_PAUSE = 1073741896;
  SDLK_INSERT = 1073741897;
  SDLK_HOME = 1073741898;
  SDLK_PAGEUP = 1073741899;
  SDLK_DELETE = 127;
  SDLK_END = 1073741901;
  SDLK_PAGEDOWN = 1073741902;
  SDLK_RIGHT = 1073741903;
  SDLK_LEFT = 1073741904;
  SDLK_DOWN = 1073741905;
  SDLK_UP = 1073741906;
  SDLK_NUMLOCKCLEAR = 1073741907;
  SDLK_KP_DIVIDE = 1073741908;
  SDLK_KP_MULTIPLY = 1073741909;
  SDLK_KP_MINUS = 1073741910;
  SDLK_KP_PLUS = 1073741911;
  SDLK_KP_ENTER = 1073741912;
  SDLK_KP_1 = 1073741913;
  SDLK_KP_2 = 1073741914;
  SDLK_KP_3 = 1073741915;
  SDLK_KP_4 = 1073741916;
  SDLK_KP_5 = 1073741917;
  SDLK_KP_6 = 1073741918;
  SDLK_KP_7 = 1073741919;
  SDLK_KP_8 = 1073741920;
  SDLK_KP_9 = 1073741921;
  SDLK_KP_0 = 1073741922;
  SDLK_KP_PERIOD = 1073741923;
  SDLK_APPLICATION = 1073741925;
  SDLK_POWER = 1073741926;
  SDLK_KP_EQUALS = 1073741927;
  SDLK_F13 = 1073741928;
  SDLK_F14 = 1073741929;
  SDLK_F15 = 1073741930;
  SDLK_F16 = 1073741931;
  SDLK_F17 = 1073741932;
  SDLK_F18 = 1073741933;
  SDLK_F19 = 1073741934;
  SDLK_F20 = 1073741935;
  SDLK_F21 = 1073741936;
  SDLK_F22 = 1073741937;
  SDLK_F23 = 1073741938;
  SDLK_F24 = 1073741939;
  SDLK_EXECUTE = 1073741940;
  SDLK_HELP = 1073741941;
  SDLK_MENU = 1073741942;
  SDLK_SELECT = 1073741943;
  SDLK_STOP = 1073741944;
  SDLK_AGAIN = 1073741945;
  SDLK_UNDO = 1073741946;
  SDLK_CUT = 1073741947;
  SDLK_COPY = 1073741948;
  SDLK_PASTE = 1073741949;
  SDLK_FIND = 1073741950;
  SDLK_MUTE = 1073741951;
  SDLK_VOLUMEUP = 1073741952;
  SDLK_VOLUMEDOWN = 1073741953;
  SDLK_KP_COMMA = 1073741957;
  SDLK_KP_EQUALSAS400 = 1073741958;
  SDLK_ALTERASE = 1073741977;
  SDLK_SYSREQ = 1073741978;
  SDLK_CANCEL = 1073741979;
  SDLK_CLEAR = 1073741980;
  SDLK_PRIOR = 1073741981;
  SDLK_RETURN2 = 1073741982;
  SDLK_SEPARATOR = 1073741983;
  SDLK_OUT = 1073741984;
  SDLK_OPER = 1073741985;
  SDLK_CLEARAGAIN = 1073741986;
  SDLK_CRSEL = 1073741987;
  SDLK_EXSEL = 1073741988;
  SDLK_KP_00 = 1073742000;
  SDLK_KP_000 = 1073742001;
  SDLK_THOUSANDSSEPARATOR = 1073742002;
  SDLK_DECIMALSEPARATOR = 1073742003;
  SDLK_CURRENCYUNIT = 1073742004;
  SDLK_CURRENCYSUBUNIT = 1073742005;
  SDLK_KP_LEFTPAREN = 1073742006;
  SDLK_KP_RIGHTPAREN = 1073742007;
  SDLK_KP_LEFTBRACE = 1073742008;
  SDLK_KP_RIGHTBRACE = 1073742009;
  SDLK_KP_TAB = 1073742010;
  SDLK_KP_BACKSPACE = 1073742011;
  SDLK_KP_A = 1073742012;
  SDLK_KP_B = 1073742013;
  SDLK_KP_C = 1073742014;
  SDLK_KP_D = 1073742015;
  SDLK_KP_E = 1073742016;
  SDLK_KP_F = 1073742017;
  SDLK_KP_XOR = 1073742018;
  SDLK_KP_POWER = 1073742019;
  SDLK_KP_PERCENT = 1073742020;
  SDLK_KP_LESS = 1073742021;
  SDLK_KP_GREATER = 1073742022;
  SDLK_KP_AMPERSAND = 1073742023;
  SDLK_KP_DBLAMPERSAND = 1073742024;
  SDLK_KP_VERTICALBAR = 1073742025;
  SDLK_KP_DBLVERTICALBAR = 1073742026;
  SDLK_KP_COLON = 1073742027;
  SDLK_KP_HASH = 1073742028;
  SDLK_KP_SPACE = 1073742029;
  SDLK_KP_AT = 1073742030;
  SDLK_KP_EXCLAM = 1073742031;
  SDLK_KP_MEMSTORE = 1073742032;
  SDLK_KP_MEMRECALL = 1073742033;
  SDLK_KP_MEMCLEAR = 1073742034;
  SDLK_KP_MEMADD = 1073742035;
  SDLK_KP_MEMSUBTRACT = 1073742036;
  SDLK_KP_MEMMULTIPLY = 1073742037;
  SDLK_KP_MEMDIVIDE = 1073742038;
  SDLK_KP_PLUSMINUS = 1073742039;
  SDLK_KP_CLEAR = 1073742040;
  SDLK_KP_CLEARENTRY = 1073742041;
  SDLK_KP_BINARY = 1073742042;
  SDLK_KP_OCTAL = 1073742043;
  SDLK_KP_DECIMAL = 1073742044;
  SDLK_KP_HEXADECIMAL = 1073742045;
  SDLK_LCTRL = 1073742048;
  SDLK_LSHIFT = 1073742049;
  SDLK_LALT = 1073742050;
  SDLK_LGUI = 1073742051;
  SDLK_RCTRL = 1073742052;
  SDLK_RSHIFT = 1073742053;
  SDLK_RALT = 1073742054;
  SDLK_RGUI = 1073742055;
  SDLK_MODE = 1073742081;
  SDLK_AUDIONEXT = 1073742082;
  SDLK_AUDIOPREV = 1073742083;
  SDLK_AUDIOSTOP = 1073742084;
  SDLK_AUDIOPLAY = 1073742085;
  SDLK_AUDIOMUTE = 1073742086;
  SDLK_MEDIASELECT = 1073742087;
  SDLK_WWW = 1073742088;
  SDLK_MAIL = 1073742089;
  SDLK_CALCULATOR = 1073742090;
  SDLK_COMPUTER = 1073742091;
  SDLK_AC_SEARCH = 1073742092;
  SDLK_AC_HOME = 1073742093;
  SDLK_AC_BACK = 1073742094;
  SDLK_AC_FORWARD = 1073742095;
  SDLK_AC_STOP = 1073742096;
  SDLK_AC_REFRESH = 1073742097;
  SDLK_AC_BOOKMARKS = 1073742098;
  SDLK_BRIGHTNESSDOWN = 1073742099;
  SDLK_BRIGHTNESSUP = 1073742100;
  SDLK_DISPLAYSWITCH = 1073742101;
  SDLK_KBDILLUMTOGGLE = 1073742102;
  SDLK_KBDILLUMDOWN = 1073742103;
  SDLK_KBDILLUMUP = 1073742104;
  SDLK_EJECT = 1073742105;
  SDLK_SLEEP = 1073742106;
  SDLK_APP1 = 1073742107;
  SDLK_APP2 = 1073742108;
  SDLK_AUDIOREWIND = 1073742109;
  SDLK_AUDIOFASTFORWARD = 1073742110;
  KMOD_NONE = 0;
  KMOD_LSHIFT = 1;
  KMOD_RSHIFT = 2;
  KMOD_LCTRL = 64;
  KMOD_RCTRL = 128;
  KMOD_LALT = 256;
  KMOD_RALT = 512;
  KMOD_LGUI = 1024;
  KMOD_RGUI = 2048;
  KMOD_NUM = 4096;
  KMOD_CAPS = 8192;
  KMOD_MODE = 16384;
  KMOD_SCROLL = 32768;
  KMOD_CTRL = 192;
  KMOD_SHIFT = 3;
  KMOD_ALT = 768;
  KMOD_GUI = 3072;
  KMOD_RESERVED = 32768;
  SDL_SYSTEM_CURSOR_ARROW = 0;
  SDL_SYSTEM_CURSOR_IBEAM = 1;
  SDL_SYSTEM_CURSOR_WAIT = 2;
  SDL_SYSTEM_CURSOR_CROSSHAIR = 3;
  SDL_SYSTEM_CURSOR_WAITARROW = 4;
  SDL_SYSTEM_CURSOR_SIZENWSE = 5;
  SDL_SYSTEM_CURSOR_SIZENESW = 6;
  SDL_SYSTEM_CURSOR_SIZEWE = 7;
  SDL_SYSTEM_CURSOR_SIZENS = 8;
  SDL_SYSTEM_CURSOR_SIZEALL = 9;
  SDL_SYSTEM_CURSOR_NO = 10;
  SDL_SYSTEM_CURSOR_HAND = 11;
  SDL_NUM_SYSTEM_CURSORS = 12;
  SDL_MOUSEWHEEL_NORMAL = 0;
  SDL_MOUSEWHEEL_FLIPPED = 1;
  SDL_JOYSTICK_TYPE_UNKNOWN = 0;
  SDL_JOYSTICK_TYPE_GAMECONTROLLER = 1;
  SDL_JOYSTICK_TYPE_WHEEL = 2;
  SDL_JOYSTICK_TYPE_ARCADE_STICK = 3;
  SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4;
  SDL_JOYSTICK_TYPE_DANCE_PAD = 5;
  SDL_JOYSTICK_TYPE_GUITAR = 6;
  SDL_JOYSTICK_TYPE_DRUM_KIT = 7;
  SDL_JOYSTICK_TYPE_ARCADE_PAD = 8;
  SDL_JOYSTICK_TYPE_THROTTLE = 9;
  SDL_JOYSTICK_POWER_UNKNOWN = -1;
  SDL_JOYSTICK_POWER_EMPTY = 0;
  SDL_JOYSTICK_POWER_LOW = 1;
  SDL_JOYSTICK_POWER_MEDIUM = 2;
  SDL_JOYSTICK_POWER_FULL = 3;
  SDL_JOYSTICK_POWER_WIRED = 4;
  SDL_JOYSTICK_POWER_MAX = 5;
  SDL_SENSOR_INVALID = -1;
  SDL_SENSOR_UNKNOWN = 0;
  SDL_SENSOR_ACCEL = 1;
  SDL_SENSOR_GYRO = 2;
  SDL_CONTROLLER_TYPE_UNKNOWN = 0;
  SDL_CONTROLLER_TYPE_XBOX360 = 1;
  SDL_CONTROLLER_TYPE_XBOXONE = 2;
  SDL_CONTROLLER_TYPE_PS3 = 3;
  SDL_CONTROLLER_TYPE_PS4 = 4;
  SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO = 5;
  SDL_CONTROLLER_TYPE_VIRTUAL = 6;
  SDL_CONTROLLER_TYPE_PS5 = 7;
  SDL_CONTROLLER_TYPE_AMAZON_LUNA = 8;
  SDL_CONTROLLER_TYPE_GOOGLE_STADIA = 9;
  SDL_CONTROLLER_BINDTYPE_NONE = 0;
  SDL_CONTROLLER_BINDTYPE_BUTTON = 1;
  SDL_CONTROLLER_BINDTYPE_AXIS = 2;
  SDL_CONTROLLER_BINDTYPE_HAT = 3;
  SDL_CONTROLLER_AXIS_INVALID = -1;
  SDL_CONTROLLER_AXIS_LEFTX = 0;
  SDL_CONTROLLER_AXIS_LEFTY = 1;
  SDL_CONTROLLER_AXIS_RIGHTX = 2;
  SDL_CONTROLLER_AXIS_RIGHTY = 3;
  SDL_CONTROLLER_AXIS_TRIGGERLEFT = 4;
  SDL_CONTROLLER_AXIS_TRIGGERRIGHT = 5;
  SDL_CONTROLLER_AXIS_MAX = 6;
  SDL_CONTROLLER_BUTTON_INVALID = -1;
  SDL_CONTROLLER_BUTTON_A = 0;
  SDL_CONTROLLER_BUTTON_B = 1;
  SDL_CONTROLLER_BUTTON_X = 2;
  SDL_CONTROLLER_BUTTON_Y = 3;
  SDL_CONTROLLER_BUTTON_BACK = 4;
  SDL_CONTROLLER_BUTTON_GUIDE = 5;
  SDL_CONTROLLER_BUTTON_START = 6;
  SDL_CONTROLLER_BUTTON_LEFTSTICK = 7;
  SDL_CONTROLLER_BUTTON_RIGHTSTICK = 8;
  SDL_CONTROLLER_BUTTON_LEFTSHOULDER = 9;
  SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = 10;
  SDL_CONTROLLER_BUTTON_DPAD_UP = 11;
  SDL_CONTROLLER_BUTTON_DPAD_DOWN = 12;
  SDL_CONTROLLER_BUTTON_DPAD_LEFT = 13;
  SDL_CONTROLLER_BUTTON_DPAD_RIGHT = 14;
  SDL_CONTROLLER_BUTTON_MISC1 = 15;
  SDL_CONTROLLER_BUTTON_PADDLE1 = 16;
  SDL_CONTROLLER_BUTTON_PADDLE2 = 17;
  SDL_CONTROLLER_BUTTON_PADDLE3 = 18;
  SDL_CONTROLLER_BUTTON_PADDLE4 = 19;
  SDL_CONTROLLER_BUTTON_TOUCHPAD = 20;
  SDL_CONTROLLER_BUTTON_MAX = 21;
  SDL_TOUCH_DEVICE_INVALID = -1;
  SDL_TOUCH_DEVICE_DIRECT = 0;
  SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1;
  SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2;
  SDL_FIRSTEVENT = 0;
  SDL_QUIT_ = 256;
  SDL_APP_TERMINATING = 257;
  SDL_APP_LOWMEMORY = 258;
  SDL_APP_WILLENTERBACKGROUND = 259;
  SDL_APP_DIDENTERBACKGROUND = 260;
  SDL_APP_WILLENTERFOREGROUND = 261;
  SDL_APP_DIDENTERFOREGROUND = 262;
  SDL_LOCALECHANGED = 263;
  SDL_DISPLAYEVENT_ = 336;
  SDL_WINDOWEVENT_= 512;
  SDL_SYSWMEVENT_ = 513;
  SDL_KEYDOWN = 768;
  SDL_KEYUP = 769;
  SDL_TEXTEDITING = 770;
  SDL_TEXTINPUT = 771;
  SDL_KEYMAPCHANGED = 772;
  SDL_MOUSEMOTION = 1024;
  SDL_MOUSEBUTTONDOWN = 1025;
  SDL_MOUSEBUTTONUP = 1026;
  SDL_MOUSEWHEEL = 1027;
  SDL_JOYAXISMOTION = 1536;
  SDL_JOYBALLMOTION = 1537;
  SDL_JOYHATMOTION = 1538;
  SDL_JOYBUTTONDOWN = 1539;
  SDL_JOYBUTTONUP = 1540;
  SDL_JOYDEVICEADDED = 1541;
  SDL_JOYDEVICEREMOVED = 1542;
  SDL_CONTROLLERAXISMOTION = 1616;
  SDL_CONTROLLERBUTTONDOWN = 1617;
  SDL_CONTROLLERBUTTONUP = 1618;
  SDL_CONTROLLERDEVICEADDED = 1619;
  SDL_CONTROLLERDEVICEREMOVED = 1620;
  SDL_CONTROLLERDEVICEREMAPPED = 1621;
  SDL_CONTROLLERTOUCHPADDOWN = 1622;
  SDL_CONTROLLERTOUCHPADMOTION = 1623;
  SDL_CONTROLLERTOUCHPADUP = 1624;
  SDL_CONTROLLERSENSORUPDATE = 1625;
  SDL_FINGERDOWN = 1792;
  SDL_FINGERUP = 1793;
  SDL_FINGERMOTION = 1794;
  SDL_DOLLARGESTURE = 2048;
  SDL_DOLLARRECORD = 2049;
  SDL_MULTIGESTURE = 2050;
  SDL_CLIPBOARDUPDATE = 2304;
  SDL_DROPFILE = 4096;
  SDL_DROPTEXT = 4097;
  SDL_DROPBEGIN = 4098;
  SDL_DROPCOMPLETE = 4099;
  SDL_AUDIODEVICEADDED = 4352;
  SDL_AUDIODEVICEREMOVED = 4353;
  SDL_SENSORUPDATE_ = 4608;
  SDL_RENDER_TARGETS_RESET = 8192;
  SDL_RENDER_DEVICE_RESET = 8193;
  SDL_POLLSENTINEL = 32512;
  SDL_USEREVENT_ = 32768;
  SDL_LASTEVENT = 65535;
  SDL_ADDEVENT = 0;
  SDL_PEEKEVENT = 1;
  SDL_GETEVENT = 2;
  SDL_HINT_DEFAULT = 0;
  SDL_HINT_NORMAL = 1;
  SDL_HINT_OVERRIDE = 2;
  SDL_LOG_CATEGORY_APPLICATION = 0;
  SDL_LOG_CATEGORY_ERROR = 1;
  SDL_LOG_CATEGORY_ASSERT = 2;
  SDL_LOG_CATEGORY_SYSTEM = 3;
  SDL_LOG_CATEGORY_AUDIO = 4;
  SDL_LOG_CATEGORY_VIDEO = 5;
  SDL_LOG_CATEGORY_RENDER = 6;
  SDL_LOG_CATEGORY_INPUT = 7;
  SDL_LOG_CATEGORY_TEST = 8;
  SDL_LOG_CATEGORY_RESERVED1 = 9;
  SDL_LOG_CATEGORY_RESERVED2 = 10;
  SDL_LOG_CATEGORY_RESERVED3 = 11;
  SDL_LOG_CATEGORY_RESERVED4 = 12;
  SDL_LOG_CATEGORY_RESERVED5 = 13;
  SDL_LOG_CATEGORY_RESERVED6 = 14;
  SDL_LOG_CATEGORY_RESERVED7 = 15;
  SDL_LOG_CATEGORY_RESERVED8 = 16;
  SDL_LOG_CATEGORY_RESERVED9 = 17;
  SDL_LOG_CATEGORY_RESERVED10 = 18;
  SDL_LOG_CATEGORY_CUSTOM = 19;
  SDL_LOG_PRIORITY_VERBOSE = 1;
  SDL_LOG_PRIORITY_DEBUG = 2;
  SDL_LOG_PRIORITY_INFO = 3;
  SDL_LOG_PRIORITY_WARN = 4;
  SDL_LOG_PRIORITY_ERROR = 5;
  SDL_LOG_PRIORITY_CRITICAL = 6;
  SDL_NUM_LOG_PRIORITIES = 7;
  SDL_MESSAGEBOX_ERROR = 16;
  SDL_MESSAGEBOX_WARNING = 32;
  SDL_MESSAGEBOX_INFORMATION = 64;
  SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 128;
  SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 256;
  SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 1;
  SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 2;
  SDL_MESSAGEBOX_COLOR_BACKGROUND = 0;
  SDL_MESSAGEBOX_COLOR_TEXT = 1;
  SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2;
  SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3;
  SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4;
  SDL_MESSAGEBOX_COLOR_MAX = 5;
  SDL_POWERSTATE_UNKNOWN = 0;
  SDL_POWERSTATE_ON_BATTERY = 1;
  SDL_POWERSTATE_NO_BATTERY = 2;
  SDL_POWERSTATE_CHARGING = 3;
  SDL_POWERSTATE_CHARGED = 4;
  SDL_RENDERER_SOFTWARE = 1;
  SDL_RENDERER_ACCELERATED = 2;
  SDL_RENDERER_PRESENTVSYNC = 4;
  SDL_RENDERER_TARGETTEXTURE = 8;
  SDL_ScaleModeNearest = 0;
  SDL_ScaleModeLinear = 1;
  SDL_ScaleModeBest = 2;
  SDL_TEXTUREACCESS_STATIC = 0;
  SDL_TEXTUREACCESS_STREAMING = 1;
  SDL_TEXTUREACCESS_TARGET = 2;
  SDL_TEXTUREMODULATE_NONE = 0;
  SDL_TEXTUREMODULATE_COLOR = 1;
  SDL_TEXTUREMODULATE_ALPHA = 2;
  SDL_FLIP_NONE = 0;
  SDL_FLIP_HORIZONTAL = 1;
  SDL_FLIP_VERTICAL = 2;
  ShapeModeDefault = 0;
  ShapeModeBinarizeAlpha = 1;
  ShapeModeReverseBinarizeAlpha = 2;
  ShapeModeColorKey = 3;
  nk_false = 0;
  nk_true = 1;
  NK_UP = 0;
  NK_RIGHT = 1;
  NK_DOWN = 2;
  NK_LEFT = 3;
  NK_BUTTON_DEFAULT = 0;
  NK_BUTTON_REPEATER = 1;
  NK_FIXED = 0;
  NK_MODIFIABLE = 1;
  NK_VERTICAL = 0;
  NK_HORIZONTAL = 1;
  NK_MINIMIZED = 0;
  NK_MAXIMIZED = 1;
  NK_HIDDEN = 0;
  NK_SHOWN = 1;
  NK_CHART_LINES = 0;
  NK_CHART_COLUMN = 1;
  NK_CHART_MAX = 2;
  NK_CHART_HOVERING = 1;
  NK_CHART_CLICKED = 2;
  NK_RGB = 0;
  NK_RGBA = 1;
  NK_POPUP_STATIC = 0;
  NK_POPUP_DYNAMIC = 1;
  NK_DYNAMIC = 0;
  NK_STATIC = 1;
  NK_TREE_NODE = 0;
  NK_TREE_TAB = 1;
  NK_SYMBOL_NONE = 0;
  NK_SYMBOL_X = 1;
  NK_SYMBOL_UNDERSCORE = 2;
  NK_SYMBOL_CIRCLE_SOLID = 3;
  NK_SYMBOL_CIRCLE_OUTLINE = 4;
  NK_SYMBOL_RECT_SOLID = 5;
  NK_SYMBOL_RECT_OUTLINE = 6;
  NK_SYMBOL_TRIANGLE_UP = 7;
  NK_SYMBOL_TRIANGLE_DOWN = 8;
  NK_SYMBOL_TRIANGLE_LEFT = 9;
  NK_SYMBOL_TRIANGLE_RIGHT = 10;
  NK_SYMBOL_PLUS = 11;
  NK_SYMBOL_MINUS = 12;
  NK_SYMBOL_MAX = 13;
  NK_KEY_NONE = 0;
  NK_KEY_SHIFT = 1;
  NK_KEY_CTRL = 2;
  NK_KEY_DEL = 3;
  NK_KEY_ENTER = 4;
  NK_KEY_TAB = 5;
  NK_KEY_BACKSPACE = 6;
  NK_KEY_COPY = 7;
  NK_KEY_CUT = 8;
  NK_KEY_PASTE = 9;
  NK_KEY_UP = 10;
  NK_KEY_DOWN = 11;
  NK_KEY_LEFT = 12;
  NK_KEY_RIGHT = 13;
  NK_KEY_TEXT_INSERT_MODE = 14;
  NK_KEY_TEXT_REPLACE_MODE = 15;
  NK_KEY_TEXT_RESET_MODE = 16;
  NK_KEY_TEXT_LINE_START = 17;
  NK_KEY_TEXT_LINE_END = 18;
  NK_KEY_TEXT_START = 19;
  NK_KEY_TEXT_END = 20;
  NK_KEY_TEXT_UNDO = 21;
  NK_KEY_TEXT_REDO = 22;
  NK_KEY_TEXT_SELECT_ALL = 23;
  NK_KEY_TEXT_WORD_LEFT = 24;
  NK_KEY_TEXT_WORD_RIGHT = 25;
  NK_KEY_SCROLL_START = 26;
  NK_KEY_SCROLL_END = 27;
  NK_KEY_SCROLL_DOWN = 28;
  NK_KEY_SCROLL_UP = 29;
  NK_KEY_MAX = 30;
  NK_BUTTON_LEFT = 0;
  NK_BUTTON_MIDDLE = 1;
  NK_BUTTON_RIGHT = 2;
  NK_BUTTON_DOUBLE = 3;
  NK_BUTTON_MAX = 4;
  NK_ANTI_ALIASING_OFF = 0;
  NK_ANTI_ALIASING_ON = 1;
  NK_CONVERT_SUCCESS = 0;
  NK_CONVERT_INVALID_PARAM = 1;
  NK_CONVERT_COMMAND_BUFFER_FULL = 2;
  NK_CONVERT_VERTEX_BUFFER_FULL = 4;
  NK_CONVERT_ELEMENT_BUFFER_FULL = 8;
  NK_WINDOW_BORDER = 1;
  NK_WINDOW_MOVABLE = 2;
  NK_WINDOW_SCALABLE = 4;
  NK_WINDOW_CLOSABLE = 8;
  NK_WINDOW_MINIMIZABLE = 16;
  NK_WINDOW_NO_SCROLLBAR = 32;
  NK_WINDOW_TITLE = 64;
  NK_WINDOW_SCROLL_AUTO_HIDE = 128;
  NK_WINDOW_BACKGROUND = 256;
  NK_WINDOW_SCALE_LEFT = 512;
  NK_WINDOW_NO_INPUT = 1024;
  NK_WIDGET_INVALID = 0;
  NK_WIDGET_VALID = 1;
  NK_WIDGET_ROM = 2;
  NK_WIDGET_STATE_MODIFIED = 2;
  NK_WIDGET_STATE_INACTIVE = 4;
  NK_WIDGET_STATE_ENTERED = 8;
  NK_WIDGET_STATE_HOVER = 16;
  NK_WIDGET_STATE_ACTIVED = 32;
  NK_WIDGET_STATE_LEFT = 64;
  NK_WIDGET_STATE_HOVERED = 18;
  NK_WIDGET_STATE_ACTIVE = 34;
  NK_TEXT_ALIGN_LEFT = 1;
  NK_TEXT_ALIGN_CENTERED = 2;
  NK_TEXT_ALIGN_RIGHT = 4;
  NK_TEXT_ALIGN_TOP = 8;
  NK_TEXT_ALIGN_MIDDLE = 16;
  NK_TEXT_ALIGN_BOTTOM = 32;
  NK_TEXT_LEFT = 17;
  NK_TEXT_CENTERED = 18;
  NK_TEXT_RIGHT = 20;
  NK_EDIT_DEFAULT = 0;
  NK_EDIT_READ_ONLY = 1;
  NK_EDIT_AUTO_SELECT = 2;
  NK_EDIT_SIG_ENTER = 4;
  NK_EDIT_ALLOW_TAB = 8;
  NK_EDIT_NO_CURSOR = 16;
  NK_EDIT_SELECTABLE = 32;
  NK_EDIT_CLIPBOARD = 64;
  NK_EDIT_CTRL_ENTER_NEWLINE = 128;
  NK_EDIT_NO_HORIZONTAL_SCROLL = 256;
  NK_EDIT_ALWAYS_INSERT_MODE = 512;
  NK_EDIT_MULTILINE = 1024;
  NK_EDIT_GOTO_END_ON_ACTIVATE = 2048;
  NK_EDIT_SIMPLE = 512;
  NK_EDIT_FIELD = 608;
  NK_EDIT_BOX = 1640;
  NK_EDIT_EDITOR = 1128;
  NK_EDIT_ACTIVE = 1;
  NK_EDIT_INACTIVE = 2;
  NK_EDIT_ACTIVATED = 4;
  NK_EDIT_DEACTIVATED = 8;
  NK_EDIT_COMMITED = 16;
  NK_COLOR_TEXT = 0;
  NK_COLOR_WINDOW = 1;
  NK_COLOR_HEADER = 2;
  NK_COLOR_BORDER = 3;
  NK_COLOR_BUTTON = 4;
  NK_COLOR_BUTTON_HOVER = 5;
  NK_COLOR_BUTTON_ACTIVE = 6;
  NK_COLOR_TOGGLE = 7;
  NK_COLOR_TOGGLE_HOVER = 8;
  NK_COLOR_TOGGLE_CURSOR = 9;
  NK_COLOR_SELECT = 10;
  NK_COLOR_SELECT_ACTIVE = 11;
  NK_COLOR_SLIDER = 12;
  NK_COLOR_SLIDER_CURSOR = 13;
  NK_COLOR_SLIDER_CURSOR_HOVER = 14;
  NK_COLOR_SLIDER_CURSOR_ACTIVE = 15;
  NK_COLOR_PROPERTY = 16;
  NK_COLOR_EDIT = 17;
  NK_COLOR_EDIT_CURSOR = 18;
  NK_COLOR_COMBO = 19;
  NK_COLOR_CHART = 20;
  NK_COLOR_CHART_COLOR = 21;
  NK_COLOR_CHART_COLOR_HIGHLIGHT = 22;
  NK_COLOR_SCROLLBAR = 23;
  NK_COLOR_SCROLLBAR_CURSOR = 24;
  NK_COLOR_SCROLLBAR_CURSOR_HOVER = 25;
  NK_COLOR_SCROLLBAR_CURSOR_ACTIVE = 26;
  NK_COLOR_TAB_HEADER = 27;
  NK_COLOR_COUNT = 28;
  NK_CURSOR_ARROW = 0;
  NK_CURSOR_TEXT = 1;
  NK_CURSOR_MOVE = 2;
  NK_CURSOR_RESIZE_VERTICAL = 3;
  NK_CURSOR_RESIZE_HORIZONTAL = 4;
  NK_CURSOR_RESIZE_TOP_LEFT_DOWN_RIGHT = 5;
  NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT = 6;
  NK_CURSOR_COUNT = 7;
  NK_COORD_UV = 0;
  NK_COORD_PIXEL = 1;
  NK_FONT_ATLAS_ALPHA8 = 0;
  NK_FONT_ATLAS_RGBA32 = 1;
  NK_BUFFER_FIXED = 0;
  NK_BUFFER_DYNAMIC = 1;
  NK_BUFFER_FRONT = 0;
  NK_BUFFER_BACK = 1;
  NK_BUFFER_MAX = 2;
  NK_TEXT_EDIT_SINGLE_LINE = 0;
  NK_TEXT_EDIT_MULTI_LINE = 1;
  NK_TEXT_EDIT_MODE_VIEW = 0;
  NK_TEXT_EDIT_MODE_INSERT = 1;
  NK_TEXT_EDIT_MODE_REPLACE = 2;
  NK_COMMAND_NOP_ = 0;
  NK_COMMAND_SCISSOR_ = 1;
  NK_COMMAND_LINE_ = 2;
  NK_COMMAND_CURVE_ = 3;
  NK_COMMAND_RECT_ = 4;
  NK_COMMAND_RECT__FILLED_ = 5;
  NK_COMMAND_RECT__MULTI_COLOR_ = 6;
  NK_COMMAND_CIRCLE_ = 7;
  NK_COMMAND_CIRCLE__FILLED_ = 8;
  NK_COMMAND_ARC_ = 9;
  NK_COMMAND_ARC__FILLED_ = 10;
  NK_COMMAND_TRIANGLE_ = 11;
  NK_COMMAND_TRIANGLE__FILLED_ = 12;
  NK_COMMAND_POLYGON_ = 13;
  NK_COMMAND_POLYGON__FILLED_ = 14;
  NK_COMMAND_POLYLINE_ = 15;
  NK_COMMAND_TEXT_ = 16;
  NK_COMMAND_IMAGE_ = 17;
  NK_COMMAND_CUSTOM_ = 18;
  NK_CLIPPING_OFF = 0;
  NK_CLIPPING_ON = 1;
  NK_STYLE_ITEM_COLOR = 0;
  NK_STYLE_ITEM_IMAGE = 1;
  NK_STYLE_ITEM_NINE_SLICE = 2;
  NK_HEADER_LEFT = 0;
  NK_HEADER_RIGHT = 1;
  NK_PANEL_NONE = 0;
  NK_PANEL_WINDOW = 1;
  NK_PANEL_GROUP = 2;
  NK_PANEL_POPUP = 4;
  NK_PANEL_CONTEXTUAL = 16;
  NK_PANEL_COMBO = 32;
  NK_PANEL_MENU = 64;
  NK_PANEL_TOOLTIP = 128;
  NK_PANEL_SET_NONBLOCK = 240;
  NK_PANEL_SET_POPUP = 244;
  NK_PANEL_SET_SUB = 246;
  NK_LAYOUT_DYNAMIC_FIXED = 0;
  NK_LAYOUT_DYNAMIC_ROW = 1;
  NK_LAYOUT_DYNAMIC_FREE = 2;
  NK_LAYOUT_DYNAMIC = 3;
  NK_LAYOUT_STATIC_FIXED = 4;
  NK_LAYOUT_STATIC_ROW = 5;
  NK_LAYOUT_STATIC_FREE = 6;
  NK_LAYOUT_STATIC = 7;
  NK_LAYOUT_TEMPLATE = 8;
  NK_LAYOUT_COUNT = 9;
  NK_WINDOW_PRIVATE = 2048;
  NK_WINDOW_DYNAMIC = 2048;
  NK_WINDOW_ROM = 4096;
  NK_WINDOW_NOT_INTERACTIVE = 5120;
  NK_WINDOW_HIDDEN = 8192;
  NK_WINDOW_CLOSED = 16384;
  NK_WINDOW_MINIMIZED = 32768;
  NK_WINDOW_REMOVE_ROM = 65536;
  STBI_default = 0;
  STBI_grey = 1;
  STBI_grey_alpha = 2;
  STBI_rgb = 3;
  STBI_rgb_alpha = 4;
  STBTT_vmove = 1;
  STBTT_vline = 2;
  STBTT_vcurve = 3;
  STBTT_vcubic = 4;
  STBTT_PLATFORM_ID_UNICODE = 0;
  STBTT_PLATFORM_ID_MAC = 1;
  STBTT_PLATFORM_ID_ISO = 2;
  STBTT_PLATFORM_ID_MICROSOFT = 3;
  STBTT_UNICODE_EID_UNICODE_1_0 = 0;
  STBTT_UNICODE_EID_UNICODE_1_1 = 1;
  STBTT_UNICODE_EID_ISO_10646 = 2;
  STBTT_UNICODE_EID_UNICODE_2_0_BMP = 3;
  STBTT_UNICODE_EID_UNICODE_2_0_FULL = 4;
  STBTT_MS_EID_SYMBOL = 0;
  STBTT_MS_EID_UNICODE_BMP = 1;
  STBTT_MS_EID_SHIFTJIS = 2;
  STBTT_MS_EID_UNICODE_FULL = 10;
  STBTT_MAC_EID_ROMAN = 0;
  STBTT_MAC_EID_ARABIC = 4;
  STBTT_MAC_EID_JAPANESE = 1;
  STBTT_MAC_EID_HEBREW = 5;
  STBTT_MAC_EID_CHINESE_TRAD = 2;
  STBTT_MAC_EID_GREEK = 6;
  STBTT_MAC_EID_KOREAN = 3;
  STBTT_MAC_EID_RUSSIAN = 7;
  STBTT_MS_LANG_ENGLISH = 1033;
  STBTT_MS_LANG_ITALIAN = 1040;
  STBTT_MS_LANG_CHINESE = 2052;
  STBTT_MS_LANG_JAPANESE = 1041;
  STBTT_MS_LANG_DUTCH = 1043;
  STBTT_MS_LANG_KOREAN = 1042;
  STBTT_MS_LANG_FRENCH = 1036;
  STBTT_MS_LANG_RUSSIAN = 1049;
  STBTT_MS_LANG_GERMAN = 1031;
  STBTT_MS_LANG_SPANISH = 1033;
  STBTT_MS_LANG_HEBREW = 1037;
  STBTT_MS_LANG_SWEDISH = 1053;
  STBTT_MAC_LANG_ENGLISH = 0;
  STBTT_MAC_LANG_JAPANESE = 11;
  STBTT_MAC_LANG_ARABIC = 12;
  STBTT_MAC_LANG_KOREAN = 23;
  STBTT_MAC_LANG_DUTCH = 4;
  STBTT_MAC_LANG_RUSSIAN = 32;
  STBTT_MAC_LANG_FRENCH = 1;
  STBTT_MAC_LANG_SPANISH = 6;
  STBTT_MAC_LANG_GERMAN = 2;
  STBTT_MAC_LANG_SWEDISH = 5;
  STBTT_MAC_LANG_HEBREW = 10;
  STBTT_MAC_LANG_CHINESE_SIMPLIFIED = 33;
  STBTT_MAC_LANG_ITALIAN = 3;
  STBTT_MAC_LANG_CHINESE_TRAD = 19;
  MA_CHANNEL_NONE = 0;
  MA_CHANNEL_MONO = 1;
  MA_CHANNEL_FRONT_LEFT = 2;
  MA_CHANNEL_FRONT_RIGHT = 3;
  MA_CHANNEL_FRONT_CENTER = 4;
  MA_CHANNEL_LFE = 5;
  MA_CHANNEL_BACK_LEFT = 6;
  MA_CHANNEL_BACK_RIGHT = 7;
  MA_CHANNEL_FRONT_LEFT_CENTER = 8;
  MA_CHANNEL_FRONT_RIGHT_CENTER = 9;
  MA_CHANNEL_BACK_CENTER = 10;
  MA_CHANNEL_SIDE_LEFT = 11;
  MA_CHANNEL_SIDE_RIGHT = 12;
  MA_CHANNEL_TOP_CENTER = 13;
  MA_CHANNEL_TOP_FRONT_LEFT = 14;
  MA_CHANNEL_TOP_FRONT_CENTER = 15;
  MA_CHANNEL_TOP_FRONT_RIGHT = 16;
  MA_CHANNEL_TOP_BACK_LEFT = 17;
  MA_CHANNEL_TOP_BACK_CENTER = 18;
  MA_CHANNEL_TOP_BACK_RIGHT = 19;
  MA_CHANNEL_AUX_0 = 20;
  MA_CHANNEL_AUX_1 = 21;
  MA_CHANNEL_AUX_2 = 22;
  MA_CHANNEL_AUX_3 = 23;
  MA_CHANNEL_AUX_4 = 24;
  MA_CHANNEL_AUX_5 = 25;
  MA_CHANNEL_AUX_6 = 26;
  MA_CHANNEL_AUX_7 = 27;
  MA_CHANNEL_AUX_8 = 28;
  MA_CHANNEL_AUX_9 = 29;
  MA_CHANNEL_AUX_10 = 30;
  MA_CHANNEL_AUX_11 = 31;
  MA_CHANNEL_AUX_12 = 32;
  MA_CHANNEL_AUX_13 = 33;
  MA_CHANNEL_AUX_14 = 34;
  MA_CHANNEL_AUX_15 = 35;
  MA_CHANNEL_AUX_16 = 36;
  MA_CHANNEL_AUX_17 = 37;
  MA_CHANNEL_AUX_18 = 38;
  MA_CHANNEL_AUX_19 = 39;
  MA_CHANNEL_AUX_20 = 40;
  MA_CHANNEL_AUX_21 = 41;
  MA_CHANNEL_AUX_22 = 42;
  MA_CHANNEL_AUX_23 = 43;
  MA_CHANNEL_AUX_24 = 44;
  MA_CHANNEL_AUX_25 = 45;
  MA_CHANNEL_AUX_26 = 46;
  MA_CHANNEL_AUX_27 = 47;
  MA_CHANNEL_AUX_28 = 48;
  MA_CHANNEL_AUX_29 = 49;
  MA_CHANNEL_AUX_30 = 50;
  MA_CHANNEL_AUX_31 = 51;
  MA_CHANNEL_LEFT = 2;
  MA_CHANNEL_RIGHT = 3;
  MA_CHANNEL_POSITION_COUNT = 52;
  MA_SUCCESS = 0;
  MA_ERROR = -1;
  MA_INVALID_ARGS = -2;
  MA_INVALID_OPERATION = -3;
  MA_OUT_OF_MEMORY = -4;
  MA_OUT_OF_RANGE = -5;
  MA_ACCESS_DENIED = -6;
  MA_DOES_NOT_EXIST = -7;
  MA_ALREADY_EXISTS = -8;
  MA_TOO_MANY_OPEN_FILES = -9;
  MA_INVALID_FILE = -10;
  MA_TOO_BIG = -11;
  MA_PATH_TOO_LONG = -12;
  MA_NAME_TOO_LONG = -13;
  MA_NOT_DIRECTORY = -14;
  MA_IS_DIRECTORY = -15;
  MA_DIRECTORY_NOT_EMPTY = -16;
  MA_AT_END = -17;
  MA_NO_SPACE = -18;
  MA_BUSY = -19;
  MA_IO_ERROR = -20;
  MA_INTERRUPT = -21;
  MA_UNAVAILABLE = -22;
  MA_ALREADY_IN_USE = -23;
  MA_BAD_ADDRESS = -24;
  MA_BAD_SEEK = -25;
  MA_BAD_PIPE = -26;
  MA_DEADLOCK = -27;
  MA_TOO_MANY_LINKS = -28;
  MA_NOT_IMPLEMENTED = -29;
  MA_NO_MESSAGE = -30;
  MA_BAD_MESSAGE = -31;
  MA_NO_DATA_AVAILABLE = -32;
  MA_INVALID_DATA = -33;
  MA_TIMEOUT = -34;
  MA_NO_NETWORK = -35;
  MA_NOT_UNIQUE = -36;
  MA_NOT_SOCKET = -37;
  MA_NO_ADDRESS = -38;
  MA_BAD_PROTOCOL = -39;
  MA_PROTOCOL_UNAVAILABLE = -40;
  MA_PROTOCOL_NOT_SUPPORTED = -41;
  MA_PROTOCOL_FAMILY_NOT_SUPPORTED = -42;
  MA_ADDRESS_FAMILY_NOT_SUPPORTED = -43;
  MA_SOCKET_NOT_SUPPORTED = -44;
  MA_CONNECTION_RESET = -45;
  MA_ALREADY_CONNECTED = -46;
  MA_NOT_CONNECTED = -47;
  MA_CONNECTION_REFUSED = -48;
  MA_NO_HOST = -49;
  MA_IN_PROGRESS = -50;
  MA_CANCELLED = -51;
  MA_MEMORY_ALREADY_MAPPED = -52;
  MA_FORMAT_NOT_SUPPORTED = -100;
  MA_DEVICE_TYPE_NOT_SUPPORTED = -101;
  MA_SHARE_MODE_NOT_SUPPORTED = -102;
  MA_NO_BACKEND = -103;
  MA_NO_DEVICE = -104;
  MA_API_NOT_FOUND = -105;
  MA_INVALID_DEVICE_CONFIG = -106;
  MA_LOOP = -107;
  MA_DEVICE_NOT_INITIALIZED = -200;
  MA_DEVICE_ALREADY_INITIALIZED = -201;
  MA_DEVICE_NOT_STARTED = -202;
  MA_DEVICE_NOT_STOPPED = -203;
  MA_FAILED_TO_INIT_BACKEND = -300;
  MA_FAILED_TO_OPEN_BACKEND_DEVICE = -301;
  MA_FAILED_TO_START_BACKEND_DEVICE = -302;
  MA_FAILED_TO_STOP_BACKEND_DEVICE = -303;
  ma_stream_format_pcm = 0;
  ma_stream_layout_interleaved = 0;
  ma_stream_layout_deinterleaved = 1;
  ma_dither_mode_none = 0;
  ma_dither_mode_rectangle = 1;
  ma_dither_mode_triangle = 2;
  ma_format_unknown = 0;
  ma_format_u8 = 1;
  ma_format_s16 = 2;
  ma_format_s24 = 3;
  ma_format_s32 = 4;
  ma_format_f32 = 5;
  ma_format_count = 6;
  ma_standard_sample_rate_48000 = 48000;
  ma_standard_sample_rate_44100 = 44100;
  ma_standard_sample_rate_32000 = 32000;
  ma_standard_sample_rate_24000 = 24000;
  ma_standard_sample_rate_22050 = 22050;
  ma_standard_sample_rate_88200 = 88200;
  ma_standard_sample_rate_96000 = 96000;
  ma_standard_sample_rate_176400 = 176400;
  ma_standard_sample_rate_192000 = 192000;
  ma_standard_sample_rate_16000 = 16000;
  ma_standard_sample_rate_11025 = 11250;
  ma_standard_sample_rate_8000 = 8000;
  ma_standard_sample_rate_352800 = 352800;
  ma_standard_sample_rate_384000 = 384000;
  ma_standard_sample_rate_min = 8000;
  ma_standard_sample_rate_max = 384000;
  ma_standard_sample_rate_count = 14;
  ma_channel_mix_mode_rectangular = 0;
  ma_channel_mix_mode_simple = 1;
  ma_channel_mix_mode_custom_weights = 2;
  ma_channel_mix_mode_default = 0;
  ma_standard_channel_map_microsoft = 0;
  ma_standard_channel_map_alsa = 1;
  ma_standard_channel_map_rfc3551 = 2;
  ma_standard_channel_map_flac = 3;
  ma_standard_channel_map_vorbis = 4;
  ma_standard_channel_map_sound4 = 5;
  ma_standard_channel_map_sndio = 6;
  ma_standard_channel_map_webaudio = 3;
  ma_standard_channel_map_default = 0;
  ma_performance_profile_low_latency = 0;
  ma_performance_profile_conservative = 1;
  ma_thread_priority_idle = -5;
  ma_thread_priority_lowest = -4;
  ma_thread_priority_low = -3;
  ma_thread_priority_normal = -2;
  ma_thread_priority_high = -1;
  ma_thread_priority_highest = 0;
  ma_thread_priority_realtime = 1;
  ma_thread_priority_default = 0;
  ma_pan_mode_balance = 0;
  ma_pan_mode_pan = 1;
  ma_attenuation_model_none = 0;
  ma_attenuation_model_inverse = 1;
  ma_attenuation_model_linear = 2;
  ma_attenuation_model_exponential = 3;
  ma_positioning_absolute = 0;
  ma_positioning_relative = 1;
  ma_handedness_right = 0;
  ma_handedness_left = 1;
  ma_resample_algorithm_linear = 0;
  ma_resample_algorithm_custom = 1;
  ma_channel_conversion_path_unknown = 0;
  ma_channel_conversion_path_passthrough = 1;
  ma_channel_conversion_path_mono_out = 2;
  ma_channel_conversion_path_mono_in = 3;
  ma_channel_conversion_path_shuffle = 4;
  ma_channel_conversion_path_weights = 5;
  ma_mono_expansion_mode_duplicate = 0;
  ma_mono_expansion_mode_average = 1;
  ma_mono_expansion_mode_stereo_only = 2;
  ma_mono_expansion_mode_default = 0;
  ma_data_converter_execution_path_passthrough = 0;
  ma_data_converter_execution_path_format_only = 1;
  ma_data_converter_execution_path_channels_only = 2;
  ma_data_converter_execution_path_resample_only = 3;
  ma_data_converter_execution_path_resample_first = 4;
  ma_data_converter_execution_path_channels_first = 5;
  ma_device_state_uninitialized = 0;
  ma_device_state_stopped = 1;
  ma_device_state_started = 2;
  ma_device_state_starting = 3;
  ma_device_state_stopping = 4;
  ma_backend_wasapi = 0;
  ma_backend_dsound = 1;
  ma_backend_winmm = 2;
  ma_backend_coreaudio = 3;
  ma_backend_sndio = 4;
  ma_backend_audio4 = 5;
  ma_backend_oss = 6;
  ma_backend_pulseaudio = 7;
  ma_backend_alsa = 8;
  ma_backend_jack = 9;
  ma_backend_aaudio = 10;
  ma_backend_opensl = 11;
  ma_backend_webaudio = 12;
  ma_backend_custom = 13;
  ma_backend_null = 14;
  ma_device_type_playback = 1;
  ma_device_type_capture = 2;
  ma_device_type_duplex = 3;
  ma_device_type_loopback = 4;
  ma_share_mode_shared = 0;
  ma_share_mode_exclusive = 1;
  ma_ios_session_category_default = 0;
  ma_ios_session_category_none = 1;
  ma_ios_session_category_ambient = 2;
  ma_ios_session_category_solo_ambient = 3;
  ma_ios_session_category_playback = 4;
  ma_ios_session_category_record = 5;
  ma_ios_session_category_play_and_record = 6;
  ma_ios_session_category_multi_route = 7;
  ma_ios_session_category_option_mix_with_others = 1;
  ma_ios_session_category_option_duck_others = 2;
  ma_ios_session_category_option_allow_bluetooth = 4;
  ma_ios_session_category_option_default_to_speaker = 8;
  ma_ios_session_category_option_interrupt_spoken_audio_and_mix_with_others = 17;
  ma_ios_session_category_option_allow_bluetooth_a2dp = 32;
  ma_ios_session_category_option_allow_air_play = 64;
  ma_opensl_stream_type_default = 0;
  ma_opensl_stream_type_voice = 1;
  ma_opensl_stream_type_system = 2;
  ma_opensl_stream_type_ring = 3;
  ma_opensl_stream_type_media = 4;
  ma_opensl_stream_type_alarm = 5;
  ma_opensl_stream_type_notification = 6;
  ma_opensl_recording_preset_default = 0;
  ma_opensl_recording_preset_generic = 1;
  ma_opensl_recording_preset_camcorder = 2;
  ma_opensl_recording_preset_voice_recognition = 3;
  ma_opensl_recording_preset_voice_communication = 4;
  ma_opensl_recording_preset_voice_unprocessed = 5;
  ma_aaudio_usage_default = 0;
  ma_aaudio_usage_announcement = 1;
  ma_aaudio_usage_emergency = 2;
  ma_aaudio_usage_safety = 3;
  ma_aaudio_usage_vehicle_status = 4;
  ma_aaudio_usage_alarm = 5;
  ma_aaudio_usage_assistance_accessibility = 6;
  ma_aaudio_usage_assistance_navigation_guidance = 7;
  ma_aaudio_usage_assistance_sonification = 8;
  ma_aaudio_usage_assitant = 9;
  ma_aaudio_usage_game = 10;
  ma_aaudio_usage_media = 11;
  ma_aaudio_usage_notification = 12;
  ma_aaudio_usage_notification_event = 13;
  ma_aaudio_usage_notification_ringtone = 14;
  ma_aaudio_usage_voice_communication = 15;
  ma_aaudio_usage_voice_communication_signalling = 16;
  ma_aaudio_content_type_default = 0;
  ma_aaudio_content_type_movie = 1;
  ma_aaudio_content_type_music = 2;
  ma_aaudio_content_type_sonification = 3;
  ma_aaudio_content_type_speech = 4;
  ma_aaudio_input_preset_default = 0;
  ma_aaudio_input_preset_generic = 1;
  ma_aaudio_input_preset_camcorder = 2;
  ma_aaudio_input_preset_unprocessed = 3;
  ma_aaudio_input_preset_voice_recognition = 4;
  ma_aaudio_input_preset_voice_communication = 5;
  ma_aaudio_input_preset_voice_performance = 6;
  MA_OPEN_MODE_READ = 1;
  MA_OPEN_MODE_WRITE = 2;
  ma_seek_origin_start = 0;
  ma_seek_origin_current = 1;
  ma_seek_origin_end = 2;
  ma_encoding_format_unknown = 0;
  ma_encoding_format_wav = 1;
  ma_encoding_format_flac = 2;
  ma_encoding_format_mp3 = 3;
  ma_encoding_format_vorbis = 4;
  ma_waveform_type_sine = 0;
  ma_waveform_type_square = 1;
  ma_waveform_type_triangle = 2;
  ma_waveform_type_sawtooth = 3;
  ma_noise_type_white = 0;
  ma_noise_type_pink = 1;
  ma_noise_type_brownian = 2;
  MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_STREAM = 1;
  MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_DECODE = 2;
  MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_ASYNC = 4;
  MA_RESOURCE_MANAGER_DATA_SOURCE_FLAG_WAIT_INIT = 8;
  MA_RESOURCE_MANAGER_JOB_QUIT = 0;
  MA_RESOURCE_MANAGER_JOB_LOAD_DATA_BUFFER_NODE = 1;
  MA_RESOURCE_MANAGER_JOB_FREE_DATA_BUFFER_NODE = 2;
  MA_RESOURCE_MANAGER_JOB_PAGE_DATA_BUFFER_NODE = 3;
  MA_RESOURCE_MANAGER_JOB_LOAD_DATA_BUFFER = 4;
  MA_RESOURCE_MANAGER_JOB_FREE_DATA_BUFFER = 5;
  MA_RESOURCE_MANAGER_JOB_LOAD_DATA_STREAM = 6;
  MA_RESOURCE_MANAGER_JOB_FREE_DATA_STREAM = 7;
  MA_RESOURCE_MANAGER_JOB_PAGE_DATA_STREAM = 8;
  MA_RESOURCE_MANAGER_JOB_SEEK_DATA_STREAM = 9;
  MA_RESOURCE_MANAGER_JOB_CUSTOM = 256;
  MA_RESOURCE_MANAGER_JOB_QUEUE_FLAG_NON_BLOCKING = 1;
  MA_RESOURCE_MANAGER_FLAG_NON_BLOCKING = 1;
  MA_RESOURCE_MANAGER_FLAG_NO_THREADING = 2;
  ma_resource_manager_data_supply_type_unknown = 0;
  ma_resource_manager_data_supply_type_encoded = 1;
  ma_resource_manager_data_supply_type_decoded = 2;
  ma_resource_manager_data_supply_type_decoded_paged = 3;
  MA_NODE_FLAG_PASSTHROUGH = 1;
  MA_NODE_FLAG_CONTINUOUS_PROCESSING = 2;
  MA_NODE_FLAG_ALLOW_NULL_INPUT = 4;
  MA_NODE_FLAG_DIFFERENT_PROCESSING_RATES = 8;
  ma_node_state_started = 0;
  ma_node_state_stopped = 1;
  MA_SOUND_FLAG_STREAM = 1;
  MA_SOUND_FLAG_DECODE = 2;
  MA_SOUND_FLAG_ASYNC = 4;
  MA_SOUND_FLAG_WAIT_INIT = 8;
  MA_SOUND_FLAG_NO_DEFAULT_ATTACHMENT = 16;
  MA_SOUND_FLAG_NO_PITCH = 32;
  MA_SOUND_FLAG_NO_SPATIALIZATION = 64;
  ma_engine_node_type_sound = 0;
  ma_engine_node_type_group = 1;
  PHYSFS_ENUM_ERROR = -1;
  PHYSFS_ENUM_STOP = 0;
  PHYSFS_ENUM_OK = 1;
  PHYSFS_FILETYPE_REGULAR = 0;
  PHYSFS_FILETYPE_DIRECTORY = 1;
  PHYSFS_FILETYPE_SYMLINK = 2;
  PHYSFS_FILETYPE_OTHER = 3;
  PHYSFS_ERR_OK = 0;
  PHYSFS_ERR_OTHER_ERROR = 1;
  PHYSFS_ERR_OUT_OF_MEMORY = 2;
  PHYSFS_ERR_NOT_INITIALIZED = 3;
  PHYSFS_ERR_IS_INITIALIZED = 4;
  PHYSFS_ERR_ARGV0_IS_NULL = 5;
  PHYSFS_ERR_UNSUPPORTED = 6;
  PHYSFS_ERR_PAST_EOF = 7;
  PHYSFS_ERR_FILES_STILL_OPEN = 8;
  PHYSFS_ERR_INVALID_ARGUMENT = 9;
  PHYSFS_ERR_NOT_MOUNTED = 10;
  PHYSFS_ERR_NOT_FOUND = 11;
  PHYSFS_ERR_SYMLINK_FORBIDDEN = 12;
  PHYSFS_ERR_NO_WRITE_DIR = 13;
  PHYSFS_ERR_OPEN_FOR_READING = 14;
  PHYSFS_ERR_OPEN_FOR_WRITING = 15;
  PHYSFS_ERR_NOT_A_FILE = 16;
  PHYSFS_ERR_READ_ONLY = 17;
  PHYSFS_ERR_CORRUPT = 18;
  PHYSFS_ERR_SYMLINK_LOOP = 19;
  PHYSFS_ERR_IO = 20;
  PHYSFS_ERR_PERMISSION = 21;
  PHYSFS_ERR_NO_SPACE = 22;
  PHYSFS_ERR_BAD_FILENAME = 23;
  PHYSFS_ERR_BUSY = 24;
  PHYSFS_ERR_DIR_NOT_EMPTY = 25;
  PHYSFS_ERR_OS_ERROR = 26;
  PHYSFS_ERR_DUPLICATE = 27;
  PHYSFS_ERR_BAD_PASSWORD = 28;
  PHYSFS_ERR_APP_CALLBACK = 29;
  ENET_PROTOCOL_MINIMUM_MTU = 576;
  ENET_PROTOCOL_MAXIMUM_MTU = 4096;
  ENET_PROTOCOL_MAXIMUM_PACKET_COMMANDS = 32;
  ENET_PROTOCOL_MINIMUM_WINDOW_SIZE = 4096;
  ENET_PROTOCOL_MAXIMUM_WINDOW_SIZE = 65536;
  ENET_PROTOCOL_MINIMUM_CHANNEL_COUNT = 1;
  ENET_PROTOCOL_MAXIMUM_CHANNEL_COUNT = 255;
  ENET_PROTOCOL_MAXIMUM_PEER_ID = 4095;
  ENET_PROTOCOL_MAXIMUM_FRAGMENT_COUNT = 1048576;
  ENET_PROTOCOL_COMMAND_NONE = 0;
  ENET_PROTOCOL_COMMAND_ACKNOWLEDGE = 1;
  ENET_PROTOCOL_COMMAND_CONNECT = 2;
  ENET_PROTOCOL_COMMAND_VERIFY_CONNECT = 3;
  ENET_PROTOCOL_COMMAND_DISCONNECT = 4;
  ENET_PROTOCOL_COMMAND_PING = 5;
  ENET_PROTOCOL_COMMAND_SEND_RELIABLE = 6;
  ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE = 7;
  ENET_PROTOCOL_COMMAND_SEND_FRAGMENT = 8;
  ENET_PROTOCOL_COMMAND_SEND_UNSEQUENCED = 9;
  ENET_PROTOCOL_COMMAND_BANDWIDTH_LIMIT = 10;
  ENET_PROTOCOL_COMMAND_THROTTLE_CONFIGURE = 11;
  ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE_FRAGMENT = 12;
  ENET_PROTOCOL_COMMAND_COUNT = 13;
  ENET_PROTOCOL_COMMAND_MASK = 15;
  ENET_PROTOCOL_COMMAND_FLAG_ACKNOWLEDGE = 128;
  ENET_PROTOCOL_COMMAND_FLAG_UNSEQUENCED = 64;
  ENET_PROTOCOL_HEADER_FLAG_COMPRESSED = 16384;
  ENET_PROTOCOL_HEADER_FLAG_SENT_TIME = 32768;
  ENET_PROTOCOL_HEADER_FLAG_MASK = 49152;
  ENET_PROTOCOL_HEADER_SESSION_MASK = 12288;
  ENET_PROTOCOL_HEADER_SESSION_SHIFT = 12;
  ENET_SOCKET_TYPE_STREAM = 1;
  ENET_SOCKET_TYPE_DATAGRAM = 2;
  ENET_SOCKET_WAIT_NONE = 0;
  ENET_SOCKET_WAIT_SEND = 1;
  ENET_SOCKET_WAIT_RECEIVE = 2;
  ENET_SOCKET_WAIT_INTERRUPT = 4;
  ENET_SOCKOPT_NONBLOCK = 1;
  ENET_SOCKOPT_BROADCAST = 2;
  ENET_SOCKOPT_RCVBUF = 3;
  ENET_SOCKOPT_SNDBUF = 4;
  ENET_SOCKOPT_REUSEADDR = 5;
  ENET_SOCKOPT_RCVTIMEO = 6;
  ENET_SOCKOPT_SNDTIMEO = 7;
  ENET_SOCKOPT_ERROR = 8;
  ENET_SOCKOPT_NODELAY = 9;
  ENET_SOCKET_SHUTDOWN_READ = 0;
  ENET_SOCKET_SHUTDOWN_WRITE = 1;
  ENET_SOCKET_SHUTDOWN_READ_WRITE = 2;
  ENET_PACKET_FLAG_RELIABLE = 1;
  ENET_PACKET_FLAG_UNSEQUENCED = 2;
  ENET_PACKET_FLAG_NO_ALLOCATE = 4;
  ENET_PACKET_FLAG_UNRELIABLE_FRAGMENT = 8;
  ENET_PACKET_FLAG_SENT = 256;
  ENET_PEER_STATE_DISCONNECTED = 0;
  ENET_PEER_STATE_CONNECTING = 1;
  ENET_PEER_STATE_ACKNOWLEDGING_CONNECT = 2;
  ENET_PEER_STATE_CONNECTION_PENDING = 3;
  ENET_PEER_STATE_CONNECTION_SUCCEEDED = 4;
  ENET_PEER_STATE_CONNECTED = 5;
  ENET_PEER_STATE_DISCONNECT_LATER = 6;
  ENET_PEER_STATE_DISCONNECTING = 7;
  ENET_PEER_STATE_ACKNOWLEDGING_DISCONNECT = 8;
  ENET_PEER_STATE_ZOMBIE = 9;
  ENET_HOST_RECEIVE_BUFFER_SIZE = 262144;
  ENET_HOST_SEND_BUFFER_SIZE = 262144;
  ENET_HOST_BANDWIDTH_THROTTLE_INTERVAL = 1000;
  ENET_HOST_DEFAULT_MTU = 1400;
  ENET_HOST_DEFAULT_MAXIMUM_PACKET_SIZE = 33554432;
  ENET_HOST_DEFAULT_MAXIMUM_WAITING_DATA = 33554432;
  ENET_PEER_DEFAULT_ROUND_TRIP_TIME = 500;
  ENET_PEER_DEFAULT_PACKET_THROTTLE = 32;
  ENET_PEER_PACKET_THROTTLE_SCALE = 32;
  ENET_PEER_PACKET_THROTTLE_COUNTER = 7;
  ENET_PEER_PACKET_THROTTLE_ACCELERATION = 2;
  ENET_PEER_PACKET_THROTTLE_DECELERATION = 2;
  ENET_PEER_PACKET_THROTTLE_INTERVAL = 5000;
  ENET_PEER_PACKET_LOSS_SCALE = 65536;
  ENET_PEER_PACKET_LOSS_INTERVAL = 10000;
  ENET_PEER_WINDOW_SIZE_SCALE = 65536;
  ENET_PEER_TIMEOUT_LIMIT = 32;
  ENET_PEER_TIMEOUT_MINIMUM = 5000;
  ENET_PEER_TIMEOUT_MAXIMUM = 30000;
  ENET_PEER_PING_INTERVAL_ = 500;
  ENET_PEER_UNSEQUENCED_WINDOWS = 64;
  ENET_PEER_UNSEQUENCED_WINDOW_SIZE = 1024;
  ENET_PEER_FREE_UNSEQUENCED_WINDOWS = 32;
  ENET_PEER_RELIABLE_WINDOWS = 16;
  ENET_PEER_RELIABLE_WINDOW_SIZE = 4096;
  ENET_PEER_FREE_RELIABLE_WINDOWS = 8;
  ENET_PEER_FLAG_NEEDS_DISPATCH = 1;
  ENET_EVENT_TYPE_NONE = 0;
  ENET_EVENT_TYPE_CONNECT = 1;
  ENET_EVENT_TYPE_DISCONNECT = 2;
  ENET_EVENT_TYPE_RECEIVE = 3;
  ENET_BUFFER_MAXIMUM = (1+2*ENET_PROTOCOL_MAXIMUM_PACKET_COMMANDS);
  SDL_WINDOWPOS_UNDEFINED = SDL_WINDOWPOS_UNDEFINED_MASK or 0;
  SDL_WINDOWPOS_CENTERED = SDL_WINDOWPOS_CENTERED_MASK or 0;

type

  { SDL_bool  }
  SDL_bool = Integer;

  { PSDL_bool  }
  PSDL_bool = ^SDL_bool;

  { SDL_AssertState  }
  SDL_AssertState = Integer;

  { PSDL_AssertState  }
  PSDL_AssertState = ^SDL_AssertState;

  { SDL_errorcode  }
  SDL_errorcode = Integer;

  { PSDL_errorcode  }
  PSDL_errorcode = ^SDL_errorcode;

  { SDL_ThreadPriority  }
  SDL_ThreadPriority = Integer;

  { PSDL_ThreadPriority  }
  PSDL_ThreadPriority = ^SDL_ThreadPriority;

  { SDL_AudioStatus  }
  SDL_AudioStatus = Integer;

  { PSDL_AudioStatus  }
  PSDL_AudioStatus = ^SDL_AudioStatus;

  { SDL_PixelType  }
  SDL_PixelType = Integer;

  { PSDL_PixelType  }
  PSDL_PixelType = ^SDL_PixelType;

  { SDL_BitmapOrder  }
  SDL_BitmapOrder = Integer;

  { PSDL_BitmapOrder  }
  PSDL_BitmapOrder = ^SDL_BitmapOrder;

  { SDL_PackedOrder  }
  SDL_PackedOrder = Integer;

  { PSDL_PackedOrder  }
  PSDL_PackedOrder = ^SDL_PackedOrder;

  { SDL_ArrayOrder  }
  SDL_ArrayOrder = Integer;

  { PSDL_ArrayOrder  }
  PSDL_ArrayOrder = ^SDL_ArrayOrder;

  { SDL_PackedLayout  }
  SDL_PackedLayout = Integer;

  { PSDL_PackedLayout  }
  PSDL_PackedLayout = ^SDL_PackedLayout;

  { SDL_PixelFormatEnum  }
  SDL_PixelFormatEnum = Integer;

  { PSDL_PixelFormatEnum  }
  PSDL_PixelFormatEnum = ^SDL_PixelFormatEnum;

  { SDL_BlendMode  }
  SDL_BlendMode = Integer;

  { PSDL_BlendMode  }
  PSDL_BlendMode = ^SDL_BlendMode;

  { SDL_BlendOperation  }
  SDL_BlendOperation = Integer;

  { PSDL_BlendOperation  }
  PSDL_BlendOperation = ^SDL_BlendOperation;

  { SDL_BlendFactor  }
  SDL_BlendFactor = Integer;

  { PSDL_BlendFactor  }
  PSDL_BlendFactor = ^SDL_BlendFactor;

  { SDL_YUV_CONVERSION_MODE  }
  SDL_YUV_CONVERSION_MODE = Integer;

  { PSDL_YUV_CONVERSION_MODE  }
  PSDL_YUV_CONVERSION_MODE = ^SDL_YUV_CONVERSION_MODE;

  { SDL_WindowFlags  }
  SDL_WindowFlags = Integer;

  { PSDL_WindowFlags  }
  PSDL_WindowFlags = ^SDL_WindowFlags;

  { SDL_WindowEventID  }
  SDL_WindowEventID = Integer;

  { PSDL_WindowEventID  }
  PSDL_WindowEventID = ^SDL_WindowEventID;

  { SDL_DisplayEventID  }
  SDL_DisplayEventID = Integer;

  { PSDL_DisplayEventID  }
  PSDL_DisplayEventID = ^SDL_DisplayEventID;

  { SDL_DisplayOrientation  }
  SDL_DisplayOrientation = Integer;

  { PSDL_DisplayOrientation  }
  PSDL_DisplayOrientation = ^SDL_DisplayOrientation;

  { SDL_FlashOperation  }
  SDL_FlashOperation = Integer;

  { PSDL_FlashOperation  }
  PSDL_FlashOperation = ^SDL_FlashOperation;

  { SDL_GLattr  }
  SDL_GLattr = Integer;

  { PSDL_GLattr  }
  PSDL_GLattr = ^SDL_GLattr;

  { SDL_GLprofile  }
  SDL_GLprofile = Integer;

  { PSDL_GLprofile  }
  PSDL_GLprofile = ^SDL_GLprofile;

  { SDL_GLcontextFlag  }
  SDL_GLcontextFlag = Integer;

  { PSDL_GLcontextFlag  }
  PSDL_GLcontextFlag = ^SDL_GLcontextFlag;

  { SDL_GLcontextReleaseFlag  }
  SDL_GLcontextReleaseFlag = Integer;

  { PSDL_GLcontextReleaseFlag  }
  PSDL_GLcontextReleaseFlag = ^SDL_GLcontextReleaseFlag;

  { SDL_GLContextResetNotification  }
  SDL_GLContextResetNotification = Integer;

  { PSDL_GLContextResetNotification  }
  PSDL_GLContextResetNotification = ^SDL_GLContextResetNotification;

  { SDL_HitTestResult  }
  SDL_HitTestResult = Integer;

  { PSDL_HitTestResult  }
  PSDL_HitTestResult = ^SDL_HitTestResult;

  { SDL_Scancode  }
  SDL_Scancode = Integer;

  { PSDL_Scancode  }
  PSDL_Scancode = ^SDL_Scancode;

  { SDL_KeyCode  }
  SDL_KeyCode = Integer;

  { PSDL_KeyCode  }
  PSDL_KeyCode = ^SDL_KeyCode;

  { SDL_Keymod  }
  SDL_Keymod = Integer;

  { PSDL_Keymod  }
  PSDL_Keymod = ^SDL_Keymod;

  { SDL_SystemCursor  }
  SDL_SystemCursor = Integer;

  { PSDL_SystemCursor  }
  PSDL_SystemCursor = ^SDL_SystemCursor;

  { SDL_MouseWheelDirection  }
  SDL_MouseWheelDirection = Integer;

  { PSDL_MouseWheelDirection  }
  PSDL_MouseWheelDirection = ^SDL_MouseWheelDirection;

  { SDL_JoystickType  }
  SDL_JoystickType = Integer;

  { PSDL_JoystickType  }
  PSDL_JoystickType = ^SDL_JoystickType;

  { SDL_JoystickPowerLevel  }
  SDL_JoystickPowerLevel = Integer;

  { PSDL_JoystickPowerLevel  }
  PSDL_JoystickPowerLevel = ^SDL_JoystickPowerLevel;

  { SDL_SensorType  }
  SDL_SensorType = Integer;

  { PSDL_SensorType  }
  PSDL_SensorType = ^SDL_SensorType;

  { SDL_GameControllerType  }
  SDL_GameControllerType = Integer;

  { PSDL_GameControllerType  }
  PSDL_GameControllerType = ^SDL_GameControllerType;

  { SDL_GameControllerBindType  }
  SDL_GameControllerBindType = Integer;

  { PSDL_GameControllerBindType  }
  PSDL_GameControllerBindType = ^SDL_GameControllerBindType;

  { SDL_GameControllerAxis  }
  SDL_GameControllerAxis = Integer;

  { PSDL_GameControllerAxis  }
  PSDL_GameControllerAxis = ^SDL_GameControllerAxis;

  { SDL_GameControllerButton  }
  SDL_GameControllerButton = Integer;

  { PSDL_GameControllerButton  }
  PSDL_GameControllerButton = ^SDL_GameControllerButton;

  { SDL_TouchDeviceType  }
  SDL_TouchDeviceType = Integer;

  { PSDL_TouchDeviceType  }
  PSDL_TouchDeviceType = ^SDL_TouchDeviceType;

  { SDL_EventType  }
  SDL_EventType = Integer;

  { PSDL_EventType  }
  PSDL_EventType = ^SDL_EventType;

  { SDL_eventaction  }
  SDL_eventaction = Integer;

  { PSDL_eventaction  }
  PSDL_eventaction = ^SDL_eventaction;

  { SDL_HintPriority  }
  SDL_HintPriority = Integer;

  { PSDL_HintPriority  }
  PSDL_HintPriority = ^SDL_HintPriority;

  { SDL_LogCategory  }
  SDL_LogCategory = Integer;

  { PSDL_LogCategory  }
  PSDL_LogCategory = ^SDL_LogCategory;

  { SDL_LogPriority  }
  SDL_LogPriority = Integer;

  { PSDL_LogPriority  }
  PSDL_LogPriority = ^SDL_LogPriority;

  { SDL_MessageBoxFlags  }
  SDL_MessageBoxFlags = Integer;

  { PSDL_MessageBoxFlags  }
  PSDL_MessageBoxFlags = ^SDL_MessageBoxFlags;

  { SDL_MessageBoxButtonFlags  }
  SDL_MessageBoxButtonFlags = Integer;

  { PSDL_MessageBoxButtonFlags  }
  PSDL_MessageBoxButtonFlags = ^SDL_MessageBoxButtonFlags;

  { SDL_MessageBoxColorType  }
  SDL_MessageBoxColorType = Integer;

  { PSDL_MessageBoxColorType  }
  PSDL_MessageBoxColorType = ^SDL_MessageBoxColorType;

  { SDL_PowerState  }
  SDL_PowerState = Integer;

  { PSDL_PowerState  }
  PSDL_PowerState = ^SDL_PowerState;

  { SDL_RendererFlags  }
  SDL_RendererFlags = Integer;

  { PSDL_RendererFlags  }
  PSDL_RendererFlags = ^SDL_RendererFlags;

  { SDL_ScaleMode  }
  SDL_ScaleMode = Integer;

  { PSDL_ScaleMode  }
  PSDL_ScaleMode = ^SDL_ScaleMode;

  { SDL_TextureAccess  }
  SDL_TextureAccess = Integer;

  { PSDL_TextureAccess  }
  PSDL_TextureAccess = ^SDL_TextureAccess;

  { SDL_TextureModulate  }
  SDL_TextureModulate = Integer;

  { PSDL_TextureModulate  }
  PSDL_TextureModulate = ^SDL_TextureModulate;

  { SDL_RendererFlip  }
  SDL_RendererFlip = Integer;

  { PSDL_RendererFlip  }
  PSDL_RendererFlip = ^SDL_RendererFlip;

  { WindowShapeMode  }
  WindowShapeMode = Integer;

  { PWindowShapeMode  }
  PWindowShapeMode = ^WindowShapeMode;

  { _anonymous_type_1  }
  _anonymous_type_1 = Integer;

  { P_anonymous_type_1  }
  P_anonymous_type_1 = ^_anonymous_type_1;

  { nk_heading  }
  nk_heading = Integer;

  { Pnk_heading  }
  Pnk_heading = ^nk_heading;

  { nk_button_behavior  }
  nk_button_behavior = Integer;

  { Pnk_button_behavior  }
  Pnk_button_behavior = ^nk_button_behavior;

  { nk_modify  }
  nk_modify = Integer;

  { Pnk_modify  }
  Pnk_modify = ^nk_modify;

  { nk_orientation  }
  nk_orientation = Integer;

  { Pnk_orientation  }
  Pnk_orientation = ^nk_orientation;

  { nk_collapse_states  }
  nk_collapse_states = Integer;

  { Pnk_collapse_states  }
  Pnk_collapse_states = ^nk_collapse_states;

  { nk_show_states  }
  nk_show_states = Integer;

  { Pnk_show_states  }
  Pnk_show_states = ^nk_show_states;

  { nk_chart_type  }
  nk_chart_type = Integer;

  { Pnk_chart_type  }
  Pnk_chart_type = ^nk_chart_type;

  { nk_chart_event  }
  nk_chart_event = Integer;

  { Pnk_chart_event  }
  Pnk_chart_event = ^nk_chart_event;

  { nk_color_format  }
  nk_color_format = Integer;

  { Pnk_color_format  }
  Pnk_color_format = ^nk_color_format;

  { nk_popup_type  }
  nk_popup_type = Integer;

  { Pnk_popup_type  }
  Pnk_popup_type = ^nk_popup_type;

  { nk_layout_format  }
  nk_layout_format = Integer;

  { Pnk_layout_format  }
  Pnk_layout_format = ^nk_layout_format;

  { nk_tree_type  }
  nk_tree_type = Integer;

  { Pnk_tree_type  }
  Pnk_tree_type = ^nk_tree_type;

  { nk_symbol_type  }
  nk_symbol_type = Integer;

  { Pnk_symbol_type  }
  Pnk_symbol_type = ^nk_symbol_type;

  { nk_keys  }
  nk_keys = Integer;

  { Pnk_keys  }
  Pnk_keys = ^nk_keys;

  { nk_buttons  }
  nk_buttons = Integer;

  { Pnk_buttons  }
  Pnk_buttons = ^nk_buttons;

  { nk_anti_aliasing  }
  nk_anti_aliasing = Integer;

  { Pnk_anti_aliasing  }
  Pnk_anti_aliasing = ^nk_anti_aliasing;

  { nk_convert_result  }
  nk_convert_result = Integer;

  { Pnk_convert_result  }
  Pnk_convert_result = ^nk_convert_result;

  { nk_panel_flags  }
  nk_panel_flags = Integer;

  { Pnk_panel_flags  }
  Pnk_panel_flags = ^nk_panel_flags;

  { nk_widget_layout_states  }
  nk_widget_layout_states = Integer;

  { Pnk_widget_layout_states  }
  Pnk_widget_layout_states = ^nk_widget_layout_states;

  { nk_widget_states  }
  nk_widget_states = Integer;

  { Pnk_widget_states  }
  Pnk_widget_states = ^nk_widget_states;

  { nk_text_align  }
  nk_text_align = Integer;

  { Pnk_text_align  }
  Pnk_text_align = ^nk_text_align;

  { nk_text_alignment  }
  nk_text_alignment = Integer;

  { Pnk_text_alignment  }
  Pnk_text_alignment = ^nk_text_alignment;

  { nk_edit_flags  }
  nk_edit_flags = Integer;

  { Pnk_edit_flags  }
  Pnk_edit_flags = ^nk_edit_flags;

  { nk_edit_types  }
  nk_edit_types = Integer;

  { Pnk_edit_types  }
  Pnk_edit_types = ^nk_edit_types;

  { nk_edit_events  }
  nk_edit_events = Integer;

  { Pnk_edit_events  }
  Pnk_edit_events = ^nk_edit_events;

  { nk_style_colors  }
  nk_style_colors = Integer;

  { Pnk_style_colors  }
  Pnk_style_colors = ^nk_style_colors;

  { nk_style_cursor  }
  nk_style_cursor = Integer;

  { Pnk_style_cursor  }
  Pnk_style_cursor = ^nk_style_cursor;

  { nk_font_coord_type  }
  nk_font_coord_type = Integer;

  { Pnk_font_coord_type  }
  Pnk_font_coord_type = ^nk_font_coord_type;

  { nk_font_atlas_format  }
  nk_font_atlas_format = Integer;

  { Pnk_font_atlas_format  }
  Pnk_font_atlas_format = ^nk_font_atlas_format;

  { nk_allocation_type  }
  nk_allocation_type = Integer;

  { Pnk_allocation_type  }
  Pnk_allocation_type = ^nk_allocation_type;

  { nk_buffer_allocation_type  }
  nk_buffer_allocation_type = Integer;

  { Pnk_buffer_allocation_type  }
  Pnk_buffer_allocation_type = ^nk_buffer_allocation_type;

  { nk_text_edit_type  }
  nk_text_edit_type = Integer;

  { Pnk_text_edit_type  }
  Pnk_text_edit_type = ^nk_text_edit_type;

  { nk_text_edit_mode  }
  nk_text_edit_mode = Integer;

  { Pnk_text_edit_mode  }
  Pnk_text_edit_mode = ^nk_text_edit_mode;

  { nk_command_type  }
  nk_command_type = Integer;

  { Pnk_command_type  }
  Pnk_command_type = ^nk_command_type;

  { nk_command_clipping  }
  nk_command_clipping = Integer;

  { Pnk_command_clipping  }
  Pnk_command_clipping = ^nk_command_clipping;

  { nk_style_item_type  }
  nk_style_item_type = Integer;

  { Pnk_style_item_type  }
  Pnk_style_item_type = ^nk_style_item_type;

  { nk_style_header_align  }
  nk_style_header_align = Integer;

  { Pnk_style_header_align  }
  Pnk_style_header_align = ^nk_style_header_align;

  { nk_panel_type  }
  nk_panel_type = Integer;

  { Pnk_panel_type  }
  Pnk_panel_type = ^nk_panel_type;

  { nk_panel_set  }
  nk_panel_set = Integer;

  { Pnk_panel_set  }
  Pnk_panel_set = ^nk_panel_set;

  { nk_panel_row_layout_type  }
  nk_panel_row_layout_type = Integer;

  { Pnk_panel_row_layout_type  }
  Pnk_panel_row_layout_type = ^nk_panel_row_layout_type;

  { nk_window_flags  }
  nk_window_flags = Integer;

  { Pnk_window_flags  }
  Pnk_window_flags = ^nk_window_flags;

  { _anonymous_type_2  }
  _anonymous_type_2 = Integer;

  { P_anonymous_type_2  }
  P_anonymous_type_2 = ^_anonymous_type_2;

  { _anonymous_type_3  }
  _anonymous_type_3 = Integer;

  { P_anonymous_type_3  }
  P_anonymous_type_3 = ^_anonymous_type_3;

  { _anonymous_type_4  }
  _anonymous_type_4 = Integer;

  { P_anonymous_type_4  }
  P_anonymous_type_4 = ^_anonymous_type_4;

  { _anonymous_type_5  }
  _anonymous_type_5 = Integer;

  { P_anonymous_type_5  }
  P_anonymous_type_5 = ^_anonymous_type_5;

  { _anonymous_type_6  }
  _anonymous_type_6 = Integer;

  { P_anonymous_type_6  }
  P_anonymous_type_6 = ^_anonymous_type_6;

  { _anonymous_type_7  }
  _anonymous_type_7 = Integer;

  { P_anonymous_type_7  }
  P_anonymous_type_7 = ^_anonymous_type_7;

  { _anonymous_type_8  }
  _anonymous_type_8 = Integer;

  { P_anonymous_type_8  }
  P_anonymous_type_8 = ^_anonymous_type_8;

  { _anonymous_type_9  }
  _anonymous_type_9 = Integer;

  { P_anonymous_type_9  }
  P_anonymous_type_9 = ^_anonymous_type_9;

  { _ma_channel_position  }
  _ma_channel_position = Integer;

  { P_ma_channel_position  }
  P_ma_channel_position = ^_ma_channel_position;

  { ma_result  }
  ma_result = Integer;

  { Pma_result  }
  Pma_result = ^ma_result;

  { ma_stream_format  }
  ma_stream_format = Integer;

  { Pma_stream_format  }
  Pma_stream_format = ^ma_stream_format;

  { ma_stream_layout  }
  ma_stream_layout = Integer;

  { Pma_stream_layout  }
  Pma_stream_layout = ^ma_stream_layout;

  { ma_dither_mode  }
  ma_dither_mode = Integer;

  { Pma_dither_mode  }
  Pma_dither_mode = ^ma_dither_mode;

  { ma_format  }
  ma_format = Integer;

  { Pma_format  }
  Pma_format = ^ma_format;

  { ma_standard_sample_rate  }
  ma_standard_sample_rate = Integer;

  { Pma_standard_sample_rate  }
  Pma_standard_sample_rate = ^ma_standard_sample_rate;

  { ma_channel_mix_mode  }
  ma_channel_mix_mode = Integer;

  { Pma_channel_mix_mode  }
  Pma_channel_mix_mode = ^ma_channel_mix_mode;

  { ma_standard_channel_map  }
  ma_standard_channel_map = Integer;

  { Pma_standard_channel_map  }
  Pma_standard_channel_map = ^ma_standard_channel_map;

  { ma_performance_profile  }
  ma_performance_profile = Integer;

  { Pma_performance_profile  }
  Pma_performance_profile = ^ma_performance_profile;

  { ma_thread_priority  }
  ma_thread_priority = Integer;

  { Pma_thread_priority  }
  Pma_thread_priority = ^ma_thread_priority;

  { ma_pan_mode  }
  ma_pan_mode = Integer;

  { Pma_pan_mode  }
  Pma_pan_mode = ^ma_pan_mode;

  { ma_attenuation_model  }
  ma_attenuation_model = Integer;

  { Pma_attenuation_model  }
  Pma_attenuation_model = ^ma_attenuation_model;

  { ma_positioning  }
  ma_positioning = Integer;

  { Pma_positioning  }
  Pma_positioning = ^ma_positioning;

  { ma_handedness  }
  ma_handedness = Integer;

  { Pma_handedness  }
  Pma_handedness = ^ma_handedness;

  { ma_resample_algorithm  }
  ma_resample_algorithm = Integer;

  { Pma_resample_algorithm  }
  Pma_resample_algorithm = ^ma_resample_algorithm;

  { ma_channel_conversion_path  }
  ma_channel_conversion_path = Integer;

  { Pma_channel_conversion_path  }
  Pma_channel_conversion_path = ^ma_channel_conversion_path;

  { ma_mono_expansion_mode  }
  ma_mono_expansion_mode = Integer;

  { Pma_mono_expansion_mode  }
  Pma_mono_expansion_mode = ^ma_mono_expansion_mode;

  { ma_data_converter_execution_path  }
  ma_data_converter_execution_path = Integer;

  { Pma_data_converter_execution_path  }
  Pma_data_converter_execution_path = ^ma_data_converter_execution_path;

  { ma_device_state  }
  ma_device_state = Integer;

  { Pma_device_state  }
  Pma_device_state = ^ma_device_state;

  { ma_backend  }
  ma_backend = Integer;

  { Pma_backend  }
  Pma_backend = ^ma_backend;

  { ma_device_type  }
  ma_device_type = Integer;

  { Pma_device_type  }
  Pma_device_type = ^ma_device_type;

  { ma_share_mode  }
  ma_share_mode = Integer;

  { Pma_share_mode  }
  Pma_share_mode = ^ma_share_mode;

  { ma_ios_session_category  }
  ma_ios_session_category = Integer;

  { Pma_ios_session_category  }
  Pma_ios_session_category = ^ma_ios_session_category;

  { ma_ios_session_category_option  }
  ma_ios_session_category_option = Integer;

  { Pma_ios_session_category_option  }
  Pma_ios_session_category_option = ^ma_ios_session_category_option;

  { ma_opensl_stream_type  }
  ma_opensl_stream_type = Integer;

  { Pma_opensl_stream_type  }
  Pma_opensl_stream_type = ^ma_opensl_stream_type;

  { ma_opensl_recording_preset  }
  ma_opensl_recording_preset = Integer;

  { Pma_opensl_recording_preset  }
  Pma_opensl_recording_preset = ^ma_opensl_recording_preset;

  { ma_aaudio_usage  }
  ma_aaudio_usage = Integer;

  { Pma_aaudio_usage  }
  Pma_aaudio_usage = ^ma_aaudio_usage;

  { ma_aaudio_content_type  }
  ma_aaudio_content_type = Integer;

  { Pma_aaudio_content_type  }
  Pma_aaudio_content_type = ^ma_aaudio_content_type;

  { ma_aaudio_input_preset  }
  ma_aaudio_input_preset = Integer;

  { Pma_aaudio_input_preset  }
  Pma_aaudio_input_preset = ^ma_aaudio_input_preset;

  { ma_open_mode_flags  }
  ma_open_mode_flags = Integer;

  { Pma_open_mode_flags  }
  Pma_open_mode_flags = ^ma_open_mode_flags;

  { ma_seek_origin  }
  ma_seek_origin = Integer;

  { Pma_seek_origin  }
  Pma_seek_origin = ^ma_seek_origin;

  { ma_encoding_format  }
  ma_encoding_format = Integer;

  { Pma_encoding_format  }
  Pma_encoding_format = ^ma_encoding_format;

  { ma_waveform_type  }
  ma_waveform_type = Integer;

  { Pma_waveform_type  }
  Pma_waveform_type = ^ma_waveform_type;

  { ma_noise_type  }
  ma_noise_type = Integer;

  { Pma_noise_type  }
  Pma_noise_type = ^ma_noise_type;

  { ma_resource_manager_data_source_flags  }
  ma_resource_manager_data_source_flags = Integer;

  { Pma_resource_manager_data_source_flags  }
  Pma_resource_manager_data_source_flags = ^ma_resource_manager_data_source_flags;

  { ma_resource_manager_job_type  }
  ma_resource_manager_job_type = Integer;

  { Pma_resource_manager_job_type  }
  Pma_resource_manager_job_type = ^ma_resource_manager_job_type;

  { ma_resource_manager_job_queue_flags  }
  ma_resource_manager_job_queue_flags = Integer;

  { Pma_resource_manager_job_queue_flags  }
  Pma_resource_manager_job_queue_flags = ^ma_resource_manager_job_queue_flags;

  { ma_resource_manager_flags  }
  ma_resource_manager_flags = Integer;

  { Pma_resource_manager_flags  }
  Pma_resource_manager_flags = ^ma_resource_manager_flags;

  { ma_resource_manager_data_supply_type  }
  ma_resource_manager_data_supply_type = Integer;

  { Pma_resource_manager_data_supply_type  }
  Pma_resource_manager_data_supply_type = ^ma_resource_manager_data_supply_type;

  { ma_node_flags  }
  ma_node_flags = Integer;

  { Pma_node_flags  }
  Pma_node_flags = ^ma_node_flags;

  { ma_node_state  }
  ma_node_state = Integer;

  { Pma_node_state  }
  Pma_node_state = ^ma_node_state;

  { ma_sound_flags  }
  ma_sound_flags = Integer;

  { Pma_sound_flags  }
  Pma_sound_flags = ^ma_sound_flags;

  { ma_engine_node_type  }
  ma_engine_node_type = Integer;

  { Pma_engine_node_type  }
  Pma_engine_node_type = ^ma_engine_node_type;

  { PHYSFS_EnumerateCallbackResult  }
  PHYSFS_EnumerateCallbackResult = Integer;

  { PPHYSFS_EnumerateCallbackResult  }
  PPHYSFS_EnumerateCallbackResult = ^PHYSFS_EnumerateCallbackResult;

  { PHYSFS_FileType  }
  PHYSFS_FileType = Integer;

  { PPHYSFS_FileType  }
  PPHYSFS_FileType = ^PHYSFS_FileType;

  { PHYSFS_ErrorCode  }
  PHYSFS_ErrorCode = Integer;

  { PPHYSFS_ErrorCode  }
  PPHYSFS_ErrorCode = ^PHYSFS_ErrorCode;

  { _anonymous_type_10  }
  _anonymous_type_10 = Integer;

  { P_anonymous_type_10  }
  P_anonymous_type_10 = ^_anonymous_type_10;

  { _ENetProtocolCommand  }
  _ENetProtocolCommand = Integer;

  { P_ENetProtocolCommand  }
  P_ENetProtocolCommand = ^_ENetProtocolCommand;

  { _ENetProtocolFlag  }
  _ENetProtocolFlag = Integer;

  { P_ENetProtocolFlag  }
  P_ENetProtocolFlag = ^_ENetProtocolFlag;

  { _ENetSocketType  }
  _ENetSocketType = Integer;

  { P_ENetSocketType  }
  P_ENetSocketType = ^_ENetSocketType;

  { _ENetSocketWait  }
  _ENetSocketWait = Integer;

  { P_ENetSocketWait  }
  P_ENetSocketWait = ^_ENetSocketWait;

  { _ENetSocketOption  }
  _ENetSocketOption = Integer;

  { P_ENetSocketOption  }
  P_ENetSocketOption = ^_ENetSocketOption;

  { _ENetSocketShutdown  }
  _ENetSocketShutdown = Integer;

  { P_ENetSocketShutdown  }
  P_ENetSocketShutdown = ^_ENetSocketShutdown;

  { _ENetPacketFlag  }
  _ENetPacketFlag = Integer;

  { P_ENetPacketFlag  }
  P_ENetPacketFlag = ^_ENetPacketFlag;

  { _ENetPeerState  }
  _ENetPeerState = Integer;

  { P_ENetPeerState  }
  P_ENetPeerState = ^_ENetPeerState;

  { _anonymous_type_11  }
  _anonymous_type_11 = Integer;

  { P_anonymous_type_11  }
  P_anonymous_type_11 = ^_anonymous_type_11;

  { _ENetPeerFlag  }
  _ENetPeerFlag = Integer;

  { P_ENetPeerFlag  }
  P_ENetPeerFlag = ^_ENetPeerFlag;

  { _ENetEventType  }
  _ENetEventType = Integer;

  { P_ENetEventType  }
  P_ENetEventType = ^_ENetEventType;
  // Forward declarations

  { PPUTF8Char  }
  PPUTF8Char = ^PUTF8Char;

  { PPByte  }
  PPByte = ^PByte;

  { PPInteger  }
  PPInteger = ^PInteger;

  { PPSingle  }
  PPSingle = ^PSingle;

  { PPDouble  }
  PPDouble = ^PDouble;

  { PUInt8  }
  PUInt8 = ^UInt8;

  { PWideChar  }
  PWideChar = ^WideChar;

  { PPointer  }
  PPointer = ^Pointer;

  { PNativeUInt  }
  PNativeUInt = ^NativeUInt;

  { P_SDL_iconv_t  }
  P_SDL_iconv_t = Pointer;

  { PP_SDL_iconv_t  }
  PP_SDL_iconv_t = ^P_SDL_iconv_t;

  { PSDL_semaphore  }
  PSDL_semaphore = Pointer;

  { PPSDL_semaphore  }
  PPSDL_semaphore = ^PSDL_semaphore;

  { P_SDL_AudioStream  }
  P_SDL_AudioStream = Pointer;

  { PP_SDL_AudioStream  }
  PP_SDL_AudioStream = ^P_SDL_AudioStream;

  { PSDL_BlitMap  }
  PSDL_BlitMap = Pointer;

  { PPSDL_BlitMap  }
  PPSDL_BlitMap = ^PSDL_BlitMap;

  { P_SDL_Joystick  }
  P_SDL_Joystick = Pointer;

  { PP_SDL_Joystick  }
  PP_SDL_Joystick = ^P_SDL_Joystick;

  { P_SDL_Sensor  }
  P_SDL_Sensor = Pointer;

  { PP_SDL_Sensor  }
  PP_SDL_Sensor = ^P_SDL_Sensor;

  { P_SDL_GameController  }
  P_SDL_GameController = Pointer;

  { PP_SDL_GameController  }
  PP_SDL_GameController = ^P_SDL_GameController;

  { P_SDL_Haptic  }
  P_SDL_Haptic = Pointer;

  { PP_SDL_Haptic  }
  PP_SDL_Haptic = ^P_SDL_Haptic;

  { PSDL_hid_device_  }
  PSDL_hid_device_ = Pointer;

  { PPSDL_hid_device_  }
  PPSDL_hid_device_ = ^PSDL_hid_device_;

  { Pnk_draw_command  }
  Pnk_draw_command = Pointer;

  { PPnk_draw_command  }
  PPnk_draw_command = ^Pnk_draw_command;

  { Pnk_draw_list  }
  Pnk_draw_list = Pointer;

  { PPnk_draw_list  }
  PPnk_draw_list = ^Pnk_draw_list;

  { Pnk_draw_vertex_layout_element  }
  Pnk_draw_vertex_layout_element = Pointer;

  { PPnk_draw_vertex_layout_element  }
  PPnk_draw_vertex_layout_element = ^Pnk_draw_vertex_layout_element;

  { Pnk_style_slide  }
  Pnk_style_slide = Pointer;

  { PPnk_style_slide  }
  PPnk_style_slide = ^Pnk_style_slide;

  { Pinternal_state  }
  Pinternal_state = Pointer;

  { PPinternal_state  }
  PPinternal_state = ^Pinternal_state;

  { PSDL_AssertData  }
  PSDL_AssertData = ^SDL_AssertData;

  { PSDL_atomic_t  }
  PSDL_atomic_t = ^SDL_atomic_t;

  { PSDL_RWops  }
  PSDL_RWops = ^SDL_RWops;

  { PSDL_AudioSpec  }
  PSDL_AudioSpec = ^SDL_AudioSpec;

  { PSDL_AudioCVT  }
  PSDL_AudioCVT = ^SDL_AudioCVT;

  { PSDL_Color  }
  PSDL_Color = ^SDL_Color;

  { PSDL_Palette  }
  PSDL_Palette = ^SDL_Palette;

  { PSDL_PixelFormat  }
  PSDL_PixelFormat = ^SDL_PixelFormat;

  { PSDL_Point  }
  PSDL_Point = ^SDL_Point;

  { PSDL_FPoint  }
  PSDL_FPoint = ^SDL_FPoint;

  { PSDL_Rect  }
  PSDL_Rect = ^SDL_Rect;

  { PSDL_FRect  }
  PSDL_FRect = ^SDL_FRect;

  { PSDL_Surface  }
  PSDL_Surface = ^SDL_Surface;

  { PPSDL_Surface  }
  PPSDL_Surface = ^PSDL_Surface;

  { PSDL_DisplayMode  }
  PSDL_DisplayMode = ^SDL_DisplayMode;

  { PSDL_Keysym  }
  PSDL_Keysym = ^SDL_Keysym;

  { PSDL_JoystickGUID  }
  PSDL_JoystickGUID = ^SDL_JoystickGUID;

  { PSDL_GameControllerButtonBind  }
  PSDL_GameControllerButtonBind = ^SDL_GameControllerButtonBind;

  { PSDL_Finger  }
  PSDL_Finger = ^SDL_Finger;

  { PSDL_CommonEvent  }
  PSDL_CommonEvent = ^SDL_CommonEvent;

  { PSDL_DisplayEvent  }
  PSDL_DisplayEvent = ^SDL_DisplayEvent;

  { PSDL_WindowEvent  }
  PSDL_WindowEvent = ^SDL_WindowEvent;

  { PSDL_KeyboardEvent  }
  PSDL_KeyboardEvent = ^SDL_KeyboardEvent;

  { PSDL_TextEditingEvent  }
  PSDL_TextEditingEvent = ^SDL_TextEditingEvent;

  { PSDL_TextInputEvent  }
  PSDL_TextInputEvent = ^SDL_TextInputEvent;

  { PSDL_MouseMotionEvent  }
  PSDL_MouseMotionEvent = ^SDL_MouseMotionEvent;

  { PSDL_MouseButtonEvent  }
  PSDL_MouseButtonEvent = ^SDL_MouseButtonEvent;

  { PSDL_MouseWheelEvent  }
  PSDL_MouseWheelEvent = ^SDL_MouseWheelEvent;

  { PSDL_JoyAxisEvent  }
  PSDL_JoyAxisEvent = ^SDL_JoyAxisEvent;

  { PSDL_JoyBallEvent  }
  PSDL_JoyBallEvent = ^SDL_JoyBallEvent;

  { PSDL_JoyHatEvent  }
  PSDL_JoyHatEvent = ^SDL_JoyHatEvent;

  { PSDL_JoyButtonEvent  }
  PSDL_JoyButtonEvent = ^SDL_JoyButtonEvent;

  { PSDL_JoyDeviceEvent  }
  PSDL_JoyDeviceEvent = ^SDL_JoyDeviceEvent;

  { PSDL_ControllerAxisEvent  }
  PSDL_ControllerAxisEvent = ^SDL_ControllerAxisEvent;

  { PSDL_ControllerButtonEvent  }
  PSDL_ControllerButtonEvent = ^SDL_ControllerButtonEvent;

  { PSDL_ControllerDeviceEvent  }
  PSDL_ControllerDeviceEvent = ^SDL_ControllerDeviceEvent;

  { PSDL_ControllerTouchpadEvent  }
  PSDL_ControllerTouchpadEvent = ^SDL_ControllerTouchpadEvent;

  { PSDL_ControllerSensorEvent  }
  PSDL_ControllerSensorEvent = ^SDL_ControllerSensorEvent;

  { PSDL_AudioDeviceEvent  }
  PSDL_AudioDeviceEvent = ^SDL_AudioDeviceEvent;

  { PSDL_TouchFingerEvent  }
  PSDL_TouchFingerEvent = ^SDL_TouchFingerEvent;

  { PSDL_MultiGestureEvent  }
  PSDL_MultiGestureEvent = ^SDL_MultiGestureEvent;

  { PSDL_DollarGestureEvent  }
  PSDL_DollarGestureEvent = ^SDL_DollarGestureEvent;

  { PSDL_DropEvent  }
  PSDL_DropEvent = ^SDL_DropEvent;

  { PSDL_SensorEvent  }
  PSDL_SensorEvent = ^SDL_SensorEvent;

  { PSDL_QuitEvent  }
  PSDL_QuitEvent = ^SDL_QuitEvent;

  { PSDL_OSEvent  }
  PSDL_OSEvent = ^SDL_OSEvent;

  { PSDL_UserEvent  }
  PSDL_UserEvent = ^SDL_UserEvent;

  { PSDL_SysWMEvent  }
  PSDL_SysWMEvent = ^SDL_SysWMEvent;

  { PSDL_HapticDirection  }
  PSDL_HapticDirection = ^SDL_HapticDirection;

  { PSDL_HapticConstant  }
  PSDL_HapticConstant = ^SDL_HapticConstant;

  { PSDL_HapticPeriodic  }
  PSDL_HapticPeriodic = ^SDL_HapticPeriodic;

  { PSDL_HapticCondition  }
  PSDL_HapticCondition = ^SDL_HapticCondition;

  { PSDL_HapticRamp  }
  PSDL_HapticRamp = ^SDL_HapticRamp;

  { PSDL_HapticLeftRight  }
  PSDL_HapticLeftRight = ^SDL_HapticLeftRight;

  { PSDL_HapticCustom  }
  PSDL_HapticCustom = ^SDL_HapticCustom;

  { PSDL_hid_device_info  }
  PSDL_hid_device_info = ^SDL_hid_device_info;

  { PSDL_MessageBoxButtonData  }
  PSDL_MessageBoxButtonData = ^SDL_MessageBoxButtonData;

  { PSDL_MessageBoxColor  }
  PSDL_MessageBoxColor = ^SDL_MessageBoxColor;

  { PSDL_MessageBoxColorScheme  }
  PSDL_MessageBoxColorScheme = ^SDL_MessageBoxColorScheme;

  { PSDL_MessageBoxData  }
  PSDL_MessageBoxData = ^SDL_MessageBoxData;

  { PSDL_RendererInfo  }
  PSDL_RendererInfo = ^SDL_RendererInfo;

  { PSDL_Vertex  }
  PSDL_Vertex = ^SDL_Vertex;

  { PSDL_WindowShapeMode  }
  PSDL_WindowShapeMode = ^SDL_WindowShapeMode;

  { PSDL_version  }
  PSDL_version = ^SDL_version;

  { PSDL_Locale  }
  PSDL_Locale = ^SDL_Locale;

  { Pnk_color  }
  Pnk_color = ^nk_color;

  { Pnk_colorf  }
  Pnk_colorf = ^nk_colorf;

  { Pnk_vec2  }
  Pnk_vec2 = ^nk_vec2;

  { Pnk_vec2i  }
  Pnk_vec2i = ^nk_vec2i;

  { Pnk_rect  }
  Pnk_rect = ^nk_rect;

  { Pnk_recti  }
  Pnk_recti = ^nk_recti;

  { Pnk_image  }
  Pnk_image = ^nk_image;

  { Pnk_nine_slice  }
  Pnk_nine_slice = ^nk_nine_slice;

  { Pnk_cursor  }
  Pnk_cursor = ^nk_cursor;

  { Pnk_scroll  }
  Pnk_scroll = ^nk_scroll;

  { Pnk_allocator  }
  Pnk_allocator = ^nk_allocator;

  { Pnk_draw_null_texture  }
  Pnk_draw_null_texture = ^nk_draw_null_texture;

  { Pnk_convert_config  }
  Pnk_convert_config = ^nk_convert_config;

  { Pnk_list_view  }
  Pnk_list_view = ^nk_list_view;

  { Pnk_user_font_glyph  }
  Pnk_user_font_glyph = ^nk_user_font_glyph;

  { Pnk_user_font  }
  Pnk_user_font = ^nk_user_font;

  { PPnk_user_font  }
  PPnk_user_font = ^Pnk_user_font;

  { Pnk_baked_font  }
  Pnk_baked_font = ^nk_baked_font;

  { Pnk_font_config  }
  Pnk_font_config = ^nk_font_config;

  { Pnk_font_glyph  }
  Pnk_font_glyph = ^nk_font_glyph;

  { Pnk_font  }
  Pnk_font = ^nk_font;

  { Pnk_font_atlas  }
  Pnk_font_atlas = ^nk_font_atlas;

  { Pnk_memory_status  }
  Pnk_memory_status = ^nk_memory_status;

  { Pnk_buffer_marker  }
  Pnk_buffer_marker = ^nk_buffer_marker;

  { Pnk_memory  }
  Pnk_memory = ^nk_memory;

  { Pnk_buffer  }
  Pnk_buffer = ^nk_buffer;

  { Pnk_str  }
  Pnk_str = ^nk_str;

  { Pnk_clipboard  }
  Pnk_clipboard = ^nk_clipboard;

  { Pnk_text_undo_record  }
  Pnk_text_undo_record = ^nk_text_undo_record;

  { Pnk_text_undo_state  }
  Pnk_text_undo_state = ^nk_text_undo_state;

  { Pnk_text_edit  }
  Pnk_text_edit = ^nk_text_edit;

  { Pnk_command  }
  Pnk_command = ^nk_command;

  { Pnk_command_scissor  }
  Pnk_command_scissor = ^nk_command_scissor;

  { Pnk_command_line  }
  Pnk_command_line = ^nk_command_line;

  { Pnk_command_curve  }
  Pnk_command_curve = ^nk_command_curve;

  { Pnk_command_rect  }
  Pnk_command_rect = ^nk_command_rect;

  { Pnk_command_rect_filled  }
  Pnk_command_rect_filled = ^nk_command_rect_filled;

  { Pnk_command_rect_multi_color  }
  Pnk_command_rect_multi_color = ^nk_command_rect_multi_color;

  { Pnk_command_triangle  }
  Pnk_command_triangle = ^nk_command_triangle;

  { Pnk_command_triangle_filled  }
  Pnk_command_triangle_filled = ^nk_command_triangle_filled;

  { Pnk_command_circle  }
  Pnk_command_circle = ^nk_command_circle;

  { Pnk_command_circle_filled  }
  Pnk_command_circle_filled = ^nk_command_circle_filled;

  { Pnk_command_arc  }
  Pnk_command_arc = ^nk_command_arc;

  { Pnk_command_arc_filled  }
  Pnk_command_arc_filled = ^nk_command_arc_filled;

  { Pnk_command_polygon  }
  Pnk_command_polygon = ^nk_command_polygon;

  { Pnk_command_polygon_filled  }
  Pnk_command_polygon_filled = ^nk_command_polygon_filled;

  { Pnk_command_polyline  }
  Pnk_command_polyline = ^nk_command_polyline;

  { Pnk_command_image  }
  Pnk_command_image = ^nk_command_image;

  { Pnk_command_custom  }
  Pnk_command_custom = ^nk_command_custom;

  { Pnk_command_text  }
  Pnk_command_text = ^nk_command_text;

  { Pnk_command_buffer  }
  Pnk_command_buffer = ^nk_command_buffer;

  { Pnk_mouse_button  }
  Pnk_mouse_button = ^nk_mouse_button;

  { Pnk_mouse  }
  Pnk_mouse = ^nk_mouse;

  { Pnk_key  }
  Pnk_key = ^nk_key;

  { Pnk_keyboard  }
  Pnk_keyboard = ^nk_keyboard;

  { Pnk_input  }
  Pnk_input = ^nk_input;

  { Pnk_style_item  }
  Pnk_style_item = ^nk_style_item;

  { Pnk_style_text  }
  Pnk_style_text = ^nk_style_text;

  { Pnk_style_button  }
  Pnk_style_button = ^nk_style_button;

  { Pnk_style_toggle  }
  Pnk_style_toggle = ^nk_style_toggle;

  { Pnk_style_selectable  }
  Pnk_style_selectable = ^nk_style_selectable;

  { Pnk_style_slider  }
  Pnk_style_slider = ^nk_style_slider;

  { Pnk_style_progress  }
  Pnk_style_progress = ^nk_style_progress;

  { Pnk_style_scrollbar  }
  Pnk_style_scrollbar = ^nk_style_scrollbar;

  { Pnk_style_edit  }
  Pnk_style_edit = ^nk_style_edit;

  { Pnk_style_property  }
  Pnk_style_property = ^nk_style_property;

  { Pnk_style_chart  }
  Pnk_style_chart = ^nk_style_chart;

  { Pnk_style_combo  }
  Pnk_style_combo = ^nk_style_combo;

  { Pnk_style_tab  }
  Pnk_style_tab = ^nk_style_tab;

  { Pnk_style_window_header  }
  Pnk_style_window_header = ^nk_style_window_header;

  { Pnk_style_window  }
  Pnk_style_window = ^nk_style_window;

  { Pnk_style  }
  Pnk_style = ^nk_style;

  { Pnk_chart_slot  }
  Pnk_chart_slot = ^nk_chart_slot;

  { Pnk_chart  }
  Pnk_chart = ^nk_chart;

  { Pnk_row_layout  }
  Pnk_row_layout = ^nk_row_layout;

  { Pnk_popup_buffer  }
  Pnk_popup_buffer = ^nk_popup_buffer;

  { Pnk_menu_state  }
  Pnk_menu_state = ^nk_menu_state;

  { Pnk_panel  }
  Pnk_panel = ^nk_panel;

  { Pnk_popup_state  }
  Pnk_popup_state = ^nk_popup_state;

  { Pnk_edit_state  }
  Pnk_edit_state = ^nk_edit_state;

  { Pnk_property_state  }
  Pnk_property_state = ^nk_property_state;

  { Pnk_window  }
  Pnk_window = ^nk_window;

  { Pnk_config_stack_style_item_element  }
  Pnk_config_stack_style_item_element = ^nk_config_stack_style_item_element;

  { Pnk_config_stack_float_element  }
  Pnk_config_stack_float_element = ^nk_config_stack_float_element;

  { Pnk_config_stack_vec2_element  }
  Pnk_config_stack_vec2_element = ^nk_config_stack_vec2_element;

  { Pnk_config_stack_flags_element  }
  Pnk_config_stack_flags_element = ^nk_config_stack_flags_element;

  { Pnk_config_stack_color_element  }
  Pnk_config_stack_color_element = ^nk_config_stack_color_element;

  { Pnk_config_stack_user_font_element  }
  Pnk_config_stack_user_font_element = ^nk_config_stack_user_font_element;

  { Pnk_config_stack_button_behavior_element  }
  Pnk_config_stack_button_behavior_element = ^nk_config_stack_button_behavior_element;

  { Pnk_config_stack_style_item  }
  Pnk_config_stack_style_item = ^nk_config_stack_style_item;

  { Pnk_config_stack_float  }
  Pnk_config_stack_float = ^nk_config_stack_float;

  { Pnk_config_stack_vec2  }
  Pnk_config_stack_vec2 = ^nk_config_stack_vec2;

  { Pnk_config_stack_flags  }
  Pnk_config_stack_flags = ^nk_config_stack_flags;

  { Pnk_config_stack_color  }
  Pnk_config_stack_color = ^nk_config_stack_color;

  { Pnk_config_stack_user_font  }
  Pnk_config_stack_user_font = ^nk_config_stack_user_font;

  { Pnk_config_stack_button_behavior  }
  Pnk_config_stack_button_behavior = ^nk_config_stack_button_behavior;

  { Pnk_configuration_stacks  }
  Pnk_configuration_stacks = ^nk_configuration_stacks;

  { Pnk_table  }
  Pnk_table = ^nk_table;

  { Pnk_page_element  }
  Pnk_page_element = ^nk_page_element;

  { Pnk_page  }
  Pnk_page = ^nk_page;

  { Pnk_pool  }
  Pnk_pool = ^nk_pool;

  { Pnk_context  }
  Pnk_context = ^nk_context;

  { Pplm_packet_t  }
  Pplm_packet_t = ^plm_packet_t;

  { Pplm_plane_t  }
  Pplm_plane_t = ^plm_plane_t;

  { Pplm_frame_t  }
  Pplm_frame_t = ^plm_frame_t;

  { Pplm_samples_t  }
  Pplm_samples_t = ^plm_samples_t;

  { Pstbi_io_callbacks  }
  Pstbi_io_callbacks = ^stbi_io_callbacks;

  { Pstbtt__buf  }
  Pstbtt__buf = ^stbtt__buf;

  { Pstbtt_bakedchar  }
  Pstbtt_bakedchar = ^stbtt_bakedchar;

  { Pstbtt_aligned_quad  }
  Pstbtt_aligned_quad = ^stbtt_aligned_quad;

  { Pstbtt_packedchar  }
  Pstbtt_packedchar = ^stbtt_packedchar;

  { Pstbtt_pack_range  }
  Pstbtt_pack_range = ^stbtt_pack_range;

  { Pstbtt_pack_context  }
  Pstbtt_pack_context = ^stbtt_pack_context;

  { Pstbtt_fontinfo  }
  Pstbtt_fontinfo = ^stbtt_fontinfo;

  { Pstbtt_kerningentry  }
  Pstbtt_kerningentry = ^stbtt_kerningentry;

  { Pstbtt_vertex  }
  Pstbtt_vertex = ^stbtt_vertex;

  { PPstbtt_vertex  }
  PPstbtt_vertex = ^Pstbtt_vertex;

  { Pstbtt__bitmap  }
  Pstbtt__bitmap = ^stbtt__bitmap;

  { Pma_allocation_callbacks  }
  Pma_allocation_callbacks = ^ma_allocation_callbacks;

  { Pma_lcg  }
  Pma_lcg = ^ma_lcg;

  { Pma_log_callback  }
  Pma_log_callback = ^ma_log_callback;

  { Pma_log  }
  Pma_log = ^ma_log;

  { Pma_biquad_config  }
  Pma_biquad_config = ^ma_biquad_config;

  { Pma_biquad  }
  Pma_biquad = ^ma_biquad;

  { Pma_lpf1_config  }
  Pma_lpf1_config = ^ma_lpf1_config;

  { Pma_lpf1  }
  Pma_lpf1 = ^ma_lpf1;

  { Pma_lpf2  }
  Pma_lpf2 = ^ma_lpf2;

  { Pma_lpf_config  }
  Pma_lpf_config = ^ma_lpf_config;

  { Pma_lpf  }
  Pma_lpf = ^ma_lpf;

  { Pma_hpf1_config  }
  Pma_hpf1_config = ^ma_hpf1_config;

  { Pma_hpf1  }
  Pma_hpf1 = ^ma_hpf1;

  { Pma_hpf2  }
  Pma_hpf2 = ^ma_hpf2;

  { Pma_hpf_config  }
  Pma_hpf_config = ^ma_hpf_config;

  { Pma_hpf  }
  Pma_hpf = ^ma_hpf;

  { Pma_bpf2_config  }
  Pma_bpf2_config = ^ma_bpf2_config;

  { Pma_bpf2  }
  Pma_bpf2 = ^ma_bpf2;

  { Pma_bpf_config  }
  Pma_bpf_config = ^ma_bpf_config;

  { Pma_bpf  }
  Pma_bpf = ^ma_bpf;

  { Pma_notch2_config  }
  Pma_notch2_config = ^ma_notch2_config;

  { Pma_notch2  }
  Pma_notch2 = ^ma_notch2;

  { Pma_peak2_config  }
  Pma_peak2_config = ^ma_peak2_config;

  { Pma_peak2  }
  Pma_peak2 = ^ma_peak2;

  { Pma_loshelf2_config  }
  Pma_loshelf2_config = ^ma_loshelf2_config;

  { Pma_loshelf2  }
  Pma_loshelf2 = ^ma_loshelf2;

  { Pma_hishelf2_config  }
  Pma_hishelf2_config = ^ma_hishelf2_config;

  { Pma_hishelf2  }
  Pma_hishelf2 = ^ma_hishelf2;

  { Pma_delay_config  }
  Pma_delay_config = ^ma_delay_config;

  { Pma_delay  }
  Pma_delay = ^ma_delay;

  { Pma_gainer_config  }
  Pma_gainer_config = ^ma_gainer_config;

  { Pma_gainer  }
  Pma_gainer = ^ma_gainer;

  { Pma_panner_config  }
  Pma_panner_config = ^ma_panner_config;

  { Pma_panner  }
  Pma_panner = ^ma_panner;

  { Pma_fader_config  }
  Pma_fader_config = ^ma_fader_config;

  { Pma_fader  }
  Pma_fader = ^ma_fader;

  { Pma_vec3f  }
  Pma_vec3f = ^ma_vec3f;

  { Pma_spatializer_listener_config  }
  Pma_spatializer_listener_config = ^ma_spatializer_listener_config;

  { Pma_spatializer_listener  }
  Pma_spatializer_listener = ^ma_spatializer_listener;

  { Pma_spatializer_config  }
  Pma_spatializer_config = ^ma_spatializer_config;

  { Pma_spatializer  }
  Pma_spatializer = ^ma_spatializer;

  { Pma_linear_resampler_config  }
  Pma_linear_resampler_config = ^ma_linear_resampler_config;

  { Pma_linear_resampler  }
  Pma_linear_resampler = ^ma_linear_resampler;

  { Pma_resampling_backend_vtable  }
  Pma_resampling_backend_vtable = ^ma_resampling_backend_vtable;

  { Pma_resampler_config  }
  Pma_resampler_config = ^ma_resampler_config;

  { Pma_resampler  }
  Pma_resampler = ^ma_resampler;

  { Pma_channel_converter_config  }
  Pma_channel_converter_config = ^ma_channel_converter_config;

  { Pma_channel_converter  }
  Pma_channel_converter = ^ma_channel_converter;

  { Pma_data_converter_config  }
  Pma_data_converter_config = ^ma_data_converter_config;

  { Pma_data_converter  }
  Pma_data_converter = ^ma_data_converter;

  { Pma_rb  }
  Pma_rb = ^ma_rb;

  { Pma_pcm_rb  }
  Pma_pcm_rb = ^ma_pcm_rb;

  { Pma_duplex_rb  }
  Pma_duplex_rb = ^ma_duplex_rb;

  { Pma_IMMNotificationClient  }
  Pma_IMMNotificationClient = ^ma_IMMNotificationClient;

  { Pma_device_info  }
  Pma_device_info = ^ma_device_info;

  { PPma_device_info  }
  PPma_device_info = ^Pma_device_info;

  { Pma_device_config  }
  Pma_device_config = ^ma_device_config;

  { Pma_device_descriptor  }
  Pma_device_descriptor = ^ma_device_descriptor;

  { Pma_backend_callbacks  }
  Pma_backend_callbacks = ^ma_backend_callbacks;

  { Pma_context_config  }
  Pma_context_config = ^ma_context_config;

  { Pma_context_command__wasapi  }
  Pma_context_command__wasapi = ^ma_context_command__wasapi;

  { Pma_context  }
  Pma_context = ^ma_context;

  { Pma_device  }
  Pma_device = ^ma_device;

  { Pma_fence  }
  Pma_fence = ^ma_fence;

  { Pma_async_notification_callbacks  }
  Pma_async_notification_callbacks = ^ma_async_notification_callbacks;

  { Pma_async_notification_poll  }
  Pma_async_notification_poll = ^ma_async_notification_poll;

  { Pma_async_notification_event  }
  Pma_async_notification_event = ^ma_async_notification_event;

  { Pma_slot_allocator_config  }
  Pma_slot_allocator_config = ^ma_slot_allocator_config;

  { Pma_slot_allocator_group  }
  Pma_slot_allocator_group = ^ma_slot_allocator_group;

  { Pma_slot_allocator  }
  Pma_slot_allocator = ^ma_slot_allocator;

  { Pma_data_source_vtable  }
  Pma_data_source_vtable = ^ma_data_source_vtable;

  { Pma_data_source_config  }
  Pma_data_source_config = ^ma_data_source_config;

  { Pma_data_source_base  }
  Pma_data_source_base = ^ma_data_source_base;

  { Pma_audio_buffer_ref  }
  Pma_audio_buffer_ref = ^ma_audio_buffer_ref;

  { Pma_audio_buffer_config  }
  Pma_audio_buffer_config = ^ma_audio_buffer_config;

  { Pma_audio_buffer  }
  Pma_audio_buffer = ^ma_audio_buffer;

  { PPma_audio_buffer  }
  PPma_audio_buffer = ^Pma_audio_buffer;

  { Pma_paged_audio_buffer_page  }
  Pma_paged_audio_buffer_page = ^ma_paged_audio_buffer_page;

  { PPma_paged_audio_buffer_page  }
  PPma_paged_audio_buffer_page = ^Pma_paged_audio_buffer_page;

  { Pma_paged_audio_buffer_data  }
  Pma_paged_audio_buffer_data = ^ma_paged_audio_buffer_data;

  { Pma_paged_audio_buffer_config  }
  Pma_paged_audio_buffer_config = ^ma_paged_audio_buffer_config;

  { Pma_paged_audio_buffer  }
  Pma_paged_audio_buffer = ^ma_paged_audio_buffer;

  { Pma_file_info  }
  Pma_file_info = ^ma_file_info;

  { Pma_vfs_callbacks  }
  Pma_vfs_callbacks = ^ma_vfs_callbacks;

  { Pma_default_vfs  }
  Pma_default_vfs = ^ma_default_vfs;

  { Pma_decoding_backend_config  }
  Pma_decoding_backend_config = ^ma_decoding_backend_config;

  { Pma_decoding_backend_vtable  }
  Pma_decoding_backend_vtable = ^ma_decoding_backend_vtable;

  { PPma_decoding_backend_vtable  }
  PPma_decoding_backend_vtable = ^Pma_decoding_backend_vtable;

  { Pma_decoder_config  }
  Pma_decoder_config = ^ma_decoder_config;

  { Pma_decoder  }
  Pma_decoder = ^ma_decoder;

  { Pma_encoder_config  }
  Pma_encoder_config = ^ma_encoder_config;

  { Pma_encoder  }
  Pma_encoder = ^ma_encoder;

  { Pma_waveform_config  }
  Pma_waveform_config = ^ma_waveform_config;

  { Pma_waveform  }
  Pma_waveform = ^ma_waveform;

  { Pma_noise_config  }
  Pma_noise_config = ^ma_noise_config;

  { Pma_noise  }
  Pma_noise = ^ma_noise;

  { Pma_resource_manager_pipeline_stage_notification  }
  Pma_resource_manager_pipeline_stage_notification = ^ma_resource_manager_pipeline_stage_notification;

  { Pma_resource_manager_pipeline_notifications  }
  Pma_resource_manager_pipeline_notifications = ^ma_resource_manager_pipeline_notifications;

  { Pma_resource_manager_job  }
  Pma_resource_manager_job = ^ma_resource_manager_job;

  { Pma_resource_manager_job_queue_config  }
  Pma_resource_manager_job_queue_config = ^ma_resource_manager_job_queue_config;

  { Pma_resource_manager_job_queue  }
  Pma_resource_manager_job_queue = ^ma_resource_manager_job_queue;

  { Pma_resource_manager_data_source_config  }
  Pma_resource_manager_data_source_config = ^ma_resource_manager_data_source_config;

  { Pma_resource_manager_data_supply  }
  Pma_resource_manager_data_supply = ^ma_resource_manager_data_supply;

  { Pma_resource_manager_data_buffer_node  }
  Pma_resource_manager_data_buffer_node = ^ma_resource_manager_data_buffer_node;

  { Pma_resource_manager_data_buffer  }
  Pma_resource_manager_data_buffer = ^ma_resource_manager_data_buffer;

  { Pma_resource_manager_data_stream  }
  Pma_resource_manager_data_stream = ^ma_resource_manager_data_stream;

  { Pma_resource_manager_data_source  }
  Pma_resource_manager_data_source = ^ma_resource_manager_data_source;

  { Pma_resource_manager_config  }
  Pma_resource_manager_config = ^ma_resource_manager_config;

  { Pma_resource_manager  }
  Pma_resource_manager = ^ma_resource_manager;

  { Pma_node_vtable  }
  Pma_node_vtable = ^ma_node_vtable;

  { Pma_node_config  }
  Pma_node_config = ^ma_node_config;

  { Pma_node_output_bus  }
  Pma_node_output_bus = ^ma_node_output_bus;

  { Pma_node_input_bus  }
  Pma_node_input_bus = ^ma_node_input_bus;

  { Pma_node_base  }
  Pma_node_base = ^ma_node_base;

  { Pma_node_graph_config  }
  Pma_node_graph_config = ^ma_node_graph_config;

  { Pma_node_graph  }
  Pma_node_graph = ^ma_node_graph;

  { Pma_data_source_node_config  }
  Pma_data_source_node_config = ^ma_data_source_node_config;

  { Pma_data_source_node  }
  Pma_data_source_node = ^ma_data_source_node;

  { Pma_splitter_node_config  }
  Pma_splitter_node_config = ^ma_splitter_node_config;

  { Pma_splitter_node  }
  Pma_splitter_node = ^ma_splitter_node;

  { Pma_biquad_node_config  }
  Pma_biquad_node_config = ^ma_biquad_node_config;

  { Pma_biquad_node  }
  Pma_biquad_node = ^ma_biquad_node;

  { Pma_lpf_node_config  }
  Pma_lpf_node_config = ^ma_lpf_node_config;

  { Pma_lpf_node  }
  Pma_lpf_node = ^ma_lpf_node;

  { Pma_hpf_node_config  }
  Pma_hpf_node_config = ^ma_hpf_node_config;

  { Pma_hpf_node  }
  Pma_hpf_node = ^ma_hpf_node;

  { Pma_bpf_node_config  }
  Pma_bpf_node_config = ^ma_bpf_node_config;

  { Pma_bpf_node  }
  Pma_bpf_node = ^ma_bpf_node;

  { Pma_notch_node_config  }
  Pma_notch_node_config = ^ma_notch_node_config;

  { Pma_notch_node  }
  Pma_notch_node = ^ma_notch_node;

  { Pma_peak_node_config  }
  Pma_peak_node_config = ^ma_peak_node_config;

  { Pma_peak_node  }
  Pma_peak_node = ^ma_peak_node;

  { Pma_loshelf_node_config  }
  Pma_loshelf_node_config = ^ma_loshelf_node_config;

  { Pma_loshelf_node  }
  Pma_loshelf_node = ^ma_loshelf_node;

  { Pma_hishelf_node_config  }
  Pma_hishelf_node_config = ^ma_hishelf_node_config;

  { Pma_hishelf_node  }
  Pma_hishelf_node = ^ma_hishelf_node;

  { Pma_delay_node_config  }
  Pma_delay_node_config = ^ma_delay_node_config;

  { Pma_delay_node  }
  Pma_delay_node = ^ma_delay_node;

  { Pma_engine_node_config  }
  Pma_engine_node_config = ^ma_engine_node_config;

  { Pma_engine_node  }
  Pma_engine_node = ^ma_engine_node;

  { Pma_sound_config  }
  Pma_sound_config = ^ma_sound_config;

  { Pma_sound  }
  Pma_sound = ^ma_sound;

  { Pma_sound_inlined  }
  Pma_sound_inlined = ^ma_sound_inlined;

  { Pma_engine_config  }
  Pma_engine_config = ^ma_engine_config;

  { Pma_engine  }
  Pma_engine = ^ma_engine;

  { PPHYSFS_File  }
  PPHYSFS_File = ^PHYSFS_File;

  { PPHYSFS_ArchiveInfo  }
  PPHYSFS_ArchiveInfo = ^PHYSFS_ArchiveInfo;

  { PPPHYSFS_ArchiveInfo  }
  PPPHYSFS_ArchiveInfo = ^PPHYSFS_ArchiveInfo;

  { PPHYSFS_Version  }
  PPHYSFS_Version = ^PHYSFS_Version;

  { PPHYSFS_Allocator  }
  PPHYSFS_Allocator = ^PHYSFS_Allocator;

  { PPHYSFS_Stat  }
  PPHYSFS_Stat = ^PHYSFS_Stat;

  { PPHYSFS_Io  }
  PPHYSFS_Io = ^PHYSFS_Io;

  { PPHYSFS_Archiver  }
  PPHYSFS_Archiver = ^PHYSFS_Archiver;

  { Pz_stream_s  }
  Pz_stream_s = ^z_stream_s;

  { Pgz_header_s  }
  Pgz_header_s = ^gz_header_s;

  { PgzFile_s  }
  PgzFile_s = ^gzFile_s;

  { Pzlib_filefunc_def_s  }
  Pzlib_filefunc_def_s = ^zlib_filefunc_def_s;

  { Pzlib_filefunc64_def_s  }
  Pzlib_filefunc64_def_s = ^zlib_filefunc64_def_s;

  { Pzlib_filefunc64_32_def_s  }
  Pzlib_filefunc64_32_def_s = ^zlib_filefunc64_32_def_s;

  { Ptm_zip_s  }
  Ptm_zip_s = ^tm_zip_s;

  { Pzip_fileinfo  }
  Pzip_fileinfo = ^zip_fileinfo;

  { Ptm_unz_s  }
  Ptm_unz_s = ^tm_unz_s;

  { Punz_global_info64_s  }
  Punz_global_info64_s = ^unz_global_info64_s;

  { Punz_global_info_s  }
  Punz_global_info_s = ^unz_global_info_s;

  { Punz_file_info64_s  }
  Punz_file_info64_s = ^unz_file_info64_s;

  { Punz_file_info_s  }
  Punz_file_info_s = ^unz_file_info_s;

  { Punz_file_pos_s  }
  Punz_file_pos_s = ^unz_file_pos_s;

  { Punz64_file_pos_s  }
  Punz64_file_pos_s = ^unz64_file_pos_s;

  { Psdlsurface_context  }
  Psdlsurface_context = ^sdlsurface_context;

  { PFPSmanager  }
  PFPSmanager = ^FPSmanager;

  { PENetBuffer  }
  PENetBuffer = ^ENetBuffer;

  { P_ENetProtocolHeader  }
  P_ENetProtocolHeader = ^_ENetProtocolHeader;

  { P_ENetProtocolCommandHeader  }
  P_ENetProtocolCommandHeader = ^_ENetProtocolCommandHeader;

  { P_ENetProtocolAcknowledge  }
  P_ENetProtocolAcknowledge = ^_ENetProtocolAcknowledge;

  { P_ENetProtocolConnect  }
  P_ENetProtocolConnect = ^_ENetProtocolConnect;

  { P_ENetProtocolVerifyConnect  }
  P_ENetProtocolVerifyConnect = ^_ENetProtocolVerifyConnect;

  { P_ENetProtocolBandwidthLimit  }
  P_ENetProtocolBandwidthLimit = ^_ENetProtocolBandwidthLimit;

  { P_ENetProtocolThrottleConfigure  }
  P_ENetProtocolThrottleConfigure = ^_ENetProtocolThrottleConfigure;

  { P_ENetProtocolDisconnect  }
  P_ENetProtocolDisconnect = ^_ENetProtocolDisconnect;

  { P_ENetProtocolPing  }
  P_ENetProtocolPing = ^_ENetProtocolPing;

  { P_ENetProtocolSendReliable  }
  P_ENetProtocolSendReliable = ^_ENetProtocolSendReliable;

  { P_ENetProtocolSendUnreliable  }
  P_ENetProtocolSendUnreliable = ^_ENetProtocolSendUnreliable;

  { P_ENetProtocolSendUnsequenced  }
  P_ENetProtocolSendUnsequenced = ^_ENetProtocolSendUnsequenced;

  { P_ENetProtocolSendFragment  }
  P_ENetProtocolSendFragment = ^_ENetProtocolSendFragment;

  { P_ENetListNode  }
  P_ENetListNode = ^_ENetListNode;

  { P_ENetList  }
  P_ENetList = ^_ENetList;

  { P_ENetCallbacks  }
  P_ENetCallbacks = ^_ENetCallbacks;

  { P_ENetAddress  }
  P_ENetAddress = ^_ENetAddress;

  { P_ENetPacket  }
  P_ENetPacket = ^_ENetPacket;

  { P_ENetAcknowledgement  }
  P_ENetAcknowledgement = ^_ENetAcknowledgement;

  { P_ENetOutgoingCommand  }
  P_ENetOutgoingCommand = ^_ENetOutgoingCommand;

  { P_ENetIncomingCommand  }
  P_ENetIncomingCommand = ^_ENetIncomingCommand;

  { P_ENetChannel  }
  P_ENetChannel = ^_ENetChannel;

  { P_ENetPeer  }
  P_ENetPeer = ^_ENetPeer;

  { P_ENetCompressor  }
  P_ENetCompressor = ^_ENetCompressor;

  { P_ENetHost  }
  P_ENetHost = ^_ENetHost;

  { P_ENetEvent  }
  P_ENetEvent = ^_ENetEvent;

  { int8_t  }
  int8_t = UTF8Char;

  { uint8_t  }
  uint8_t = Byte;

  { Puint8_t  }
  Puint8_t = ^uint8_t;

  { int16_t  }
  int16_t = Smallint;

  { uint16_t  }
  uint16_t = Word;

  { int32_t  }
  int32_t = Integer;

  { uint32_t  }
  uint32_t = Cardinal;

  { int64_t  }
  int64_t = Int64;

  { uint64_t  }
  uint64_t = UInt64;

  { uintptr_t  }
  uintptr_t = UInt64;

  { Sint8  }
  Sint8 = Int8;

  { PPUint8  }
  PPUint8 = ^PUint8;

  { Sint16  }
  Sint16 = Int16;

  { PSint16  }
  PSint16 = ^Sint16;

  { PUint16  }
  PUint16 = ^Uint16;

  { Sint32  }
  Sint32 = Int32;

  { PUint32  }
  PUint32 = ^Uint32;

  { Sint64  }
  Sint64 = Int64;

  { SDL_compile_time_assert_uint8  }
  SDL_compile_time_assert_uint8 = array [0..0] of Integer;

  { SDL_compile_time_assert_sint8  }
  SDL_compile_time_assert_sint8 = array [0..0] of Integer;

  { SDL_compile_time_assert_uint16  }
  SDL_compile_time_assert_uint16 = array [0..0] of Integer;

  { SDL_compile_time_assert_sint16  }
  SDL_compile_time_assert_sint16 = array [0..0] of Integer;

  { SDL_compile_time_assert_uint32  }
  SDL_compile_time_assert_uint32 = array [0..0] of Integer;

  { SDL_compile_time_assert_sint32  }
  SDL_compile_time_assert_sint32 = array [0..0] of Integer;

  { SDL_compile_time_assert_uint64  }
  SDL_compile_time_assert_uint64 = array [0..0] of Integer;

  { SDL_compile_time_assert_sint64  }
  SDL_compile_time_assert_sint64 = array [0..0] of Integer;

  { SDL_compile_time_assert_enum  }
  SDL_compile_time_assert_enum = array [0..0] of Integer;

  { SDL_malloc_func  }
  SDL_malloc_func = function(size: NativeUInt): Pointer; cdecl;

  { PSDL_malloc_func  }
  PSDL_malloc_func = ^SDL_malloc_func;

  { SDL_calloc_func  }
  SDL_calloc_func = function(nmemb: NativeUInt; size: NativeUInt): Pointer; cdecl;

  { PSDL_calloc_func  }
  PSDL_calloc_func = ^SDL_calloc_func;

  { SDL_realloc_func  }
  SDL_realloc_func = function(mem: Pointer; size: NativeUInt): Pointer; cdecl;

  { PSDL_realloc_func  }
  PSDL_realloc_func = ^SDL_realloc_func;

  { SDL_free_func  }
  SDL_free_func = procedure(mem: Pointer); cdecl;

  { PSDL_free_func  }
  PSDL_free_func = ^SDL_free_func;

  { SDL_iconv_t  }
  SDL_iconv_t = Pointer;

  { PSDL_iconv_t  }
  PSDL_iconv_t = ^SDL_iconv_t;

  { SDL_main_func  }
  SDL_main_func = function(argc: Integer; argv: PPUTF8Char): Integer; cdecl;

  { SDL_AssertData  }
  SDL_AssertData = record
    always_ignore: Integer;
    trigger_count: Cardinal;
    condition: PUTF8Char;
    filename: PUTF8Char;
    linenum: Integer;
    _function: PUTF8Char;
    next: PSDL_AssertData;
  end;

  { SDL_AssertionHandler  }
  SDL_AssertionHandler = function(const data: PSDL_AssertData; userdata: Pointer): SDL_AssertState; cdecl;

  { SDL_SpinLock  }
  SDL_SpinLock = Integer;

  { PSDL_SpinLock  }
  PSDL_SpinLock = ^SDL_SpinLock;

  { SDL_atomic_t  }
  SDL_atomic_t = record
    value: Integer;
  end;

  { PSDL_mutex  }
  PSDL_mutex = Pointer;

  { PPSDL_mutex  }
  PPSDL_mutex = ^PSDL_mutex;

  { PSDL_sem  }
  PSDL_sem = Pointer;

  { PPSDL_sem  }
  PPSDL_sem = ^PSDL_sem;

  { PSDL_cond  }
  PSDL_cond = Pointer;

  { PPSDL_cond  }
  PPSDL_cond = ^PSDL_cond;

  { PSDL_Thread  }
  PSDL_Thread = Pointer;

  { PPSDL_Thread  }
  PPSDL_Thread = ^PSDL_Thread;

  { SDL_threadID_  }
  SDL_threadID_ = Cardinal;

  { SDL_TLSID  }
  SDL_TLSID = Cardinal;

  { SDL_ThreadFunction  }
  SDL_ThreadFunction = function(data: Pointer): Integer; cdecl;

  { pfnSDL_CurrentBeginThread_func  }
  pfnSDL_CurrentBeginThread_func = function: UInt64; cdecl;

  { pfnSDL_CurrentBeginThread  }
  pfnSDL_CurrentBeginThread = function(p1: Pointer; p2: Cardinal; func: pfnSDL_CurrentBeginThread_func; p4: Pointer; p5: Cardinal; p6: PCardinal): UIntPtr; cdecl;

  { pfnSDL_CurrentEndThread  }
  pfnSDL_CurrentEndThread = procedure(code: Cardinal); cdecl;

  { _anonymous_type_12  }
  _anonymous_type_12 = record
    data: Pointer;
    size: NativeUInt;
    left: NativeUInt;
  end;

  { P_anonymous_type_12  }
  P_anonymous_type_12 = ^_anonymous_type_12;

  { _anonymous_type_13  }
  _anonymous_type_13 = record
    append: SDL_bool;
    h: Pointer;
    buffer: _anonymous_type_12;
  end;

  { P_anonymous_type_13  }
  P_anonymous_type_13 = ^_anonymous_type_13;

  { _anonymous_type_14  }
  _anonymous_type_14 = record
    autoclose: SDL_bool;
    fp: PPointer;
  end;

  { P_anonymous_type_14  }
  P_anonymous_type_14 = ^_anonymous_type_14;

  { _anonymous_type_15  }
  _anonymous_type_15 = record
    base: PUint8;
    here: PUint8;
    stop: PUint8;
  end;

  { P_anonymous_type_15  }
  P_anonymous_type_15 = ^_anonymous_type_15;

  { _anonymous_type_16  }
  _anonymous_type_16 = record
    data1: Pointer;
    data2: Pointer;
  end;

  { P_anonymous_type_16  }
  P_anonymous_type_16 = ^_anonymous_type_16;

  { _anonymous_type_17  }
  _anonymous_type_17 = record
    case Integer of
      0: (windowsio: _anonymous_type_13);
      1: (stdio: _anonymous_type_14);
      2: (mem: _anonymous_type_15);
      3: (unknown: _anonymous_type_16);
  end;

  { P_anonymous_type_17  }
  P_anonymous_type_17 = ^_anonymous_type_17;

  { SDL_RWops  }
  SDL_RWops = record
    size: function(context: PSDL_RWops): Sint64; cdecl;
    seek: function(context: PSDL_RWops; offset: Sint64; whence: Integer): Sint64; cdecl;
    read: function(context: PSDL_RWops; ptr: Pointer; size: NativeUInt; maxnum: NativeUInt): NativeUInt; cdecl;
    write: function(context: PSDL_RWops; const ptr: Pointer; size: NativeUInt; num: NativeUInt): NativeUInt; cdecl;
    close: function(context: PSDL_RWops): Integer; cdecl;
    _type: Uint32;
    hidden: _anonymous_type_17;
  end;

  { SDL_AudioFormat  }
  SDL_AudioFormat = Uint16;

  { SDL_AudioCallback  }
  SDL_AudioCallback = procedure(userdata: Pointer; stream: PUint8; len: Integer); cdecl;

  { SDL_AudioSpec  }
  SDL_AudioSpec = record
    freq: Integer;
    format: SDL_AudioFormat;
    channels: Uint8;
    silence: Uint8;
    samples: Uint16;
    padding: Uint16;
    size: Uint32;
    callback: SDL_AudioCallback;
    userdata: Pointer;
  end;

  { SDL_AudioFilter  }
  SDL_AudioFilter = procedure(cvt: PSDL_AudioCVT; format: SDL_AudioFormat); cdecl;

  { SDL_AudioCVT  }
  SDL_AudioCVT = record
    needed: Integer;
    src_format: SDL_AudioFormat;
    dst_format: SDL_AudioFormat;
    rate_incr: Double;
    buf: PUint8;
    len: Integer;
    len_cvt: Integer;
    len_mult: Integer;
    len_ratio: Double;
    filters: array [0..9] of SDL_AudioFilter;
    filter_index: Integer;
  end;

  { SDL_AudioDeviceID  }
  SDL_AudioDeviceID = Uint32;

  { PSDL_AudioStream  }
  PSDL_AudioStream = Pointer;

  { PPSDL_AudioStream  }
  PPSDL_AudioStream = ^PSDL_AudioStream;

  { SDL_Color  }
  SDL_Color = record
    r: Uint8;
    g: Uint8;
    b: Uint8;
    a: Uint8;
  end;

  { SDL_Palette  }
  SDL_Palette = record
    ncolors: Integer;
    colors: PSDL_Color;
    version: Uint32;
    refcount: Integer;
  end;

  { SDL_PixelFormat  }
  SDL_PixelFormat = record
    format: Uint32;
    palette: PSDL_Palette;
    BitsPerPixel: Uint8;
    BytesPerPixel: Uint8;
    padding: array [0..1] of Uint8;
    Rmask: Uint32;
    Gmask: Uint32;
    Bmask: Uint32;
    Amask: Uint32;
    Rloss: Uint8;
    Gloss: Uint8;
    Bloss: Uint8;
    Aloss: Uint8;
    Rshift: Uint8;
    Gshift: Uint8;
    Bshift: Uint8;
    Ashift: Uint8;
    refcount: Integer;
    next: PSDL_PixelFormat;
  end;

  { SDL_Point  }
  SDL_Point = record
    x: Integer;
    y: Integer;
  end;

  { SDL_FPoint  }
  SDL_FPoint = record
    x: Single;
    y: Single;
  end;

  { SDL_Rect  }
  SDL_Rect = record
    x: Integer;
    y: Integer;
    w: Integer;
    h: Integer;
  end;

  { SDL_FRect  }
  SDL_FRect = record
    x: Single;
    y: Single;
    w: Single;
    h: Single;
  end;

  { SDL_Surface  }
  SDL_Surface = record
    flags: Uint32;
    format: PSDL_PixelFormat;
    w: Integer;
    h: Integer;
    pitch: Integer;
    pixels: Pointer;
    userdata: Pointer;
    locked: Integer;
    list_blitmap: Pointer;
    clip_rect: SDL_Rect;
    map: PSDL_BlitMap;
    refcount: Integer;
  end;

  { SDL_blit  }
  SDL_blit = function(src: PSDL_Surface; srcrect: PSDL_Rect; dst: PSDL_Surface; dstrect: PSDL_Rect): Integer; cdecl;

  { SDL_DisplayMode  }
  SDL_DisplayMode = record
    format: Uint32;
    w: Integer;
    h: Integer;
    refresh_rate: Integer;
    driverdata: Pointer;
  end;

  { PSDL_Window  }
  PSDL_Window = Pointer;

  { PPSDL_Window  }
  PPSDL_Window = ^PSDL_Window;

  { SDL_GLContext  }
  SDL_GLContext = Pointer;

  { SDL_HitTest  }
  SDL_HitTest = function(win: PSDL_Window; const area: PSDL_Point; data: Pointer): SDL_HitTestResult; cdecl;

  { SDL_Keysym  }
  SDL_Keysym = record
    scancode: SDL_Scancode;
    sym: SDL_Keycode;
    _mod: Uint16;
    unused: Uint32;
  end;

  { PSDL_Cursor  }
  PSDL_Cursor = Pointer;

  { PPSDL_Cursor  }
  PPSDL_Cursor = ^PSDL_Cursor;

  { PSDL_Joystick  }
  PSDL_Joystick = Pointer;

  { PPSDL_Joystick  }
  PPSDL_Joystick = ^PSDL_Joystick;

  { SDL_JoystickGUID  }
  SDL_JoystickGUID = record
    data: array [0..15] of Uint8;
  end;

  { SDL_JoystickID  }
  SDL_JoystickID = Sint32;

  { PSDL_Sensor  }
  PSDL_Sensor = Pointer;

  { PPSDL_Sensor  }
  PPSDL_Sensor = ^PSDL_Sensor;

  { SDL_SensorID  }
  SDL_SensorID = Sint32;

  { PSDL_GameController  }
  PSDL_GameController = Pointer;

  { PPSDL_GameController  }
  PPSDL_GameController = ^PSDL_GameController;

  { _anonymous_type_18  }
  _anonymous_type_18 = record
    hat: Integer;
    hat_mask: Integer;
  end;

  { P_anonymous_type_18  }
  P_anonymous_type_18 = ^_anonymous_type_18;

  { _anonymous_type_19  }
  _anonymous_type_19 = record
    case Integer of
      0: (button: Integer);
      1: (axis: Integer);
      2: (hat: _anonymous_type_18);
  end;

  { P_anonymous_type_19  }
  P_anonymous_type_19 = ^_anonymous_type_19;

  { SDL_GameControllerButtonBind  }
  SDL_GameControllerButtonBind = record
    bindType: SDL_GameControllerBindType;
    value: _anonymous_type_19;
  end;

  { SDL_TouchID  }
  SDL_TouchID = Sint64;

  { SDL_FingerID  }
  SDL_FingerID = Sint64;

  { SDL_Finger  }
  SDL_Finger = record
    id: SDL_FingerID;
    x: Single;
    y: Single;
    pressure: Single;
  end;

  { SDL_GestureID  }
  SDL_GestureID = Sint64;

  { SDL_CommonEvent  }
  SDL_CommonEvent = record
    _type: Uint32;
    timestamp: Uint32;
  end;

  { SDL_DisplayEvent  }
  SDL_DisplayEvent = record
    _type: Uint32;
    timestamp: Uint32;
    display: Uint32;
    event: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    data1: Sint32;
  end;

  { SDL_WindowEvent  }
  SDL_WindowEvent = record
    _type: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    event: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    data1: Sint32;
    data2: Sint32;
  end;

  { SDL_KeyboardEvent  }
  SDL_KeyboardEvent = record
    _type: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    state: Uint8;
    _repeat: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    keysym: SDL_Keysym;
  end;

  { SDL_TextEditingEvent  }
  SDL_TextEditingEvent = record
    _type: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    text: array [0..31] of UTF8Char;
    start: Sint32;
    length: Sint32;
  end;

  { SDL_TextInputEvent  }
  SDL_TextInputEvent = record
    _type: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    text: array [0..31] of UTF8Char;
  end;

  { SDL_MouseMotionEvent  }
  SDL_MouseMotionEvent = record
    _type: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    which: Uint32;
    state: Uint32;
    x: Sint32;
    y: Sint32;
    xrel: Sint32;
    yrel: Sint32;
  end;

  { SDL_MouseButtonEvent  }
  SDL_MouseButtonEvent = record
    _type: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    which: Uint32;
    button: Uint8;
    state: Uint8;
    clicks: Uint8;
    padding1: Uint8;
    x: Sint32;
    y: Sint32;
  end;

  { SDL_MouseWheelEvent  }
  SDL_MouseWheelEvent = record
    _type: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    which: Uint32;
    x: Sint32;
    y: Sint32;
    direction: Uint32;
    preciseX: Single;
    preciseY: Single;
  end;

  { SDL_JoyAxisEvent  }
  SDL_JoyAxisEvent = record
    _type: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    axis: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    value: Sint16;
    padding4: Uint16;
  end;

  { SDL_JoyBallEvent  }
  SDL_JoyBallEvent = record
    _type: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    ball: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    xrel: Sint16;
    yrel: Sint16;
  end;

  { SDL_JoyHatEvent  }
  SDL_JoyHatEvent = record
    _type: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    hat: Uint8;
    value: Uint8;
    padding1: Uint8;
    padding2: Uint8;
  end;

  { SDL_JoyButtonEvent  }
  SDL_JoyButtonEvent = record
    _type: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    button: Uint8;
    state: Uint8;
    padding1: Uint8;
    padding2: Uint8;
  end;

  { SDL_JoyDeviceEvent  }
  SDL_JoyDeviceEvent = record
    _type: Uint32;
    timestamp: Uint32;
    which: Sint32;
  end;

  { SDL_ControllerAxisEvent  }
  SDL_ControllerAxisEvent = record
    _type: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    axis: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
    value: Sint16;
    padding4: Uint16;
  end;

  { SDL_ControllerButtonEvent  }
  SDL_ControllerButtonEvent = record
    _type: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    button: Uint8;
    state: Uint8;
    padding1: Uint8;
    padding2: Uint8;
  end;

  { SDL_ControllerDeviceEvent  }
  SDL_ControllerDeviceEvent = record
    _type: Uint32;
    timestamp: Uint32;
    which: Sint32;
  end;

  { SDL_ControllerTouchpadEvent  }
  SDL_ControllerTouchpadEvent = record
    _type: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    touchpad: Sint32;
    finger: Sint32;
    x: Single;
    y: Single;
    pressure: Single;
  end;

  { SDL_ControllerSensorEvent  }
  SDL_ControllerSensorEvent = record
    _type: Uint32;
    timestamp: Uint32;
    which: SDL_JoystickID;
    sensor: Sint32;
    data: array [0..2] of Single;
  end;

  { SDL_AudioDeviceEvent  }
  SDL_AudioDeviceEvent = record
    _type: Uint32;
    timestamp: Uint32;
    which: Uint32;
    iscapture: Uint8;
    padding1: Uint8;
    padding2: Uint8;
    padding3: Uint8;
  end;

  { SDL_TouchFingerEvent  }
  SDL_TouchFingerEvent = record
    _type: Uint32;
    timestamp: Uint32;
    touchId: SDL_TouchID;
    fingerId: SDL_FingerID;
    x: Single;
    y: Single;
    dx: Single;
    dy: Single;
    pressure: Single;
    windowID: Uint32;
  end;

  { SDL_MultiGestureEvent  }
  SDL_MultiGestureEvent = record
    _type: Uint32;
    timestamp: Uint32;
    touchId: SDL_TouchID;
    dTheta: Single;
    dDist: Single;
    x: Single;
    y: Single;
    numFingers: Uint16;
    padding: Uint16;
  end;

  { SDL_DollarGestureEvent  }
  SDL_DollarGestureEvent = record
    _type: Uint32;
    timestamp: Uint32;
    touchId: SDL_TouchID;
    gestureId: SDL_GestureID;
    numFingers: Uint32;
    error: Single;
    x: Single;
    y: Single;
  end;

  { SDL_DropEvent  }
  SDL_DropEvent = record
    _type: Uint32;
    timestamp: Uint32;
    _file: PUTF8Char;
    windowID: Uint32;
  end;

  { SDL_SensorEvent  }
  SDL_SensorEvent = record
    _type: Uint32;
    timestamp: Uint32;
    which: Sint32;
    data: array [0..5] of Single;
  end;

  { SDL_QuitEvent  }
  SDL_QuitEvent = record
    _type: Uint32;
    timestamp: Uint32;
  end;

  { SDL_OSEvent  }
  SDL_OSEvent = record
    _type: Uint32;
    timestamp: Uint32;
  end;

  { SDL_UserEvent  }
  SDL_UserEvent = record
    _type: Uint32;
    timestamp: Uint32;
    windowID: Uint32;
    code: Sint32;
    data1: Pointer;
    data2: Pointer;
  end;

  { PSDL_SysWMmsg  }
  PSDL_SysWMmsg = Pointer;

  { PPSDL_SysWMmsg  }
  PPSDL_SysWMmsg = ^PSDL_SysWMmsg;

  { SDL_SysWMEvent  }
  SDL_SysWMEvent = record
    _type: Uint32;
    timestamp: Uint32;
    msg: PSDL_SysWMmsg;
  end;

  { PSDL_Event  }
  PSDL_Event = ^SDL_Event;

  { SDL_Event  }
  SDL_Event = record
    case Integer of
      0: (_type: Uint32);
      1: (common: SDL_CommonEvent);
      2: (display: SDL_DisplayEvent);
      3: (window: SDL_WindowEvent);
      4: (key: SDL_KeyboardEvent);
      5: (edit: SDL_TextEditingEvent);
      6: (text: SDL_TextInputEvent);
      7: (motion: SDL_MouseMotionEvent);
      8: (button: SDL_MouseButtonEvent);
      9: (wheel: SDL_MouseWheelEvent);
      10: (jaxis: SDL_JoyAxisEvent);
      11: (jball: SDL_JoyBallEvent);
      12: (jhat: SDL_JoyHatEvent);
      13: (jbutton: SDL_JoyButtonEvent);
      14: (jdevice: SDL_JoyDeviceEvent);
      15: (caxis: SDL_ControllerAxisEvent);
      16: (cbutton: SDL_ControllerButtonEvent);
      17: (cdevice: SDL_ControllerDeviceEvent);
      18: (ctouchpad: SDL_ControllerTouchpadEvent);
      19: (csensor: SDL_ControllerSensorEvent);
      20: (adevice: SDL_AudioDeviceEvent);
      21: (sensor: SDL_SensorEvent);
      22: (quit: SDL_QuitEvent);
      23: (user: SDL_UserEvent);
      24: (syswm: SDL_SysWMEvent);
      25: (tfinger: SDL_TouchFingerEvent);
      26: (mgesture: SDL_MultiGestureEvent);
      27: (dgesture: SDL_DollarGestureEvent);
      28: (drop: SDL_DropEvent);
      29: (padding: array [0..55] of Uint8);
  end;

  { SDL_compile_time_assert_SDL_Event  }
  SDL_compile_time_assert_SDL_Event = array [0..0] of Integer;

  { SDL_EventFilter  }
  SDL_EventFilter = function(userdata: Pointer; event: PSDL_Event): Integer; cdecl;

  { PSDL_EventFilter  }
  PSDL_EventFilter = ^SDL_EventFilter;

  { PSDL_Haptic  }
  PSDL_Haptic = Pointer;

  { PPSDL_Haptic  }
  PPSDL_Haptic = ^PSDL_Haptic;

  { SDL_HapticDirection  }
  SDL_HapticDirection = record
    _type: Uint8;
    dir: array [0..2] of Sint32;
  end;

  { SDL_HapticConstant  }
  SDL_HapticConstant = record
    _type: Uint16;
    direction: SDL_HapticDirection;
    length: Uint32;
    delay: Uint16;
    button: Uint16;
    interval: Uint16;
    level: Sint16;
    attack_length: Uint16;
    attack_level: Uint16;
    fade_length: Uint16;
    fade_level: Uint16;
  end;

  { SDL_HapticPeriodic  }
  SDL_HapticPeriodic = record
    _type: Uint16;
    direction: SDL_HapticDirection;
    length: Uint32;
    delay: Uint16;
    button: Uint16;
    interval: Uint16;
    period: Uint16;
    magnitude: Sint16;
    offset: Sint16;
    phase: Uint16;
    attack_length: Uint16;
    attack_level: Uint16;
    fade_length: Uint16;
    fade_level: Uint16;
  end;

  { SDL_HapticCondition  }
  SDL_HapticCondition = record
    _type: Uint16;
    direction: SDL_HapticDirection;
    length: Uint32;
    delay: Uint16;
    button: Uint16;
    interval: Uint16;
    right_sat: array [0..2] of Uint16;
    left_sat: array [0..2] of Uint16;
    right_coeff: array [0..2] of Sint16;
    left_coeff: array [0..2] of Sint16;
    deadband: array [0..2] of Uint16;
    center: array [0..2] of Sint16;
  end;

  { SDL_HapticRamp  }
  SDL_HapticRamp = record
    _type: Uint16;
    direction: SDL_HapticDirection;
    length: Uint32;
    delay: Uint16;
    button: Uint16;
    interval: Uint16;
    start: Sint16;
    _end: Sint16;
    attack_length: Uint16;
    attack_level: Uint16;
    fade_length: Uint16;
    fade_level: Uint16;
  end;

  { SDL_HapticLeftRight  }
  SDL_HapticLeftRight = record
    _type: Uint16;
    length: Uint32;
    large_magnitude: Uint16;
    small_magnitude: Uint16;
  end;

  { SDL_HapticCustom  }
  SDL_HapticCustom = record
    _type: Uint16;
    direction: SDL_HapticDirection;
    length: Uint32;
    delay: Uint16;
    button: Uint16;
    interval: Uint16;
    channels: Uint8;
    period: Uint16;
    samples: Uint16;
    data: PUint16;
    attack_length: Uint16;
    attack_level: Uint16;
    fade_length: Uint16;
    fade_level: Uint16;
  end;

  { PSDL_HapticEffect  }
  PSDL_HapticEffect = ^SDL_HapticEffect;

  { SDL_HapticEffect  }
  SDL_HapticEffect = record
    case Integer of
      0: (_type: Uint16);
      1: (constant: SDL_HapticConstant);
      2: (periodic: SDL_HapticPeriodic);
      3: (condition: SDL_HapticCondition);
      4: (ramp: SDL_HapticRamp);
      5: (leftright: SDL_HapticLeftRight);
      6: (custom: SDL_HapticCustom);
  end;

  { PSDL_hid_device  }
  PSDL_hid_device = Pointer;

  { PPSDL_hid_device  }
  PPSDL_hid_device = ^PSDL_hid_device;

  { SDL_hid_device_info  }
  SDL_hid_device_info = record
    path: PUTF8Char;
    vendor_id: Word;
    product_id: Word;
    serial_number: PWideChar;
    release_number: Word;
    manufacturer_string: PWideChar;
    product_string: PWideChar;
    usage_page: Word;
    usage: Word;
    interface_number: Integer;
    interface_class: Integer;
    interface_subclass: Integer;
    interface_protocol: Integer;
    next: PSDL_hid_device_info;
  end;

  { SDL_HintCallback  }
  SDL_HintCallback = procedure(userdata: Pointer; const name: PUTF8Char; const oldValue: PUTF8Char; const newValue: PUTF8Char); cdecl;

  { SDL_LogOutputFunction  }
  SDL_LogOutputFunction = procedure(userdata: Pointer; category: Integer; priority: SDL_LogPriority; const _message: PUTF8Char); cdecl;

  { PSDL_LogOutputFunction  }
  PSDL_LogOutputFunction = ^SDL_LogOutputFunction;

  { SDL_MessageBoxButtonData  }
  SDL_MessageBoxButtonData = record
    flags: Uint32;
    buttonid: Integer;
    text: PUTF8Char;
  end;

  { SDL_MessageBoxColor  }
  SDL_MessageBoxColor = record
    r: Uint8;
    g: Uint8;
    b: Uint8;
  end;

  { SDL_MessageBoxColorScheme  }
  SDL_MessageBoxColorScheme = record
    colors: array [0..4] of SDL_MessageBoxColor;
  end;

  { SDL_MessageBoxData  }
  SDL_MessageBoxData = record
    flags: Uint32;
    window: PSDL_Window;
    title: PUTF8Char;
    _message: PUTF8Char;
    numbuttons: Integer;
    buttons: PSDL_MessageBoxButtonData;
    colorScheme: PSDL_MessageBoxColorScheme;
  end;

  { SDL_MetalView  }
  SDL_MetalView = Pointer;

  { SDL_RendererInfo  }
  SDL_RendererInfo = record
    name: PUTF8Char;
    flags: Uint32;
    num_texture_formats: Uint32;
    texture_formats: array [0..15] of Uint32;
    max_texture_width: Integer;
    max_texture_height: Integer;
  end;

  { SDL_Vertex  }
  SDL_Vertex = record
    position: SDL_FPoint;
    color: SDL_Color;
    tex_coord: SDL_FPoint;
  end;

  { PSDL_Renderer  }
  PSDL_Renderer = Pointer;

  { PPSDL_Renderer  }
  PPSDL_Renderer = ^PSDL_Renderer;

  { PSDL_Texture  }
  PSDL_Texture = Pointer;

  { PPSDL_Texture  }
  PPSDL_Texture = ^PSDL_Texture;

  { SDL_WindowShapeParams  }
  SDL_WindowShapeParams = record
    case Integer of
      0: (binarizationCutoff: Uint8);
      1: (colorKey: SDL_Color);
  end;

  { SDL_WindowShapeMode  }
  SDL_WindowShapeMode = record
    mode: WindowShapeMode;
    parameters: SDL_WindowShapeParams;
  end;

  { SDL_WindowsMessageHook  }
  SDL_WindowsMessageHook = procedure(userdata: Pointer; hWnd: Pointer; _message: Cardinal; wParam: Uint64; lParam: Sint64); cdecl;

  { PIDirect3DDevice9  }
  PIDirect3DDevice9 = Pointer;

  { PPIDirect3DDevice9  }
  PPIDirect3DDevice9 = ^PIDirect3DDevice9;

  { PID3D11Device  }
  PID3D11Device = Pointer;

  { PPID3D11Device  }
  PPID3D11Device = ^PID3D11Device;

  { SDL_TimerCallback  }
  SDL_TimerCallback = function(interval: Uint32; param: Pointer): Uint32; cdecl;

  { SDL_TimerID  }
  SDL_TimerID = Integer;

  { SDL_version  }
  SDL_version = record
    major: Uint8;
    minor: Uint8;
    patch: Uint8;
  end;

  { SDL_Locale  }
  SDL_Locale = record
    language: PUTF8Char;
    country: PUTF8Char;
  end;

  { nk_char  }
  nk_char = Int8;

  { nk_uchar  }
  nk_uchar = UInt8;

  { nk_byte  }
  nk_byte = UInt8;

  { Pnk_byte  }
  Pnk_byte = ^nk_byte;

  { nk_short  }
  nk_short = Int16;

  { nk_ushort  }
  nk_ushort = UInt16;

  { nk_int  }
  nk_int = Int32;

  { nk_uint  }
  nk_uint = UInt32;

  { Pnk_uint  }
  Pnk_uint = ^nk_uint;

  { nk_size  }
  nk_size = UIntPtr;

  { Pnk_size  }
  Pnk_size = ^nk_size;

  { nk_ptr  }
  nk_ptr = UIntPtr;

  { nk_bool  }
  nk_bool = Boolean;

  { Pnk_bool  }
  Pnk_bool = ^nk_bool;

  { nk_hash  }
  nk_hash = nk_uint;

  { nk_flags  }
  nk_flags = nk_uint;

  { Pnk_flags  }
  Pnk_flags = ^nk_flags;

  { nk_rune  }
  nk_rune = nk_uint;

  { Pnk_rune  }
  Pnk_rune = ^nk_rune;

  { _dummy_array0  }
  _dummy_array0 = array [0..0] of UTF8Char;

  { _dummy_array1  }
  _dummy_array1 = array [0..0] of UTF8Char;

  { _dummy_array2  }
  _dummy_array2 = array [0..0] of UTF8Char;

  { _dummy_array3  }
  _dummy_array3 = array [0..0] of UTF8Char;

  { _dummy_array4  }
  _dummy_array4 = array [0..0] of UTF8Char;

  { _dummy_array5  }
  _dummy_array5 = array [0..0] of UTF8Char;

  { _dummy_array6  }
  _dummy_array6 = array [0..0] of UTF8Char;

  { _dummy_array7  }
  _dummy_array7 = array [0..0] of UTF8Char;

  { _dummy_array8  }
  _dummy_array8 = array [0..0] of UTF8Char;

  { _dummy_array9  }
  _dummy_array9 = array [0..0] of UTF8Char;

  { nk_color  }
  nk_color = record
    r: nk_byte;
    g: nk_byte;
    b: nk_byte;
    a: nk_byte;
  end;

  { nk_colorf  }
  nk_colorf = record
    r: Single;
    g: Single;
    b: Single;
    a: Single;
  end;

  { nk_vec2  }
  nk_vec2 = record
    x: Single;
    y: Single;
  end;

  { nk_vec2i  }
  nk_vec2i = record
    x: Smallint;
    y: Smallint;
  end;

  { nk_rect  }
  nk_rect = record
    x: Single;
    y: Single;
    w: Single;
    h: Single;
  end;

  { nk_recti  }
  nk_recti = record
    x: Smallint;
    y: Smallint;
    w: Smallint;
    h: Smallint;
  end;

  { nk_glyph  }
  nk_glyph = array [0..3] of UTF8Char;

  { nk_handle  }
  nk_handle = record
    case Integer of
      0: (ptr: Pointer);
      1: (id: Integer);
  end;

  { nk_image  }
  nk_image = record
    handle: nk_handle;
    w: nk_ushort;
    h: nk_ushort;
    region: array [0..3] of nk_ushort;
  end;

  { nk_nine_slice  }
  nk_nine_slice = record
    img: nk_image;
    l: nk_ushort;
    t: nk_ushort;
    r: nk_ushort;
    b: nk_ushort;
  end;

  { nk_cursor  }
  nk_cursor = record
    img: nk_image;
    size: nk_vec2;
    offset: nk_vec2;
  end;

  { nk_scroll  }
  nk_scroll = record
    x: nk_uint;
    y: nk_uint;
  end;

  { nk_plugin_alloc  }
  nk_plugin_alloc = function(p1: nk_handle; old: Pointer; p3: nk_size): Pointer; cdecl;

  { nk_plugin_free  }
  nk_plugin_free = procedure(p1: nk_handle; old: Pointer); cdecl;

  { nk_plugin_filter  }
  nk_plugin_filter = function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;

  { nk_plugin_paste  }
  nk_plugin_paste = procedure(p1: nk_handle; p2: Pnk_text_edit); cdecl;

  { nk_plugin_copy  }
  nk_plugin_copy = procedure(p1: nk_handle; const p2: PUTF8Char; len: Integer); cdecl;

  { nk_allocator  }
  nk_allocator = record
    userdata: nk_handle;
    alloc: nk_plugin_alloc;
    free: nk_plugin_free;
  end;

  { nk_draw_null_texture  }
  nk_draw_null_texture = record
    texture: nk_handle;
    uv: nk_vec2;
  end;

  { nk_convert_config  }
  nk_convert_config = record
    global_alpha: Single;
    line_AA: nk_anti_aliasing;
    shape_AA: nk_anti_aliasing;
    circle_segment_count: Cardinal;
    arc_segment_count: Cardinal;
    curve_segment_count: Cardinal;
    null: nk_draw_null_texture;
    vertex_layout: Pnk_draw_vertex_layout_element;
    vertex_size: nk_size;
    vertex_alignment: nk_size;
  end;

  { nk_list_view  }
  nk_list_view = record
    _begin: Integer;
    _end: Integer;
    count: Integer;
    total_height: Integer;
    ctx: Pnk_context;
    scroll_pointer: Pnk_uint;
    scroll_value: nk_uint;
  end;

  { nk_text_width_f  }
  nk_text_width_f = function(p1: nk_handle; h: Single; const p3: PUTF8Char; len: Integer): Single; cdecl;

  { nk_query_font_glyph_f  }
  nk_query_font_glyph_f = procedure(handle: nk_handle; font_height: Single; glyph: Pnk_user_font_glyph; codepoint: nk_rune; next_codepoint: nk_rune); cdecl;

  { nk_user_font_glyph  }
  nk_user_font_glyph = record
    uv: array [0..1] of nk_vec2;
    offset: nk_vec2;
    width: Single;
    height: Single;
    xadvance: Single;
  end;

  { nk_user_font  }
  nk_user_font = record
    userdata: nk_handle;
    height: Single;
    width: nk_text_width_f;
  end;

  { nk_baked_font  }
  nk_baked_font = record
    height: Single;
    ascent: Single;
    descent: Single;
    glyph_offset: nk_rune;
    glyph_count: nk_rune;
    ranges: Pnk_rune;
  end;

  { nk_font_config  }
  nk_font_config = record
    next: Pnk_font_config;
    ttf_blob: Pointer;
    ttf_size: nk_size;
    ttf_data_owned_by_atlas: Byte;
    merge_mode: Byte;
    pixel_snap: Byte;
    oversample_v: Byte;
    oversample_h: Byte;
    padding: array [0..2] of Byte;
    size: Single;
    coord_type: nk_font_coord_type;
    spacing: nk_vec2;
    range: Pnk_rune;
    font: Pnk_baked_font;
    fallback_glyph: nk_rune;
    n: Pnk_font_config;
    p: Pnk_font_config;
  end;

  { nk_font_glyph  }
  nk_font_glyph = record
    codepoint: nk_rune;
    xadvance: Single;
    x0: Single;
    y0: Single;
    x1: Single;
    y1: Single;
    w: Single;
    h: Single;
    u0: Single;
    v0: Single;
    u1: Single;
    v1: Single;
  end;

  { nk_font  }
  nk_font = record
    next: Pnk_font;
    handle: nk_user_font;
    info: nk_baked_font;
    scale: Single;
    glyphs: Pnk_font_glyph;
    fallback: Pnk_font_glyph;
    fallback_codepoint: nk_rune;
    texture: nk_handle;
    config: Pnk_font_config;
  end;

  { nk_font_atlas  }
  nk_font_atlas = record
    pixel: Pointer;
    tex_width: Integer;
    tex_height: Integer;
    permanent: nk_allocator;
    temporary: nk_allocator;
    custom: nk_recti;
    cursors: array [0..6] of nk_cursor;
    glyph_count: Integer;
    glyphs: Pnk_font_glyph;
    default_font: Pnk_font;
    fonts: Pnk_font;
    config: Pnk_font_config;
    font_num: Integer;
  end;

  { nk_memory_status  }
  nk_memory_status = record
    memory: Pointer;
    _type: Cardinal;
    size: nk_size;
    allocated: nk_size;
    needed: nk_size;
    calls: nk_size;
  end;

  { nk_buffer_marker  }
  nk_buffer_marker = record
    active: nk_bool;
    offset: nk_size;
  end;

  { nk_memory  }
  nk_memory = record
    ptr: Pointer;
    size: nk_size;
  end;

  { nk_buffer  }
  nk_buffer = record
    marker: array [0..1] of nk_buffer_marker;
    pool: nk_allocator;
    _type: nk_allocation_type;
    memory: nk_memory;
    grow_factor: Single;
    allocated: nk_size;
    needed: nk_size;
    calls: nk_size;
    size: nk_size;
  end;

  { nk_str  }
  nk_str = record
    buffer: nk_buffer;
    len: Integer;
  end;

  { nk_clipboard  }
  nk_clipboard = record
    userdata: nk_handle;
    paste: nk_plugin_paste;
    copy: nk_plugin_copy;
  end;

  { nk_text_undo_record  }
  nk_text_undo_record = record
    where: Integer;
    insert_length: Smallint;
    delete_length: Smallint;
    char_storage: Smallint;
  end;

  { nk_text_undo_state  }
  nk_text_undo_state = record
    undo_rec: array [0..98] of nk_text_undo_record;
    undo_char: array [0..998] of nk_rune;
    undo_point: Smallint;
    redo_point: Smallint;
    undo_char_point: Smallint;
    redo_char_point: Smallint;
  end;

  { nk_text_edit  }
  nk_text_edit = record
    clip: nk_clipboard;
    _string: nk_str;
    filter: nk_plugin_filter;
    scrollbar: nk_vec2;
    cursor: Integer;
    select_start: Integer;
    select_end: Integer;
    mode: Byte;
    cursor_at_end_of_line: Byte;
    initialized: Byte;
    has_preferred_x: Byte;
    single_line: Byte;
    active: Byte;
    padding1: Byte;
    preferred_x: Single;
    undo: nk_text_undo_state;
  end;

  { nk_command  }
  nk_command = record
    _type: nk_command_type;
    next: nk_size;
  end;

  { nk_command_scissor  }
  nk_command_scissor = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
  end;

  { nk_command_line  }
  nk_command_line = record
    header: nk_command;
    line_thickness: Word;
    _begin: nk_vec2i;
    _end: nk_vec2i;
    color: nk_color;
  end;

  { nk_command_curve  }
  nk_command_curve = record
    header: nk_command;
    line_thickness: Word;
    _begin: nk_vec2i;
    _end: nk_vec2i;
    ctrl: array [0..1] of nk_vec2i;
    color: nk_color;
  end;

  { nk_command_rect  }
  nk_command_rect = record
    header: nk_command;
    rounding: Word;
    line_thickness: Word;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  { nk_command_rect_filled  }
  nk_command_rect_filled = record
    header: nk_command;
    rounding: Word;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  { nk_command_rect_multi_color  }
  nk_command_rect_multi_color = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    left: nk_color;
    top: nk_color;
    bottom: nk_color;
    right: nk_color;
  end;

  { nk_command_triangle  }
  nk_command_triangle = record
    header: nk_command;
    line_thickness: Word;
    a: nk_vec2i;
    b: nk_vec2i;
    c: nk_vec2i;
    color: nk_color;
  end;

  { nk_command_triangle_filled  }
  nk_command_triangle_filled = record
    header: nk_command;
    a: nk_vec2i;
    b: nk_vec2i;
    c: nk_vec2i;
    color: nk_color;
  end;

  { nk_command_circle  }
  nk_command_circle = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    line_thickness: Word;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  { nk_command_circle_filled  }
  nk_command_circle_filled = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    color: nk_color;
  end;

  { nk_command_arc  }
  nk_command_arc = record
    header: nk_command;
    cx: Smallint;
    cy: Smallint;
    r: Word;
    line_thickness: Word;
    a: array [0..1] of Single;
    color: nk_color;
  end;

  { nk_command_arc_filled  }
  nk_command_arc_filled = record
    header: nk_command;
    cx: Smallint;
    cy: Smallint;
    r: Word;
    a: array [0..1] of Single;
    color: nk_color;
  end;

  { nk_command_polygon  }
  nk_command_polygon = record
    header: nk_command;
    color: nk_color;
    line_thickness: Word;
    point_count: Word;
    points: array [0..0] of nk_vec2i;
  end;

  { nk_command_polygon_filled  }
  nk_command_polygon_filled = record
    header: nk_command;
    color: nk_color;
    point_count: Word;
    points: array [0..0] of nk_vec2i;
  end;

  { nk_command_polyline  }
  nk_command_polyline = record
    header: nk_command;
    color: nk_color;
    line_thickness: Word;
    point_count: Word;
    points: array [0..0] of nk_vec2i;
  end;

  { nk_command_image  }
  nk_command_image = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    img: nk_image;
    col: nk_color;
  end;

  { nk_command_custom_callback  }
  nk_command_custom_callback = procedure(canvas: Pointer; x: Smallint; y: Smallint; w: Word; h: Word; callback_data: nk_handle); cdecl;

  { nk_command_custom  }
  nk_command_custom = record
    header: nk_command;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    callback_data: nk_handle;
    callback: nk_command_custom_callback;
  end;

  { nk_command_text  }
  nk_command_text = record
    header: nk_command;
    font: Pnk_user_font;
    background: nk_color;
    foreground: nk_color;
    x: Smallint;
    y: Smallint;
    w: Word;
    h: Word;
    height: Single;
    length: Integer;
    _string: array [0..0] of UTF8Char;
  end;

  { nk_command_buffer  }
  nk_command_buffer = record
    base: Pnk_buffer;
    clip: nk_rect;
    use_clipping: Integer;
    userdata: nk_handle;
    _begin: nk_size;
    _end: nk_size;
    last: nk_size;
  end;

  { nk_mouse_button  }
  nk_mouse_button = record
    down: nk_bool;
    clicked: Cardinal;
    clicked_pos: nk_vec2;
  end;

  { nk_mouse  }
  nk_mouse = record
    buttons: array [0..3] of nk_mouse_button;
    pos: nk_vec2;
    prev: nk_vec2;
    delta: nk_vec2;
    scroll_delta: nk_vec2;
    grab: Byte;
    grabbed: Byte;
    ungrab: Byte;
  end;

  { nk_key  }
  nk_key = record
    down: nk_bool;
    clicked: Cardinal;
  end;

  { nk_keyboard  }
  nk_keyboard = record
    keys: array [0..29] of nk_key;
    text: array [0..15] of UTF8Char;
    text_len: Integer;
  end;

  { nk_input  }
  nk_input = record
    keyboard: nk_keyboard;
    mouse: nk_mouse;
  end;

  { nk_style_item_data  }
  nk_style_item_data = record
    case Integer of
      0: (color: nk_color);
      1: (image: nk_image);
      2: (slice: nk_nine_slice);
  end;

  { nk_style_item  }
  nk_style_item = record
    _type: nk_style_item_type;
    data: nk_style_item_data;
  end;

  { nk_style_text  }
  nk_style_text = record
    color: nk_color;
    padding: nk_vec2;
  end;

  { nk_style_button  }
  nk_style_button = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    text_background: nk_color;
    text_normal: nk_color;
    text_hover: nk_color;
    text_active: nk_color;
    text_alignment: nk_flags;
    border: Single;
    rounding: Single;
    padding: nk_vec2;
    image_padding: nk_vec2;
    touch_padding: nk_vec2;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; userdata: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; userdata: nk_handle); cdecl;
  end;

  { nk_style_toggle  }
  nk_style_toggle = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    text_normal: nk_color;
    text_hover: nk_color;
    text_active: nk_color;
    text_background: nk_color;
    text_alignment: nk_flags;
    padding: nk_vec2;
    touch_padding: nk_vec2;
    spacing: Single;
    border: Single;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_selectable  }
  nk_style_selectable = record
    normal: nk_style_item;
    hover: nk_style_item;
    pressed: nk_style_item;
    normal_active: nk_style_item;
    hover_active: nk_style_item;
    pressed_active: nk_style_item;
    text_normal: nk_color;
    text_hover: nk_color;
    text_pressed: nk_color;
    text_normal_active: nk_color;
    text_hover_active: nk_color;
    text_pressed_active: nk_color;
    text_background: nk_color;
    text_alignment: nk_flags;
    rounding: Single;
    padding: nk_vec2;
    touch_padding: nk_vec2;
    image_padding: nk_vec2;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_slider  }
  nk_style_slider = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    bar_normal: nk_color;
    bar_hover: nk_color;
    bar_active: nk_color;
    bar_filled: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    cursor_active: nk_style_item;
    border: Single;
    rounding: Single;
    bar_height: Single;
    padding: nk_vec2;
    spacing: nk_vec2;
    cursor_size: nk_vec2;
    show_buttons: Integer;
    inc_button: nk_style_button;
    dec_button: nk_style_button;
    inc_symbol: nk_symbol_type;
    dec_symbol: nk_symbol_type;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_progress  }
  nk_style_progress = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    cursor_active: nk_style_item;
    cursor_border_color: nk_color;
    rounding: Single;
    border: Single;
    cursor_border: Single;
    cursor_rounding: Single;
    padding: nk_vec2;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_scrollbar  }
  nk_style_scrollbar = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    cursor_normal: nk_style_item;
    cursor_hover: nk_style_item;
    cursor_active: nk_style_item;
    cursor_border_color: nk_color;
    border: Single;
    rounding: Single;
    border_cursor: Single;
    rounding_cursor: Single;
    padding: nk_vec2;
    show_buttons: Integer;
    inc_button: nk_style_button;
    dec_button: nk_style_button;
    inc_symbol: nk_symbol_type;
    dec_symbol: nk_symbol_type;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_edit  }
  nk_style_edit = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    scrollbar: nk_style_scrollbar;
    cursor_normal: nk_color;
    cursor_hover: nk_color;
    cursor_text_normal: nk_color;
    cursor_text_hover: nk_color;
    text_normal: nk_color;
    text_hover: nk_color;
    text_active: nk_color;
    selected_normal: nk_color;
    selected_hover: nk_color;
    selected_text_normal: nk_color;
    selected_text_hover: nk_color;
    border: Single;
    rounding: Single;
    cursor_size: Single;
    scrollbar_size: nk_vec2;
    padding: nk_vec2;
    row_padding: Single;
  end;

  { nk_style_property  }
  nk_style_property = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    label_normal: nk_color;
    label_hover: nk_color;
    label_active: nk_color;
    sym_left: nk_symbol_type;
    sym_right: nk_symbol_type;
    border: Single;
    rounding: Single;
    padding: nk_vec2;
    edit: nk_style_edit;
    inc_button: nk_style_button;
    dec_button: nk_style_button;
    userdata: nk_handle;
    draw_begin: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
    draw_end: procedure(p1: Pnk_command_buffer; p2: nk_handle); cdecl;
  end;

  { nk_style_chart  }
  nk_style_chart = record
    background: nk_style_item;
    border_color: nk_color;
    selected_color: nk_color;
    color: nk_color;
    border: Single;
    rounding: Single;
    padding: nk_vec2;
  end;

  { nk_style_combo  }
  nk_style_combo = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    border_color: nk_color;
    label_normal: nk_color;
    label_hover: nk_color;
    label_active: nk_color;
    symbol_normal: nk_color;
    symbol_hover: nk_color;
    symbol_active: nk_color;
    button: nk_style_button;
    sym_normal: nk_symbol_type;
    sym_hover: nk_symbol_type;
    sym_active: nk_symbol_type;
    border: Single;
    rounding: Single;
    content_padding: nk_vec2;
    button_padding: nk_vec2;
    spacing: nk_vec2;
  end;

  { nk_style_tab  }
  nk_style_tab = record
    background: nk_style_item;
    border_color: nk_color;
    text: nk_color;
    tab_maximize_button: nk_style_button;
    tab_minimize_button: nk_style_button;
    node_maximize_button: nk_style_button;
    node_minimize_button: nk_style_button;
    sym_minimize: nk_symbol_type;
    sym_maximize: nk_symbol_type;
    border: Single;
    rounding: Single;
    indent: Single;
    padding: nk_vec2;
    spacing: nk_vec2;
  end;

  { nk_style_window_header  }
  nk_style_window_header = record
    normal: nk_style_item;
    hover: nk_style_item;
    active: nk_style_item;
    close_button: nk_style_button;
    minimize_button: nk_style_button;
    close_symbol: nk_symbol_type;
    minimize_symbol: nk_symbol_type;
    maximize_symbol: nk_symbol_type;
    label_normal: nk_color;
    label_hover: nk_color;
    label_active: nk_color;
    align: nk_style_header_align;
    padding: nk_vec2;
    label_padding: nk_vec2;
    spacing: nk_vec2;
  end;

  { nk_style_window  }
  nk_style_window = record
    header: nk_style_window_header;
    fixed_background: nk_style_item;
    background: nk_color;
    border_color: nk_color;
    popup_border_color: nk_color;
    combo_border_color: nk_color;
    contextual_border_color: nk_color;
    menu_border_color: nk_color;
    group_border_color: nk_color;
    tooltip_border_color: nk_color;
    scaler: nk_style_item;
    border: Single;
    combo_border: Single;
    contextual_border: Single;
    menu_border: Single;
    group_border: Single;
    tooltip_border: Single;
    popup_border: Single;
    min_row_height_padding: Single;
    rounding: Single;
    spacing: nk_vec2;
    scrollbar_size: nk_vec2;
    min_size: nk_vec2;
    padding: nk_vec2;
    group_padding: nk_vec2;
    popup_padding: nk_vec2;
    combo_padding: nk_vec2;
    contextual_padding: nk_vec2;
    menu_padding: nk_vec2;
    tooltip_padding: nk_vec2;
  end;

  { nk_style  }
  nk_style = record
    font: Pnk_user_font;
    cursors: array [0..6] of Pnk_cursor;
    cursor_active: Pnk_cursor;
    cursor_last: Pnk_cursor;
    cursor_visible: Integer;
    text: nk_style_text;
    button: nk_style_button;
    contextual_button: nk_style_button;
    menu_button: nk_style_button;
    option: nk_style_toggle;
    checkbox: nk_style_toggle;
    selectable: nk_style_selectable;
    slider: nk_style_slider;
    progress: nk_style_progress;
    _property: nk_style_property;
    edit: nk_style_edit;
    chart: nk_style_chart;
    scrollh: nk_style_scrollbar;
    scrollv: nk_style_scrollbar;
    tab: nk_style_tab;
    combo: nk_style_combo;
    window: nk_style_window;
  end;

  { nk_chart_slot  }
  nk_chart_slot = record
    _type: nk_chart_type;
    color: nk_color;
    highlight: nk_color;
    min: Single;
    max: Single;
    range: Single;
    count: Integer;
    last: nk_vec2;
    index: Integer;
  end;

  { nk_chart  }
  nk_chart = record
    slot: Integer;
    x: Single;
    y: Single;
    w: Single;
    h: Single;
    slots: array [0..3] of nk_chart_slot;
  end;

  { nk_row_layout  }
  nk_row_layout = record
    _type: nk_panel_row_layout_type;
    index: Integer;
    height: Single;
    min_height: Single;
    columns: Integer;
    ratio: PSingle;
    item_width: Single;
    item_height: Single;
    item_offset: Single;
    filled: Single;
    item: nk_rect;
    tree_depth: Integer;
    templates: array [0..15] of Single;
  end;

  { nk_popup_buffer  }
  nk_popup_buffer = record
    _begin: nk_size;
    parent: nk_size;
    last: nk_size;
    _end: nk_size;
    active: nk_bool;
  end;

  { nk_menu_state  }
  nk_menu_state = record
    x: Single;
    y: Single;
    w: Single;
    h: Single;
    offset: nk_scroll;
  end;

  { nk_panel  }
  nk_panel = record
    _type: nk_panel_type;
    flags: nk_flags;
    bounds: nk_rect;
    offset_x: Pnk_uint;
    offset_y: Pnk_uint;
    at_x: Single;
    at_y: Single;
    max_x: Single;
    footer_height: Single;
    header_height: Single;
    border: Single;
    has_scrolling: Cardinal;
    clip: nk_rect;
    menu: nk_menu_state;
    row: nk_row_layout;
    chart: nk_chart;
    buffer: Pnk_command_buffer;
    parent: Pnk_panel;
  end;

  { nk_popup_state  }
  nk_popup_state = record
    win: Pnk_window;
    _type: nk_panel_type;
    buf: nk_popup_buffer;
    name: nk_hash;
    active: nk_bool;
    combo_count: Cardinal;
    con_count: Cardinal;
    con_old: Cardinal;
    active_con: Cardinal;
    header: nk_rect;
  end;

  { nk_edit_state  }
  nk_edit_state = record
    name: nk_hash;
    seq: Cardinal;
    old: Cardinal;
    active: Integer;
    prev: Integer;
    cursor: Integer;
    sel_start: Integer;
    sel_end: Integer;
    scrollbar: nk_scroll;
    mode: Byte;
    single_line: Byte;
  end;

  { nk_property_state  }
  nk_property_state = record
    active: Integer;
    prev: Integer;
    buffer: array [0..63] of UTF8Char;
    length: Integer;
    cursor: Integer;
    select_start: Integer;
    select_end: Integer;
    name: nk_hash;
    seq: Cardinal;
    old: Cardinal;
    state: Integer;
  end;

  { nk_window  }
  nk_window = record
    seq: Cardinal;
    name: nk_hash;
    name_string: array [0..63] of UTF8Char;
    flags: nk_flags;
    bounds: nk_rect;
    scrollbar: nk_scroll;
    buffer: nk_command_buffer;
    layout: Pnk_panel;
    scrollbar_hiding_timer: Single;
    _property: nk_property_state;
    popup: nk_popup_state;
    edit: nk_edit_state;
    scrolled: Cardinal;
    tables: Pnk_table;
    table_count: Cardinal;
    next: Pnk_window;
    prev: Pnk_window;
    parent: Pnk_window;
  end;

  { nk_config_stack_style_item_element  }
  nk_config_stack_style_item_element = record
    address: Pnk_style_item;
    old_value: nk_style_item;
  end;

  { nk_config_stack_float_element  }
  nk_config_stack_float_element = record
    address: PSingle;
    old_value: Single;
  end;

  { nk_config_stack_vec2_element  }
  nk_config_stack_vec2_element = record
    address: Pnk_vec2;
    old_value: nk_vec2;
  end;

  { nk_config_stack_flags_element  }
  nk_config_stack_flags_element = record
    address: Pnk_flags;
    old_value: nk_flags;
  end;

  { nk_config_stack_color_element  }
  nk_config_stack_color_element = record
    address: Pnk_color;
    old_value: nk_color;
  end;

  { nk_config_stack_user_font_element  }
  nk_config_stack_user_font_element = record
    address: PPnk_user_font;
    old_value: Pnk_user_font;
  end;

  { nk_config_stack_button_behavior_element  }
  nk_config_stack_button_behavior_element = record
    address: Pnk_button_behavior;
    old_value: nk_button_behavior;
  end;

  { nk_config_stack_style_item  }
  nk_config_stack_style_item = record
    head: Integer;
    elements: array [0..15] of nk_config_stack_style_item_element;
  end;

  { nk_config_stack_float  }
  nk_config_stack_float = record
    head: Integer;
    elements: array [0..31] of nk_config_stack_float_element;
  end;

  { nk_config_stack_vec2  }
  nk_config_stack_vec2 = record
    head: Integer;
    elements: array [0..15] of nk_config_stack_vec2_element;
  end;

  { nk_config_stack_flags  }
  nk_config_stack_flags = record
    head: Integer;
    elements: array [0..31] of nk_config_stack_flags_element;
  end;

  { nk_config_stack_color  }
  nk_config_stack_color = record
    head: Integer;
    elements: array [0..31] of nk_config_stack_color_element;
  end;

  { nk_config_stack_user_font  }
  nk_config_stack_user_font = record
    head: Integer;
    elements: array [0..7] of nk_config_stack_user_font_element;
  end;

  { nk_config_stack_button_behavior  }
  nk_config_stack_button_behavior = record
    head: Integer;
    elements: array [0..7] of nk_config_stack_button_behavior_element;
  end;

  { nk_configuration_stacks  }
  nk_configuration_stacks = record
    style_items: nk_config_stack_style_item;
    floats: nk_config_stack_float;
    vectors: nk_config_stack_vec2;
    flags: nk_config_stack_flags;
    colors: nk_config_stack_color;
    fonts: nk_config_stack_user_font;
    button_behaviors: nk_config_stack_button_behavior;
  end;

  { nk_table  }
  nk_table = record
    seq: Cardinal;
    size: Cardinal;
    keys: array [0..58] of nk_hash;
    values: array [0..58] of nk_uint;
    next: Pnk_table;
    prev: Pnk_table;
  end;

  { nk_page_data  }
  nk_page_data = record
    case Integer of
      0: (tbl: nk_table);
      1: (pan: nk_panel);
      2: (win: nk_window);
  end;

  { nk_page_element  }
  nk_page_element = record
    data: nk_page_data;
    next: Pnk_page_element;
    prev: Pnk_page_element;
  end;

  { nk_page  }
  nk_page = record
    size: Cardinal;
    next: Pnk_page;
    win: array [0..0] of nk_page_element;
  end;

  { nk_pool  }
  nk_pool = record
    alloc: nk_allocator;
    _type: nk_allocation_type;
    page_count: Cardinal;
    pages: Pnk_page;
    freelist: Pnk_page_element;
    capacity: Cardinal;
    size: nk_size;
    cap: nk_size;
  end;

  { nk_context  }
  nk_context = record
    input: nk_input;
    style: nk_style;
    memory: nk_buffer;
    clip: nk_clipboard;
    last_widget_state: nk_flags;
    button_behavior: nk_button_behavior;
    stacks: nk_configuration_stacks;
    delta_time_seconds: Single;
    text_edit: nk_text_edit;
    overlay: nk_command_buffer;
    build: Integer;
    use_pool: Integer;
    pool: nk_pool;
    _begin: Pnk_window;
    _end: Pnk_window;
    active: Pnk_window;
    current: Pnk_window;
    freelist: Pnk_page_element;
    count: Cardinal;
    seq: Cardinal;
  end;

  { Pplm_t  }
  Pplm_t = Pointer;

  { PPplm_t  }
  PPplm_t = ^Pplm_t;

  { Pplm_buffer_t  }
  Pplm_buffer_t = Pointer;

  { PPplm_buffer_t  }
  PPplm_buffer_t = ^Pplm_buffer_t;

  { Pplm_demux_t  }
  Pplm_demux_t = Pointer;

  { PPplm_demux_t  }
  PPplm_demux_t = ^Pplm_demux_t;

  { Pplm_video_t  }
  Pplm_video_t = Pointer;

  { PPplm_video_t  }
  PPplm_video_t = ^Pplm_video_t;

  { Pplm_audio_t  }
  Pplm_audio_t = Pointer;

  { PPplm_audio_t  }
  PPplm_audio_t = ^Pplm_audio_t;

  { plm_packet_t  }
  plm_packet_t = record
    _type: Integer;
    pts: Double;
    length: NativeUInt;
    data: PUInt8;
  end;

  { plm_plane_t  }
  plm_plane_t = record
    width: Cardinal;
    height: Cardinal;
    data: PUInt8;
  end;

  { plm_frame_t  }
  plm_frame_t = record
    time: Double;
    width: Cardinal;
    height: Cardinal;
    y: plm_plane_t;
    cr: plm_plane_t;
    cb: plm_plane_t;
  end;

  { plm_video_decode_callback  }
  plm_video_decode_callback = procedure(self: Pplm_t; frame: Pplm_frame_t; user: Pointer); cdecl;

  { plm_samples_t  }
  plm_samples_t = record
    time: Double;
    count: Cardinal;
    interleaved: array [0..2303] of Single;
  end;

  { plm_audio_decode_callback  }
  plm_audio_decode_callback = procedure(self: Pplm_t; samples: Pplm_samples_t; user: Pointer); cdecl;

  { plm_buffer_load_callback  }
  plm_buffer_load_callback = procedure(self: Pplm_buffer_t; user: Pointer); cdecl;

  { stbi_uc  }
  stbi_uc = Byte;

  { Pstbi_uc  }
  Pstbi_uc = ^stbi_uc;

  { stbi_us  }
  stbi_us = Word;

  { Pstbi_us  }
  Pstbi_us = ^stbi_us;

  { stbi_io_callbacks  }
  stbi_io_callbacks = record
    read: function(user: Pointer; data: PUTF8Char; size: Integer): Integer; cdecl;
    skip: procedure(user: Pointer; n: Integer); cdecl;
    eof: function(user: Pointer): Integer; cdecl;
  end;

  { Pstbi_write_func  }
  Pstbi_write_func = procedure(context: Pointer; data: Pointer; size: Integer); cdecl;

  { stbtt__buf  }
  stbtt__buf = record
    data: PByte;
    cursor: Integer;
    size: Integer;
  end;

  { stbtt_bakedchar  }
  stbtt_bakedchar = record
    x0: Word;
    y0: Word;
    x1: Word;
    y1: Word;
    xoff: Single;
    yoff: Single;
    xadvance: Single;
  end;

  { stbtt_aligned_quad  }
  stbtt_aligned_quad = record
    x0: Single;
    y0: Single;
    s0: Single;
    t0: Single;
    x1: Single;
    y1: Single;
    s1: Single;
    t1: Single;
  end;

  { stbtt_packedchar  }
  stbtt_packedchar = record
    x0: Word;
    y0: Word;
    x1: Word;
    y1: Word;
    xoff: Single;
    yoff: Single;
    xadvance: Single;
    xoff2: Single;
    yoff2: Single;
  end;

  { Pstbrp_rect  }
  Pstbrp_rect = Pointer;

  { PPstbrp_rect  }
  PPstbrp_rect = ^Pstbrp_rect;

  { stbtt_pack_range  }
  stbtt_pack_range = record
    font_size: Single;
    first_unicode_codepoint_in_range: Integer;
    array_of_unicode_codepoints: PInteger;
    num_chars: Integer;
    chardata_for_range: Pstbtt_packedchar;
    h_oversample: Byte;
    v_oversample: Byte;
  end;

  { stbtt_pack_context  }
  stbtt_pack_context = record
    user_allocator_context: Pointer;
    pack_info: Pointer;
    width: Integer;
    height: Integer;
    stride_in_bytes: Integer;
    padding: Integer;
    skip_missing: Integer;
    h_oversample: Cardinal;
    v_oversample: Cardinal;
    pixels: PByte;
    nodes: Pointer;
  end;

  { stbtt_fontinfo  }
  stbtt_fontinfo = record
    userdata: Pointer;
    data: PByte;
    fontstart: Integer;
    numGlyphs: Integer;
    loca: Integer;
    head: Integer;
    glyf: Integer;
    hhea: Integer;
    hmtx: Integer;
    kern: Integer;
    gpos: Integer;
    svg: Integer;
    index_map: Integer;
    indexToLocFormat: Integer;
    cff: stbtt__buf;
    charstrings: stbtt__buf;
    gsubrs: stbtt__buf;
    subrs: stbtt__buf;
    fontdicts: stbtt__buf;
    fdselect: stbtt__buf;
  end;

  { stbtt_kerningentry  }
  stbtt_kerningentry = record
    glyph1: Integer;
    glyph2: Integer;
    advance: Integer;
  end;

  { stbtt_vertex  }
  stbtt_vertex = record
    x: Smallint;
    y: Smallint;
    cx: Smallint;
    cy: Smallint;
    cx1: Smallint;
    cy1: Smallint;
    _type: Byte;
    padding: Byte;
  end;

  { stbtt__bitmap  }
  stbtt__bitmap = record
    w: Integer;
    h: Integer;
    stride: Integer;
    pixels: PByte;
  end;

  { ma_int8  }
  ma_int8 = UTF8Char;

  { ma_uint8  }
  ma_uint8 = Byte;

  { Pma_uint8  }
  Pma_uint8 = ^ma_uint8;

  { ma_int16  }
  ma_int16 = Smallint;

  { Pma_int16  }
  Pma_int16 = ^ma_int16;

  { ma_uint16  }
  ma_uint16 = Word;

  { ma_int32  }
  ma_int32 = Integer;

  { Pma_int32  }
  Pma_int32 = ^ma_int32;

  { PPma_int32  }
  PPma_int32 = ^Pma_int32;

  { ma_uint32  }
  ma_uint32 = Cardinal;

  { Pma_uint32  }
  Pma_uint32 = ^ma_uint32;

  { ma_int64  }
  ma_int64 = Int64;

  { Pma_int64  }
  Pma_int64 = ^ma_int64;

  { ma_uint64  }
  ma_uint64 = UInt64;

  { Pma_uint64  }
  Pma_uint64 = ^ma_uint64;

  { ma_uintptr  }
  ma_uintptr = ma_uint64;

  { ma_bool8  }
  ma_bool8 = ma_uint8;

  { ma_bool32  }
  ma_bool32 = ma_uint32;

  { ma_handle  }
  ma_handle = Pointer;

  { ma_ptr  }
  ma_ptr = Pointer;

  { Pma_ptr  }
  Pma_ptr = ^ma_ptr;

  { ma_proc  }
  ma_proc = procedure(); cdecl;

  { ma_channel  }
  ma_channel = ma_uint8;

  { Pma_channel  }
  Pma_channel = ^ma_channel;

  { ma_allocation_callbacks  }
  ma_allocation_callbacks = record
    pUserData: Pointer;
    onMalloc: function(sz: NativeUInt; pUserData: Pointer): Pointer; cdecl;
    onRealloc: function(p: Pointer; sz: NativeUInt; pUserData: Pointer): Pointer; cdecl;
    onFree: procedure(p: Pointer; pUserData: Pointer); cdecl;
  end;

  { ma_lcg  }
  ma_lcg = record
    state: ma_int32;
  end;

  { ma_spinlock  }
  ma_spinlock = ma_uint32;

  { Pma_spinlock  }
  Pma_spinlock = ^ma_spinlock;

  { ma_thread  }
  ma_thread = ma_handle;

  { ma_mutex  }
  ma_mutex = ma_handle;

  { Pma_mutex  }
  Pma_mutex = ^ma_mutex;

  { ma_event  }
  ma_event = ma_handle;

  { Pma_event  }
  Pma_event = ^ma_event;

  { ma_semaphore  }
  ma_semaphore = ma_handle;

  { ma_log_callback_proc  }
  ma_log_callback_proc = procedure(pUserData: Pointer; level: ma_uint32; const pMessage: PUTF8Char); cdecl;

  { ma_log_callback  }
  ma_log_callback = record
    onLog: ma_log_callback_proc;
    pUserData: Pointer;
  end;

  { ma_log  }
  ma_log = record
    callbacks: array [0..3] of ma_log_callback;
    callbackCount: ma_uint32;
    allocationCallbacks: ma_allocation_callbacks;
    lock: ma_mutex;
  end;

  { Pma_biquad_coefficient  }
  Pma_biquad_coefficient = ^ma_biquad_coefficient;

  { ma_biquad_coefficient  }
  ma_biquad_coefficient = record
    case Integer of
      0: (f32: Single);
      1: (s32: ma_int32);
  end;

  { ma_biquad_config  }
  ma_biquad_config = record
    format: ma_format;
    channels: ma_uint32;
    b0: Double;
    b1: Double;
    b2: Double;
    a0: Double;
    a1: Double;
    a2: Double;
  end;

  { ma_biquad  }
  ma_biquad = record
    format: ma_format;
    channels: ma_uint32;
    b0: ma_biquad_coefficient;
    b1: ma_biquad_coefficient;
    b2: ma_biquad_coefficient;
    a1: ma_biquad_coefficient;
    a2: ma_biquad_coefficient;
    pR1: Pma_biquad_coefficient;
    pR2: Pma_biquad_coefficient;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_lpf1_config  }
  ma_lpf1_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    cutoffFrequency: Double;
    q: Double;
  end;

  { ma_lpf2_config  }
  ma_lpf2_config = ma_lpf1_config;

  { Pma_lpf2_config  }
  Pma_lpf2_config = ^ma_lpf2_config;

  { ma_lpf1  }
  ma_lpf1 = record
    format: ma_format;
    channels: ma_uint32;
    a: ma_biquad_coefficient;
    pR1: Pma_biquad_coefficient;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_lpf2  }
  ma_lpf2 = record
    bq: ma_biquad;
  end;

  { ma_lpf_config  }
  ma_lpf_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    cutoffFrequency: Double;
    order: ma_uint32;
  end;

  { ma_lpf  }
  ma_lpf = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    lpf1Count: ma_uint32;
    lpf2Count: ma_uint32;
    pLPF1: Pma_lpf1;
    pLPF2: Pma_lpf2;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_hpf1_config  }
  ma_hpf1_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    cutoffFrequency: Double;
    q: Double;
  end;

  { ma_hpf2_config  }
  ma_hpf2_config = ma_hpf1_config;

  { Pma_hpf2_config  }
  Pma_hpf2_config = ^ma_hpf2_config;

  { ma_hpf1  }
  ma_hpf1 = record
    format: ma_format;
    channels: ma_uint32;
    a: ma_biquad_coefficient;
    pR1: Pma_biquad_coefficient;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_hpf2  }
  ma_hpf2 = record
    bq: ma_biquad;
  end;

  { ma_hpf_config  }
  ma_hpf_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    cutoffFrequency: Double;
    order: ma_uint32;
  end;

  { ma_hpf  }
  ma_hpf = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    hpf1Count: ma_uint32;
    hpf2Count: ma_uint32;
    pHPF1: Pma_hpf1;
    pHPF2: Pma_hpf2;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_bpf2_config  }
  ma_bpf2_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    cutoffFrequency: Double;
    q: Double;
  end;

  { ma_bpf2  }
  ma_bpf2 = record
    bq: ma_biquad;
  end;

  { ma_bpf_config  }
  ma_bpf_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    cutoffFrequency: Double;
    order: ma_uint32;
  end;

  { ma_bpf  }
  ma_bpf = record
    format: ma_format;
    channels: ma_uint32;
    bpf2Count: ma_uint32;
    pBPF2: Pma_bpf2;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_notch2_config  }
  ma_notch2_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    q: Double;
    frequency: Double;
  end;

  { ma_notch_config  }
  ma_notch_config = ma_notch2_config;

  { Pma_notch_config  }
  Pma_notch_config = ^ma_notch_config;

  { ma_notch2  }
  ma_notch2 = record
    bq: ma_biquad;
  end;

  { ma_peak2_config  }
  ma_peak2_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    gainDB: Double;
    q: Double;
    frequency: Double;
  end;

  { ma_peak_config  }
  ma_peak_config = ma_peak2_config;

  { Pma_peak_config  }
  Pma_peak_config = ^ma_peak_config;

  { ma_peak2  }
  ma_peak2 = record
    bq: ma_biquad;
  end;

  { ma_loshelf2_config  }
  ma_loshelf2_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    gainDB: Double;
    shelfSlope: Double;
    frequency: Double;
  end;

  { ma_loshelf_config  }
  ma_loshelf_config = ma_loshelf2_config;

  { Pma_loshelf_config  }
  Pma_loshelf_config = ^ma_loshelf_config;

  { ma_loshelf2  }
  ma_loshelf2 = record
    bq: ma_biquad;
  end;

  { ma_hishelf2_config  }
  ma_hishelf2_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    gainDB: Double;
    shelfSlope: Double;
    frequency: Double;
  end;

  { ma_hishelf_config  }
  ma_hishelf_config = ma_hishelf2_config;

  { Pma_hishelf_config  }
  Pma_hishelf_config = ^ma_hishelf_config;

  { ma_hishelf2  }
  ma_hishelf2 = record
    bq: ma_biquad;
  end;

  { ma_delay_config  }
  ma_delay_config = record
    channels: ma_uint32;
    sampleRate: ma_uint32;
    delayInFrames: ma_uint32;
    delayStart: ma_bool32;
    wet: Single;
    dry: Single;
    decay: Single;
  end;

  { ma_delay  }
  ma_delay = record
    config: ma_delay_config;
    cursor: ma_uint32;
    bufferSizeInFrames: ma_uint32;
    pBuffer: PSingle;
  end;

  { ma_gainer_config  }
  ma_gainer_config = record
    channels: ma_uint32;
    smoothTimeInFrames: ma_uint32;
  end;

  { ma_gainer  }
  ma_gainer = record
    config: ma_gainer_config;
    t: ma_uint32;
    pOldGains: PSingle;
    pNewGains: PSingle;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_panner_config  }
  ma_panner_config = record
    format: ma_format;
    channels: ma_uint32;
    mode: ma_pan_mode;
    pan: Single;
  end;

  { ma_panner  }
  ma_panner = record
    format: ma_format;
    channels: ma_uint32;
    mode: ma_pan_mode;
    pan: Single;
  end;

  { ma_fader_config  }
  ma_fader_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
  end;

  { ma_fader  }
  ma_fader = record
    config: ma_fader_config;
    volumeBeg: Single;
    volumeEnd: Single;
    lengthInFrames: ma_uint64;
    cursorInFrames: ma_uint64;
  end;

  { ma_vec3f  }
  ma_vec3f = record
    x: Single;
    y: Single;
    z: Single;
  end;

  { ma_spatializer_listener_config  }
  ma_spatializer_listener_config = record
    channelsOut: ma_uint32;
    pChannelMapOut: Pma_channel;
    handedness: ma_handedness;
    coneInnerAngleInRadians: Single;
    coneOuterAngleInRadians: Single;
    coneOuterGain: Single;
    speedOfSound: Single;
    worldUp: ma_vec3f;
  end;

  { ma_spatializer_listener  }
  ma_spatializer_listener = record
    config: ma_spatializer_listener_config;
    position: ma_vec3f;
    direction: ma_vec3f;
    velocity: ma_vec3f;
    isEnabled: ma_bool32;
    _ownsHeap: ma_bool32;
    _pHeap: Pointer;
  end;

  { ma_spatializer_config  }
  ma_spatializer_config = record
    channelsIn: ma_uint32;
    channelsOut: ma_uint32;
    pChannelMapIn: Pma_channel;
    attenuationModel: ma_attenuation_model;
    positioning: ma_positioning;
    handedness: ma_handedness;
    minGain: Single;
    maxGain: Single;
    minDistance: Single;
    maxDistance: Single;
    rolloff: Single;
    coneInnerAngleInRadians: Single;
    coneOuterAngleInRadians: Single;
    coneOuterGain: Single;
    dopplerFactor: Single;
    directionalAttenuationFactor: Single;
    gainSmoothTimeInFrames: ma_uint32;
  end;

  { ma_spatializer  }
  ma_spatializer = record
    config: ma_spatializer_config;
    position: ma_vec3f;
    direction: ma_vec3f;
    velocity: ma_vec3f;
    dopplerPitch: Single;
    gainer: ma_gainer;
    pNewChannelGainsOut: PSingle;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_linear_resampler_config  }
  ma_linear_resampler_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRateIn: ma_uint32;
    sampleRateOut: ma_uint32;
    lpfOrder: ma_uint32;
    lpfNyquistFactor: Double;
  end;

  { _anonymous_type_20  }
  _anonymous_type_20 = record
    case Integer of
      0: (f32: PSingle);
      1: (s16: Pma_int16);
  end;

  { P_anonymous_type_20  }
  P_anonymous_type_20 = ^_anonymous_type_20;

  { _anonymous_type_21  }
  _anonymous_type_21 = record
    case Integer of
      0: (f32: PSingle);
      1: (s16: Pma_int16);
  end;

  { P_anonymous_type_21  }
  P_anonymous_type_21 = ^_anonymous_type_21;

  { ma_linear_resampler  }
  ma_linear_resampler = record
    config: ma_linear_resampler_config;
    inAdvanceInt: ma_uint32;
    inAdvanceFrac: ma_uint32;
    inTimeInt: ma_uint32;
    inTimeFrac: ma_uint32;
    x0: _anonymous_type_20;
    x1: _anonymous_type_21;
    lpf: ma_lpf;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { Pma_resampling_backend  }
  Pma_resampling_backend = Pointer;

  { PPma_resampling_backend  }
  PPma_resampling_backend = ^Pma_resampling_backend;

  { ma_resampling_backend_vtable  }
  ma_resampling_backend_vtable = record
    onGetHeapSize: function(pUserData: Pointer; const pConfig: Pma_resampler_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
    onInit: function(pUserData: Pointer; const pConfig: Pma_resampler_config; pHeap: Pointer; ppBackend: PPma_resampling_backend): ma_result; cdecl;
    onUninit: procedure(pUserData: Pointer; pBackend: Pma_resampling_backend; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
    onProcess: function(pUserData: Pointer; pBackend: Pma_resampling_backend; const pFramesIn: Pointer; pFrameCountIn: Pma_uint64; pFramesOut: Pointer; pFrameCountOut: Pma_uint64): ma_result; cdecl;
    onSetRate: function(pUserData: Pointer; pBackend: Pma_resampling_backend; sampleRateIn: ma_uint32; sampleRateOut: ma_uint32): ma_result; cdecl;
    onGetInputLatency: function(pUserData: Pointer; const pBackend: Pma_resampling_backend): ma_uint64; cdecl;
    onGetOutputLatency: function(pUserData: Pointer; const pBackend: Pma_resampling_backend): ma_uint64; cdecl;
    onGetRequiredInputFrameCount: function(pUserData: Pointer; const pBackend: Pma_resampling_backend; outputFrameCount: ma_uint64; pInputFrameCount: Pma_uint64): ma_result; cdecl;
    onGetExpectedOutputFrameCount: function(pUserData: Pointer; const pBackend: Pma_resampling_backend; inputFrameCount: ma_uint64; pOutputFrameCount: Pma_uint64): ma_result; cdecl;
  end;

  { _anonymous_type_22  }
  _anonymous_type_22 = record
    lpfOrder: ma_uint32;
  end;

  { P_anonymous_type_22  }
  P_anonymous_type_22 = ^_anonymous_type_22;

  { ma_resampler_config  }
  ma_resampler_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRateIn: ma_uint32;
    sampleRateOut: ma_uint32;
    algorithm: ma_resample_algorithm;
    pBackendVTable: Pma_resampling_backend_vtable;
    pBackendUserData: Pointer;
    linear: _anonymous_type_22;
  end;

  { _anonymous_type_23  }
  _anonymous_type_23 = record
    case Integer of
      0: (linear: ma_linear_resampler);
  end;

  { P_anonymous_type_23  }
  P_anonymous_type_23 = ^_anonymous_type_23;

  { ma_resampler  }
  ma_resampler = record
    pBackend: Pma_resampling_backend;
    pBackendVTable: Pma_resampling_backend_vtable;
    pBackendUserData: Pointer;
    format: ma_format;
    channels: ma_uint32;
    sampleRateIn: ma_uint32;
    sampleRateOut: ma_uint32;
    state: _anonymous_type_23;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_channel_converter_config  }
  ma_channel_converter_config = record
    format: ma_format;
    channelsIn: ma_uint32;
    channelsOut: ma_uint32;
    pChannelMapIn: Pma_channel;
    pChannelMapOut: Pma_channel;
    mixingMode: ma_channel_mix_mode;
    ppWeights: PPSingle;
  end;

  { _anonymous_type_24  }
  _anonymous_type_24 = record
    case Integer of
      0: (f32: PPSingle);
      1: (s16: PPma_int32);
  end;

  { P_anonymous_type_24  }
  P_anonymous_type_24 = ^_anonymous_type_24;

  { ma_channel_converter  }
  ma_channel_converter = record
    format: ma_format;
    channelsIn: ma_uint32;
    channelsOut: ma_uint32;
    mixingMode: ma_channel_mix_mode;
    conversionPath: ma_channel_conversion_path;
    pChannelMapIn: Pma_channel;
    pChannelMapOut: Pma_channel;
    pShuffleTable: Pma_uint8;
    weights: _anonymous_type_24;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_data_converter_config  }
  ma_data_converter_config = record
    formatIn: ma_format;
    formatOut: ma_format;
    channelsIn: ma_uint32;
    channelsOut: ma_uint32;
    sampleRateIn: ma_uint32;
    sampleRateOut: ma_uint32;
    pChannelMapIn: Pma_channel;
    pChannelMapOut: Pma_channel;
    ditherMode: ma_dither_mode;
    channelMixMode: ma_channel_mix_mode;
    ppChannelWeights: PPSingle;
    allowDynamicSampleRate: ma_bool32;
    resampling: ma_resampler_config;
  end;

  { ma_data_converter  }
  ma_data_converter = record
    formatIn: ma_format;
    formatOut: ma_format;
    channelsIn: ma_uint32;
    channelsOut: ma_uint32;
    sampleRateIn: ma_uint32;
    sampleRateOut: ma_uint32;
    ditherMode: ma_dither_mode;
    executionPath: ma_data_converter_execution_path;
    channelConverter: ma_channel_converter;
    resampler: ma_resampler;
    hasPreFormatConversion: ma_bool8;
    hasPostFormatConversion: ma_bool8;
    hasChannelConverter: ma_bool8;
    hasResampler: ma_bool8;
    isPassthrough: ma_bool8;
    _ownsHeap: ma_bool8;
    _pHeap: Pointer;
  end;

  { ma_rb  }
  ma_rb = record
    pBuffer: Pointer;
    subbufferSizeInBytes: ma_uint32;
    subbufferCount: ma_uint32;
    subbufferStrideInBytes: ma_uint32;
    encodedReadOffset: ma_uint32;
    encodedWriteOffset: ma_uint32;
    ownsBuffer: ma_bool8;
    clearOnWriteAcquire: ma_bool8;
    allocationCallbacks: ma_allocation_callbacks;
  end;

  { ma_pcm_rb  }
  ma_pcm_rb = record
    rb: ma_rb;
    format: ma_format;
    channels: ma_uint32;
  end;

  { ma_duplex_rb  }
  ma_duplex_rb = record
    rb: ma_pcm_rb;
  end;

  { ma_IMMNotificationClient  }
  ma_IMMNotificationClient = record
    lpVtbl: Pointer;
    counter: ma_uint32;
    pDevice: Pma_device;
  end;

  { ma_device_data_proc  }
  ma_device_data_proc = procedure(pDevice: Pma_device; pOutput: Pointer; const pInput: Pointer; frameCount: ma_uint32); cdecl;

  { ma_stop_proc  }
  ma_stop_proc = procedure(pDevice: Pma_device); cdecl;

  { ma_timer  }
  ma_timer = record
    case Integer of
      0: (counter: ma_int64);
      1: (counterD: Double);
  end;

  { _anonymous_type_25  }
  _anonymous_type_25 = record
    case Integer of
      0: (i: Integer);
      1: (s: array [0..255] of UTF8Char);
      2: (p: Pointer);
  end;

  { P_anonymous_type_25  }
  P_anonymous_type_25 = ^_anonymous_type_25;

  { Pma_device_id  }
  Pma_device_id = ^ma_device_id;

  { ma_device_id  }
  ma_device_id = record
    case Integer of
      0: (wasapi: array [0..63] of WideChar);
      1: (dsound: array [0..15] of ma_uint8);
      2: (winmm: ma_uint32);
      3: (alsa: array [0..255] of UTF8Char);
      4: (pulse: array [0..255] of UTF8Char);
      5: (jack: Integer);
      6: (coreaudio: array [0..255] of UTF8Char);
      7: (sndio: array [0..255] of UTF8Char);
      8: (audio4: array [0..255] of UTF8Char);
      9: (oss: array [0..63] of UTF8Char);
      10: (aaudio: ma_int32);
      11: (opensl: ma_uint32);
      12: (webaudio: array [0..31] of UTF8Char);
      13: (custom: _anonymous_type_25);
      14: (nullbackend: Integer);
  end;

  { _anonymous_type_26  }
  _anonymous_type_26 = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    flags: ma_uint32;
  end;

  { P_anonymous_type_26  }
  P_anonymous_type_26 = ^_anonymous_type_26;

  { ma_device_info  }
  ma_device_info = record
    id: ma_device_id;
    name: array [0..255] of UTF8Char;
    isDefault: ma_bool32;
    nativeDataFormatCount: ma_uint32;
    nativeDataFormats: array [0..63] of _anonymous_type_26;
  end;

  { _anonymous_type_27  }
  _anonymous_type_27 = record
    pDeviceID: Pma_device_id;
    format: ma_format;
    channels: ma_uint32;
    pChannelMap: Pma_channel;
    channelMixMode: ma_channel_mix_mode;
    shareMode: ma_share_mode;
  end;

  { P_anonymous_type_27  }
  P_anonymous_type_27 = ^_anonymous_type_27;

  { _anonymous_type_28  }
  _anonymous_type_28 = record
    pDeviceID: Pma_device_id;
    format: ma_format;
    channels: ma_uint32;
    pChannelMap: Pma_channel;
    channelMixMode: ma_channel_mix_mode;
    shareMode: ma_share_mode;
  end;

  { P_anonymous_type_28  }
  P_anonymous_type_28 = ^_anonymous_type_28;

  { _anonymous_type_29  }
  _anonymous_type_29 = record
    noAutoConvertSRC: ma_bool8;
    noDefaultQualitySRC: ma_bool8;
    noAutoStreamRouting: ma_bool8;
    noHardwareOffloading: ma_bool8;
  end;

  { P_anonymous_type_29  }
  P_anonymous_type_29 = ^_anonymous_type_29;

  { _anonymous_type_30  }
  _anonymous_type_30 = record
    noMMap: ma_bool32;
    noAutoFormat: ma_bool32;
    noAutoChannels: ma_bool32;
    noAutoResample: ma_bool32;
  end;

  { P_anonymous_type_30  }
  P_anonymous_type_30 = ^_anonymous_type_30;

  { _anonymous_type_31  }
  _anonymous_type_31 = record
    pStreamNamePlayback: PUTF8Char;
    pStreamNameCapture: PUTF8Char;
  end;

  { P_anonymous_type_31  }
  P_anonymous_type_31 = ^_anonymous_type_31;

  { _anonymous_type_32  }
  _anonymous_type_32 = record
    allowNominalSampleRateChange: ma_bool32;
  end;

  { P_anonymous_type_32  }
  P_anonymous_type_32 = ^_anonymous_type_32;

  { _anonymous_type_33  }
  _anonymous_type_33 = record
    streamType: ma_opensl_stream_type;
    recordingPreset: ma_opensl_recording_preset;
  end;

  { P_anonymous_type_33  }
  P_anonymous_type_33 = ^_anonymous_type_33;

  { _anonymous_type_34  }
  _anonymous_type_34 = record
    usage: ma_aaudio_usage;
    contentType: ma_aaudio_content_type;
    inputPreset: ma_aaudio_input_preset;
  end;

  { P_anonymous_type_34  }
  P_anonymous_type_34 = ^_anonymous_type_34;

  { ma_device_config  }
  ma_device_config = record
    deviceType: ma_device_type;
    sampleRate: ma_uint32;
    periodSizeInFrames: ma_uint32;
    periodSizeInMilliseconds: ma_uint32;
    periods: ma_uint32;
    performanceProfile: ma_performance_profile;
    noPreSilencedOutputBuffer: ma_bool8;
    noClip: ma_bool8;
    noDisableDenormals: ma_bool8;
    dataCallback: ma_device_data_proc;
    stopCallback: ma_stop_proc;
    pUserData: Pointer;
    resampling: ma_resampler_config;
    playback: _anonymous_type_27;
    capture: _anonymous_type_28;
    wasapi: _anonymous_type_29;
    alsa: _anonymous_type_30;
    pulse: _anonymous_type_31;
    coreaudio: _anonymous_type_32;
    opensl: _anonymous_type_33;
    aaudio: _anonymous_type_34;
  end;

  { ma_enum_devices_callback_proc  }
  ma_enum_devices_callback_proc = function(pContext: Pma_context; deviceType: ma_device_type; const pInfo: Pma_device_info; pUserData: Pointer): ma_bool32; cdecl;

  { ma_device_descriptor  }
  ma_device_descriptor = record
    pDeviceID: Pma_device_id;
    shareMode: ma_share_mode;
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    channelMap: array [0..253] of ma_channel;
    periodSizeInFrames: ma_uint32;
    periodSizeInMilliseconds: ma_uint32;
    periodCount: ma_uint32;
  end;

  { ma_backend_callbacks  }
  ma_backend_callbacks = record
    onContextInit: function(pContext: Pma_context; const pConfig: Pma_context_config; pCallbacks: Pma_backend_callbacks): ma_result; cdecl;
    onContextUninit: function(pContext: Pma_context): ma_result; cdecl;
    onContextEnumerateDevices: function(pContext: Pma_context; callback: ma_enum_devices_callback_proc; pUserData: Pointer): ma_result; cdecl;
    onContextGetDeviceInfo: function(pContext: Pma_context; deviceType: ma_device_type; const pDeviceID: Pma_device_id; pDeviceInfo: Pma_device_info): ma_result; cdecl;
    onDeviceInit: function(pDevice: Pma_device; const pConfig: Pma_device_config; pDescriptorPlayback: Pma_device_descriptor; pDescriptorCapture: Pma_device_descriptor): ma_result; cdecl;
    onDeviceUninit: function(pDevice: Pma_device): ma_result; cdecl;
    onDeviceStart: function(pDevice: Pma_device): ma_result; cdecl;
    onDeviceStop: function(pDevice: Pma_device): ma_result; cdecl;
    onDeviceRead: function(pDevice: Pma_device; pFrames: Pointer; frameCount: ma_uint32; pFramesRead: Pma_uint32): ma_result; cdecl;
    onDeviceWrite: function(pDevice: Pma_device; const pFrames: Pointer; frameCount: ma_uint32; pFramesWritten: Pma_uint32): ma_result; cdecl;
    onDeviceDataLoop: function(pDevice: Pma_device): ma_result; cdecl;
    onDeviceDataLoopWakeup: function(pDevice: Pma_device): ma_result; cdecl;
    onDeviceGetInfo: function(pDevice: Pma_device; _type: ma_device_type; pDeviceInfo: Pma_device_info): ma_result; cdecl;
  end;

  { _anonymous_type_35  }
  _anonymous_type_35 = record
    useVerboseDeviceEnumeration: ma_bool32;
  end;

  { P_anonymous_type_35  }
  P_anonymous_type_35 = ^_anonymous_type_35;

  { _anonymous_type_36  }
  _anonymous_type_36 = record
    pApplicationName: PUTF8Char;
    pServerName: PUTF8Char;
    tryAutoSpawn: ma_bool32;
  end;

  { P_anonymous_type_36  }
  P_anonymous_type_36 = ^_anonymous_type_36;

  { _anonymous_type_37  }
  _anonymous_type_37 = record
    sessionCategory: ma_ios_session_category;
    sessionCategoryOptions: ma_uint32;
    noAudioSessionActivate: ma_bool32;
    noAudioSessionDeactivate: ma_bool32;
  end;

  { P_anonymous_type_37  }
  P_anonymous_type_37 = ^_anonymous_type_37;

  { _anonymous_type_38  }
  _anonymous_type_38 = record
    pClientName: PUTF8Char;
    tryStartServer: ma_bool32;
  end;

  { P_anonymous_type_38  }
  P_anonymous_type_38 = ^_anonymous_type_38;

  { ma_context_config  }
  ma_context_config = record
    pLog: Pma_log;
    threadPriority: ma_thread_priority;
    threadStackSize: NativeUInt;
    pUserData: Pointer;
    allocationCallbacks: ma_allocation_callbacks;
    alsa: _anonymous_type_35;
    pulse: _anonymous_type_36;
    coreaudio: _anonymous_type_37;
    jack: _anonymous_type_38;
    custom: ma_backend_callbacks;
  end;

  { _anonymous_type_39  }
  _anonymous_type_39 = record
    _unused: Integer;
  end;

  { P_anonymous_type_39  }
  P_anonymous_type_39 = ^_anonymous_type_39;

  { _anonymous_type_40  }
  _anonymous_type_40 = record
    deviceType: ma_device_type;
    pAudioClient: Pointer;
    ppAudioClientService: PPointer;
    pResult: Pma_result;
  end;

  { P_anonymous_type_40  }
  P_anonymous_type_40 = ^_anonymous_type_40;

  { _anonymous_type_41  }
  _anonymous_type_41 = record
    pDevice: Pma_device;
    deviceType: ma_device_type;
  end;

  { P_anonymous_type_41  }
  P_anonymous_type_41 = ^_anonymous_type_41;

  { _anonymous_type_42  }
  _anonymous_type_42 = record
    case Integer of
      0: (quit: _anonymous_type_39);
      1: (createAudioClient: _anonymous_type_40);
      2: (releaseAudioClient: _anonymous_type_41);
  end;

  { P_anonymous_type_42  }
  P_anonymous_type_42 = ^_anonymous_type_42;

  { ma_context_command__wasapi  }
  ma_context_command__wasapi = record
    code: Integer;
    pEvent: Pma_event;
    data: _anonymous_type_42;
  end;

  { _anonymous_type_43  }
  _anonymous_type_43 = record
    commandThread: ma_thread;
    commandLock: ma_mutex;
    commandSem: ma_semaphore;
    commandIndex: ma_uint32;
    commandCount: ma_uint32;
    commands: array [0..3] of ma_context_command__wasapi;
  end;

  { P_anonymous_type_43  }
  P_anonymous_type_43 = ^_anonymous_type_43;

  { _anonymous_type_44  }
  _anonymous_type_44 = record
    hDSoundDLL: ma_handle;
    DirectSoundCreate: ma_proc;
    DirectSoundEnumerateA: ma_proc;
    DirectSoundCaptureCreate: ma_proc;
    DirectSoundCaptureEnumerateA: ma_proc;
  end;

  { P_anonymous_type_44  }
  P_anonymous_type_44 = ^_anonymous_type_44;

  { _anonymous_type_45  }
  _anonymous_type_45 = record
    hWinMM: ma_handle;
    waveOutGetNumDevs: ma_proc;
    waveOutGetDevCapsA: ma_proc;
    waveOutOpen: ma_proc;
    waveOutClose: ma_proc;
    waveOutPrepareHeader: ma_proc;
    waveOutUnprepareHeader: ma_proc;
    waveOutWrite: ma_proc;
    waveOutReset: ma_proc;
    waveInGetNumDevs: ma_proc;
    waveInGetDevCapsA: ma_proc;
    waveInOpen: ma_proc;
    waveInClose: ma_proc;
    waveInPrepareHeader: ma_proc;
    waveInUnprepareHeader: ma_proc;
    waveInAddBuffer: ma_proc;
    waveInStart: ma_proc;
    waveInReset: ma_proc;
  end;

  { P_anonymous_type_45  }
  P_anonymous_type_45 = ^_anonymous_type_45;

  { _anonymous_type_46  }
  _anonymous_type_46 = record
    jackSO: ma_handle;
    jack_client_open: ma_proc;
    jack_client_close: ma_proc;
    jack_client_name_size: ma_proc;
    jack_set_process_callback: ma_proc;
    jack_set_buffer_size_callback: ma_proc;
    jack_on_shutdown: ma_proc;
    jack_get_sample_rate: ma_proc;
    jack_get_buffer_size: ma_proc;
    jack_get_ports: ma_proc;
    jack_activate: ma_proc;
    jack_deactivate: ma_proc;
    jack_connect: ma_proc;
    jack_port_register: ma_proc;
    jack_port_name: ma_proc;
    jack_port_get_buffer: ma_proc;
    jack_free: ma_proc;
    pClientName: PUTF8Char;
    tryStartServer: ma_bool32;
  end;

  { P_anonymous_type_46  }
  P_anonymous_type_46 = ^_anonymous_type_46;

  { _anonymous_type_47  }
  _anonymous_type_47 = record
    _unused: Integer;
  end;

  { P_anonymous_type_47  }
  P_anonymous_type_47 = ^_anonymous_type_47;

  { _anonymous_type_48  }
  _anonymous_type_48 = record
    case Integer of
      0: (wasapi: _anonymous_type_43);
      1: (dsound: _anonymous_type_44);
      2: (winmm: _anonymous_type_45);
      3: (jack: _anonymous_type_46);
      4: (null_backend: _anonymous_type_47);
  end;

  { P_anonymous_type_48  }
  P_anonymous_type_48 = ^_anonymous_type_48;

  { _anonymous_type_49  }
  _anonymous_type_49 = record
    hOle32DLL: ma_handle;
    CoInitializeEx: ma_proc;
    CoUninitialize: ma_proc;
    CoCreateInstance: ma_proc;
    CoTaskMemFree: ma_proc;
    PropVariantClear: ma_proc;
    StringFromGUID2: ma_proc;
    hUser32DLL: ma_handle;
    GetForegroundWindow: ma_proc;
    GetDesktopWindow: ma_proc;
    hAdvapi32DLL: ma_handle;
    RegOpenKeyExA: ma_proc;
    RegCloseKey: ma_proc;
    RegQueryValueExA: ma_proc;
  end;

  { P_anonymous_type_49  }
  P_anonymous_type_49 = ^_anonymous_type_49;

  { _anonymous_type_50  }
  _anonymous_type_50 = record
    case Integer of
      0: (win32: _anonymous_type_49);
      1: (_unused: Integer);
  end;

  { P_anonymous_type_50  }
  P_anonymous_type_50 = ^_anonymous_type_50;

  { ma_context  }
  ma_context = record
    callbacks: ma_backend_callbacks;
    backend: ma_backend;
    pLog: Pma_log;
    log: ma_log;
    threadPriority: ma_thread_priority;
    threadStackSize: NativeUInt;
    pUserData: Pointer;
    allocationCallbacks: ma_allocation_callbacks;
    deviceEnumLock: ma_mutex;
    deviceInfoLock: ma_mutex;
    deviceInfoCapacity: ma_uint32;
    playbackDeviceInfoCount: ma_uint32;
    captureDeviceInfoCount: ma_uint32;
    pDeviceInfos: Pma_device_info;
    f15: _anonymous_type_48;
    f16: _anonymous_type_50;
  end;

  { _anonymous_type_51  }
  _anonymous_type_51 = record
    lpfOrder: ma_uint32;
  end;

  { P_anonymous_type_51  }
  P_anonymous_type_51 = ^_anonymous_type_51;

  { _anonymous_type_52  }
  _anonymous_type_52 = record
    algorithm: ma_resample_algorithm;
    pBackendVTable: Pma_resampling_backend_vtable;
    pBackendUserData: Pointer;
    linear: _anonymous_type_51;
  end;

  { P_anonymous_type_52  }
  P_anonymous_type_52 = ^_anonymous_type_52;

  { _anonymous_type_53  }
  _anonymous_type_53 = record
    id: ma_device_id;
    name: array [0..255] of UTF8Char;
    shareMode: ma_share_mode;
    format: ma_format;
    channels: ma_uint32;
    channelMap: array [0..253] of ma_channel;
    internalFormat: ma_format;
    internalChannels: ma_uint32;
    internalSampleRate: ma_uint32;
    internalChannelMap: array [0..253] of ma_channel;
    internalPeriodSizeInFrames: ma_uint32;
    internalPeriods: ma_uint32;
    channelMixMode: ma_channel_mix_mode;
    converter: ma_data_converter;
    pInputCache: Pointer;
    inputCacheCap: ma_uint64;
    inputCacheConsumed: ma_uint64;
    inputCacheRemaining: ma_uint64;
  end;

  { P_anonymous_type_53  }
  P_anonymous_type_53 = ^_anonymous_type_53;

  { _anonymous_type_54  }
  _anonymous_type_54 = record
    id: ma_device_id;
    name: array [0..255] of UTF8Char;
    shareMode: ma_share_mode;
    format: ma_format;
    channels: ma_uint32;
    channelMap: array [0..253] of ma_channel;
    internalFormat: ma_format;
    internalChannels: ma_uint32;
    internalSampleRate: ma_uint32;
    internalChannelMap: array [0..253] of ma_channel;
    internalPeriodSizeInFrames: ma_uint32;
    internalPeriods: ma_uint32;
    channelMixMode: ma_channel_mix_mode;
    converter: ma_data_converter;
  end;

  { P_anonymous_type_54  }
  P_anonymous_type_54 = ^_anonymous_type_54;

  { _anonymous_type_55  }
  _anonymous_type_55 = record
    pAudioClientPlayback: ma_ptr;
    pAudioClientCapture: ma_ptr;
    pRenderClient: ma_ptr;
    pCaptureClient: ma_ptr;
    pDeviceEnumerator: ma_ptr;
    notificationClient: ma_IMMNotificationClient;
    hEventPlayback: ma_handle;
    hEventCapture: ma_handle;
    actualPeriodSizeInFramesPlayback: ma_uint32;
    actualPeriodSizeInFramesCapture: ma_uint32;
    originalPeriodSizeInFrames: ma_uint32;
    originalPeriodSizeInMilliseconds: ma_uint32;
    originalPeriods: ma_uint32;
    originalPerformanceProfile: ma_performance_profile;
    periodSizeInFramesPlayback: ma_uint32;
    periodSizeInFramesCapture: ma_uint32;
    isStartedCapture: ma_bool32;
    isStartedPlayback: ma_bool32;
    noAutoConvertSRC: ma_bool8;
    noDefaultQualitySRC: ma_bool8;
    noHardwareOffloading: ma_bool8;
    allowCaptureAutoStreamRouting: ma_bool8;
    allowPlaybackAutoStreamRouting: ma_bool8;
    isDetachedPlayback: ma_bool8;
    isDetachedCapture: ma_bool8;
  end;

  { P_anonymous_type_55  }
  P_anonymous_type_55 = ^_anonymous_type_55;

  { _anonymous_type_56  }
  _anonymous_type_56 = record
    pPlayback: ma_ptr;
    pPlaybackPrimaryBuffer: ma_ptr;
    pPlaybackBuffer: ma_ptr;
    pCapture: ma_ptr;
    pCaptureBuffer: ma_ptr;
  end;

  { P_anonymous_type_56  }
  P_anonymous_type_56 = ^_anonymous_type_56;

  { _anonymous_type_57  }
  _anonymous_type_57 = record
    hDevicePlayback: ma_handle;
    hDeviceCapture: ma_handle;
    hEventPlayback: ma_handle;
    hEventCapture: ma_handle;
    fragmentSizeInFrames: ma_uint32;
    iNextHeaderPlayback: ma_uint32;
    iNextHeaderCapture: ma_uint32;
    headerFramesConsumedPlayback: ma_uint32;
    headerFramesConsumedCapture: ma_uint32;
    pWAVEHDRPlayback: Pma_uint8;
    pWAVEHDRCapture: Pma_uint8;
    pIntermediaryBufferPlayback: Pma_uint8;
    pIntermediaryBufferCapture: Pma_uint8;
    _pHeapData: Pma_uint8;
  end;

  { P_anonymous_type_57  }
  P_anonymous_type_57 = ^_anonymous_type_57;

  { _anonymous_type_58  }
  _anonymous_type_58 = record
    pClient: ma_ptr;
    ppPortsPlayback: Pma_ptr;
    ppPortsCapture: Pma_ptr;
    pIntermediaryBufferPlayback: PSingle;
    pIntermediaryBufferCapture: PSingle;
  end;

  { P_anonymous_type_58  }
  P_anonymous_type_58 = ^_anonymous_type_58;

  { _anonymous_type_59  }
  _anonymous_type_59 = record
    deviceThread: ma_thread;
    operationEvent: ma_event;
    operationCompletionEvent: ma_event;
    operationSemaphore: ma_semaphore;
    operation: ma_uint32;
    operationResult: ma_result;
    timer: ma_timer;
    priorRunTime: Double;
    currentPeriodFramesRemainingPlayback: ma_uint32;
    currentPeriodFramesRemainingCapture: ma_uint32;
    lastProcessedFramePlayback: ma_uint64;
    lastProcessedFrameCapture: ma_uint64;
    isStarted: ma_bool32;
  end;

  { P_anonymous_type_59  }
  P_anonymous_type_59 = ^_anonymous_type_59;

  { _anonymous_type_60  }
  _anonymous_type_60 = record
    case Integer of
      0: (wasapi: _anonymous_type_55);
      1: (dsound: _anonymous_type_56);
      2: (winmm: _anonymous_type_57);
      3: (jack: _anonymous_type_58);
      4: (null_device: _anonymous_type_59);
  end;

  { P_anonymous_type_60  }
  P_anonymous_type_60 = ^_anonymous_type_60;

  { ma_device  }
  ma_device = record
    pContext: Pma_context;
    _type: ma_device_type;
    sampleRate: ma_uint32;
    state: ma_device_state;
    onData: ma_device_data_proc;
    onStop: ma_stop_proc;
    pUserData: Pointer;
    startStopLock: ma_mutex;
    wakeupEvent: ma_event;
    startEvent: ma_event;
    stopEvent: ma_event;
    thread: ma_thread;
    workResult: ma_result;
    isOwnerOfContext: ma_bool8;
    noPreSilencedOutputBuffer: ma_bool8;
    noClip: ma_bool8;
    noDisableDenormals: ma_bool8;
    masterVolumeFactor: Single;
    duplexRB: ma_duplex_rb;
    resampling: _anonymous_type_52;
    playback: _anonymous_type_53;
    capture: _anonymous_type_54;
    f23: _anonymous_type_60;
  end;

  { ma_fence  }
  ma_fence = record
    e: ma_event;
    counter: ma_uint32;
  end;

  { Pma_async_notification  }
  Pma_async_notification = Pointer;

  { PPma_async_notification  }
  PPma_async_notification = ^Pma_async_notification;

  { ma_async_notification_callbacks  }
  ma_async_notification_callbacks = record
    onSignal: procedure(pNotification: Pma_async_notification); cdecl;
  end;

  { ma_async_notification_poll  }
  ma_async_notification_poll = record
    cb: ma_async_notification_callbacks;
    signalled: ma_bool32;
  end;

  { ma_async_notification_event  }
  ma_async_notification_event = record
    cb: ma_async_notification_callbacks;
    e: ma_event;
  end;

  { ma_slot_allocator_config  }
  ma_slot_allocator_config = record
    capacity: ma_uint32;
  end;

  { ma_slot_allocator_group  }
  ma_slot_allocator_group = record
    bitfield: ma_uint32;
  end;

  { ma_slot_allocator  }
  ma_slot_allocator = record
    pGroups: Pma_slot_allocator_group;
    pSlots: Pma_uint32;
    count: ma_uint32;
    capacity: ma_uint32;
    _ownsHeap: ma_bool32;
    _pHeap: Pointer;
  end;

  { Pma_data_source  }
  Pma_data_source = Pointer;

  { PPma_data_source  }
  PPma_data_source = ^Pma_data_source;

  { ma_data_source_vtable  }
  ma_data_source_vtable = record
    onRead: function(pDataSource: Pma_data_source; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
    onSeek: function(pDataSource: Pma_data_source; frameIndex: ma_uint64): ma_result; cdecl;
    onGetDataFormat: function(pDataSource: Pma_data_source; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
    onGetCursor: function(pDataSource: Pma_data_source; pCursor: Pma_uint64): ma_result; cdecl;
    onGetLength: function(pDataSource: Pma_data_source; pLength: Pma_uint64): ma_result; cdecl;
    onSetLooping: function(pDataSource: Pma_data_source; isLooping: ma_bool32): ma_result; cdecl;
    flags: ma_uint32;
  end;

  { ma_data_source_get_next_proc  }
  ma_data_source_get_next_proc = function(pDataSource: Pma_data_source): Pma_data_source; cdecl;

  { ma_data_source_config  }
  ma_data_source_config = record
    vtable: Pma_data_source_vtable;
  end;

  { ma_data_source_base  }
  ma_data_source_base = record
    vtable: Pma_data_source_vtable;
    rangeBegInFrames: ma_uint64;
    rangeEndInFrames: ma_uint64;
    loopBegInFrames: ma_uint64;
    loopEndInFrames: ma_uint64;
    pCurrent: Pma_data_source;
    pNext: Pma_data_source;
    onGetNext: ma_data_source_get_next_proc;
    isLooping: ma_bool32;
  end;

  { ma_audio_buffer_ref  }
  ma_audio_buffer_ref = record
    ds: ma_data_source_base;
    format: ma_format;
    channels: ma_uint32;
    cursor: ma_uint64;
    sizeInFrames: ma_uint64;
    pData: Pointer;
  end;

  { ma_audio_buffer_config  }
  ma_audio_buffer_config = record
    format: ma_format;
    channels: ma_uint32;
    sizeInFrames: ma_uint64;
    pData: Pointer;
    allocationCallbacks: ma_allocation_callbacks;
  end;

  { ma_audio_buffer  }
  ma_audio_buffer = record
    ref: ma_audio_buffer_ref;
    allocationCallbacks: ma_allocation_callbacks;
    ownsData: ma_bool32;
    _pExtraData: array [0..0] of ma_uint8;
  end;

  { ma_paged_audio_buffer_page  }
  ma_paged_audio_buffer_page = record
    pNext: Pma_paged_audio_buffer_page;
    sizeInFrames: ma_uint64;
    pAudioData: array [0..0] of ma_uint8;
  end;

  { ma_paged_audio_buffer_data  }
  ma_paged_audio_buffer_data = record
    format: ma_format;
    channels: ma_uint32;
    head: ma_paged_audio_buffer_page;
    pTail: Pma_paged_audio_buffer_page;
  end;

  { ma_paged_audio_buffer_config  }
  ma_paged_audio_buffer_config = record
    pData: Pma_paged_audio_buffer_data;
  end;

  { ma_paged_audio_buffer  }
  ma_paged_audio_buffer = record
    ds: ma_data_source_base;
    pData: Pma_paged_audio_buffer_data;
    pCurrent: Pma_paged_audio_buffer_page;
    relativeCursor: ma_uint64;
    absoluteCursor: ma_uint64;
  end;

  { Pma_vfs  }
  Pma_vfs = Pointer;

  { PPma_vfs  }
  PPma_vfs = ^Pma_vfs;

  { ma_vfs_file  }
  ma_vfs_file = ma_handle;

  { Pma_vfs_file  }
  Pma_vfs_file = ^ma_vfs_file;

  { ma_file_info  }
  ma_file_info = record
    sizeInBytes: ma_uint64;
  end;

  { ma_vfs_callbacks  }
  ma_vfs_callbacks = record
    onOpen: function(pVFS: Pma_vfs; const pFilePath: PUTF8Char; openMode: ma_uint32; pFile: Pma_vfs_file): ma_result; cdecl;
    onOpenW: function(pVFS: Pma_vfs; const pFilePath: PWideChar; openMode: ma_uint32; pFile: Pma_vfs_file): ma_result; cdecl;
    onClose: function(pVFS: Pma_vfs; _file: ma_vfs_file): ma_result; cdecl;
    onRead: function(pVFS: Pma_vfs; _file: ma_vfs_file; pDst: Pointer; sizeInBytes: NativeUInt; pBytesRead: PNativeUInt): ma_result; cdecl;
    onWrite: function(pVFS: Pma_vfs; _file: ma_vfs_file; const pSrc: Pointer; sizeInBytes: NativeUInt; pBytesWritten: PNativeUInt): ma_result; cdecl;
    onSeek: function(pVFS: Pma_vfs; _file: ma_vfs_file; offset: ma_int64; origin: ma_seek_origin): ma_result; cdecl;
    onTell: function(pVFS: Pma_vfs; _file: ma_vfs_file; pCursor: Pma_int64): ma_result; cdecl;
    onInfo: function(pVFS: Pma_vfs; _file: ma_vfs_file; pInfo: Pma_file_info): ma_result; cdecl;
  end;

  { ma_default_vfs  }
  ma_default_vfs = record
    cb: ma_vfs_callbacks;
    allocationCallbacks: ma_allocation_callbacks;
  end;

  { ma_read_proc  }
  ma_read_proc = function(pUserData: Pointer; pBufferOut: Pointer; bytesToRead: NativeUInt; pBytesRead: PNativeUInt): ma_result; cdecl;

  { ma_seek_proc  }
  ma_seek_proc = function(pUserData: Pointer; offset: ma_int64; origin: ma_seek_origin): ma_result; cdecl;

  { ma_tell_proc  }
  ma_tell_proc = function(pUserData: Pointer; pCursor: Pma_int64): ma_result; cdecl;

  { ma_decoding_backend_config  }
  ma_decoding_backend_config = record
    preferredFormat: ma_format;
    seekPointCount: ma_uint32;
  end;

  { ma_decoding_backend_vtable  }
  ma_decoding_backend_vtable = record
    onInit: function(pUserData: Pointer; onRead: ma_read_proc; onSeek: ma_seek_proc; onTell: ma_tell_proc; pReadSeekTellUserData: Pointer; const pConfig: Pma_decoding_backend_config; const pAllocationCallbacks: Pma_allocation_callbacks; ppBackend: PPma_data_source): ma_result; cdecl;
    onInitFile: function(pUserData: Pointer; const pFilePath: PUTF8Char; const pConfig: Pma_decoding_backend_config; const pAllocationCallbacks: Pma_allocation_callbacks; ppBackend: PPma_data_source): ma_result; cdecl;
    onInitFileW: function(pUserData: Pointer; const pFilePath: PWideChar; const pConfig: Pma_decoding_backend_config; const pAllocationCallbacks: Pma_allocation_callbacks; ppBackend: PPma_data_source): ma_result; cdecl;
    onInitMemory: function(pUserData: Pointer; const pData: Pointer; dataSize: NativeUInt; const pConfig: Pma_decoding_backend_config; const pAllocationCallbacks: Pma_allocation_callbacks; ppBackend: PPma_data_source): ma_result; cdecl;
    onUninit: procedure(pUserData: Pointer; pBackend: Pma_data_source; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  end;

  { ma_decoder_read_proc  }
  ma_decoder_read_proc = function(pDecoder: Pma_decoder; pBufferOut: Pointer; bytesToRead: NativeUInt; pBytesRead: PNativeUInt): ma_result; cdecl;

  { ma_decoder_seek_proc  }
  ma_decoder_seek_proc = function(pDecoder: Pma_decoder; byteOffset: ma_int64; origin: ma_seek_origin): ma_result; cdecl;

  { ma_decoder_tell_proc  }
  ma_decoder_tell_proc = function(pDecoder: Pma_decoder; pCursor: Pma_int64): ma_result; cdecl;

  { ma_decoder_config  }
  ma_decoder_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    pChannelMap: Pma_channel;
    channelMixMode: ma_channel_mix_mode;
    ditherMode: ma_dither_mode;
    resampling: ma_resampler_config;
    allocationCallbacks: ma_allocation_callbacks;
    encodingFormat: ma_encoding_format;
    seekPointCount: ma_uint32;
    ppCustomBackendVTables: PPma_decoding_backend_vtable;
    customBackendCount: ma_uint32;
    pCustomBackendUserData: Pointer;
  end;

  { _anonymous_type_61  }
  _anonymous_type_61 = record
    pVFS: Pma_vfs;
    _file: ma_vfs_file;
  end;

  { P_anonymous_type_61  }
  P_anonymous_type_61 = ^_anonymous_type_61;

  { _anonymous_type_62  }
  _anonymous_type_62 = record
    pData: Pma_uint8;
    dataSize: NativeUInt;
    currentReadPos: NativeUInt;
  end;

  { P_anonymous_type_62  }
  P_anonymous_type_62 = ^_anonymous_type_62;

  { _anonymous_type_63  }
  _anonymous_type_63 = record
    case Integer of
      0: (vfs: _anonymous_type_61);
      1: (memory: _anonymous_type_62);
  end;

  { P_anonymous_type_63  }
  P_anonymous_type_63 = ^_anonymous_type_63;

  { ma_decoder  }
  ma_decoder = record
    ds: ma_data_source_base;
    pBackend: Pma_data_source;
    pBackendVTable: Pma_decoding_backend_vtable;
    pBackendUserData: Pointer;
    onRead: ma_decoder_read_proc;
    onSeek: ma_decoder_seek_proc;
    onTell: ma_decoder_tell_proc;
    pUserData: Pointer;
    readPointerInPCMFrames: ma_uint64;
    outputFormat: ma_format;
    outputChannels: ma_uint32;
    outputSampleRate: ma_uint32;
    converter: ma_data_converter;
    pInputCache: Pointer;
    inputCacheCap: ma_uint64;
    inputCacheConsumed: ma_uint64;
    inputCacheRemaining: ma_uint64;
    allocationCallbacks: ma_allocation_callbacks;
    data: _anonymous_type_63;
  end;

  { ma_encoder_write_proc  }
  ma_encoder_write_proc = function(pEncoder: Pma_encoder; const pBufferIn: Pointer; bytesToWrite: NativeUInt): NativeUInt; cdecl;

  { ma_encoder_seek_proc  }
  ma_encoder_seek_proc = function(pEncoder: Pma_encoder; byteOffset: Integer; origin: ma_seek_origin): ma_bool32; cdecl;

  { ma_encoder_init_proc  }
  ma_encoder_init_proc = function(pEncoder: Pma_encoder): ma_result; cdecl;

  { ma_encoder_uninit_proc  }
  ma_encoder_uninit_proc = procedure(pEncoder: Pma_encoder); cdecl;

  { ma_encoder_write_pcm_frames_proc  }
  ma_encoder_write_pcm_frames_proc = function(pEncoder: Pma_encoder; const pFramesIn: Pointer; frameCount: ma_uint64; pFramesWritten: Pma_uint64): ma_result; cdecl;

  { ma_encoder_config  }
  ma_encoder_config = record
    encodingFormat: ma_encoding_format;
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    allocationCallbacks: ma_allocation_callbacks;
  end;

  { ma_encoder  }
  ma_encoder = record
    config: ma_encoder_config;
    onWrite: ma_encoder_write_proc;
    onSeek: ma_encoder_seek_proc;
    onInit: ma_encoder_init_proc;
    onUninit: ma_encoder_uninit_proc;
    onWritePCMFrames: ma_encoder_write_pcm_frames_proc;
    pUserData: Pointer;
    pInternalEncoder: Pointer;
    pFile: Pointer;
  end;

  { ma_waveform_config  }
  ma_waveform_config = record
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    _type: ma_waveform_type;
    amplitude: Double;
    frequency: Double;
  end;

  { ma_waveform  }
  ma_waveform = record
    ds: ma_data_source_base;
    config: ma_waveform_config;
    advance: Double;
    time: Double;
  end;

  { ma_noise_config  }
  ma_noise_config = record
    format: ma_format;
    channels: ma_uint32;
    _type: ma_noise_type;
    seed: ma_int32;
    amplitude: Double;
    duplicateChannels: ma_bool32;
  end;

  { _anonymous_type_64  }
  _anonymous_type_64 = record
    bin: PPDouble;
    accumulation: PDouble;
    counter: Pma_uint32;
  end;

  { P_anonymous_type_64  }
  P_anonymous_type_64 = ^_anonymous_type_64;

  { _anonymous_type_65  }
  _anonymous_type_65 = record
    accumulation: PDouble;
  end;

  { P_anonymous_type_65  }
  P_anonymous_type_65 = ^_anonymous_type_65;

  { _anonymous_type_66  }
  _anonymous_type_66 = record
    case Integer of
      0: (pink: _anonymous_type_64);
      1: (brownian: _anonymous_type_65);
  end;

  { P_anonymous_type_66  }
  P_anonymous_type_66 = ^_anonymous_type_66;

  { ma_noise  }
  ma_noise = record
    ds: ma_data_source_vtable;
    config: ma_noise_config;
    lcg: ma_lcg;
    state: _anonymous_type_66;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_resource_manager_pipeline_stage_notification  }
  ma_resource_manager_pipeline_stage_notification = record
    pNotification: Pma_async_notification;
    pFence: Pma_fence;
  end;

  { ma_resource_manager_pipeline_notifications  }
  ma_resource_manager_pipeline_notifications = record
    init: ma_resource_manager_pipeline_stage_notification;
    done: ma_resource_manager_pipeline_stage_notification;
  end;

  { _anonymous_type_67  }
  _anonymous_type_67 = record
    code: ma_uint16;
    slot: ma_uint16;
    refcount: ma_uint32;
  end;

  { P_anonymous_type_67  }
  P_anonymous_type_67 = ^_anonymous_type_67;

  { _anonymous_type_68  }
  _anonymous_type_68 = record
    case Integer of
      0: (breakup: _anonymous_type_67);
      1: (allocation: ma_uint64);
  end;

  { P_anonymous_type_68  }
  P_anonymous_type_68 = ^_anonymous_type_68;

  { _anonymous_type_69  }
  _anonymous_type_69 = record
    pDataBufferNode: Pma_resource_manager_data_buffer_node;
    pFilePath: PUTF8Char;
    pFilePathW: PWideChar;
    decode: ma_bool32;
    pInitNotification: Pma_async_notification;
    pDoneNotification: Pma_async_notification;
    pInitFence: Pma_fence;
    pDoneFence: Pma_fence;
  end;

  { P_anonymous_type_69  }
  P_anonymous_type_69 = ^_anonymous_type_69;

  { _anonymous_type_70  }
  _anonymous_type_70 = record
    pDataBufferNode: Pma_resource_manager_data_buffer_node;
    pDoneNotification: Pma_async_notification;
    pDoneFence: Pma_fence;
  end;

  { P_anonymous_type_70  }
  P_anonymous_type_70 = ^_anonymous_type_70;

  { _anonymous_type_71  }
  _anonymous_type_71 = record
    pDataBufferNode: Pma_resource_manager_data_buffer_node;
    pDecoder: Pma_decoder;
    pDoneNotification: Pma_async_notification;
    pDoneFence: Pma_fence;
  end;

  { P_anonymous_type_71  }
  P_anonymous_type_71 = ^_anonymous_type_71;

  { _anonymous_type_72  }
  _anonymous_type_72 = record
    pDataBuffer: Pma_resource_manager_data_buffer;
    pInitNotification: Pma_async_notification;
    pDoneNotification: Pma_async_notification;
    pInitFence: Pma_fence;
    pDoneFence: Pma_fence;
  end;

  { P_anonymous_type_72  }
  P_anonymous_type_72 = ^_anonymous_type_72;

  { _anonymous_type_73  }
  _anonymous_type_73 = record
    pDataBuffer: Pma_resource_manager_data_buffer;
    pDoneNotification: Pma_async_notification;
    pDoneFence: Pma_fence;
  end;

  { P_anonymous_type_73  }
  P_anonymous_type_73 = ^_anonymous_type_73;

  { _anonymous_type_74  }
  _anonymous_type_74 = record
    pDataStream: Pma_resource_manager_data_stream;
    pFilePath: PUTF8Char;
    pFilePathW: PWideChar;
    initialSeekPoint: ma_uint64;
    pInitNotification: Pma_async_notification;
    pInitFence: Pma_fence;
  end;

  { P_anonymous_type_74  }
  P_anonymous_type_74 = ^_anonymous_type_74;

  { _anonymous_type_75  }
  _anonymous_type_75 = record
    pDataStream: Pma_resource_manager_data_stream;
    pDoneNotification: Pma_async_notification;
    pDoneFence: Pma_fence;
  end;

  { P_anonymous_type_75  }
  P_anonymous_type_75 = ^_anonymous_type_75;

  { _anonymous_type_76  }
  _anonymous_type_76 = record
    pDataStream: Pma_resource_manager_data_stream;
    pageIndex: ma_uint32;
  end;

  { P_anonymous_type_76  }
  P_anonymous_type_76 = ^_anonymous_type_76;

  { _anonymous_type_77  }
  _anonymous_type_77 = record
    pDataStream: Pma_resource_manager_data_stream;
    frameIndex: ma_uint64;
  end;

  { P_anonymous_type_77  }
  P_anonymous_type_77 = ^_anonymous_type_77;

  { _anonymous_type_78  }
  _anonymous_type_78 = record
    data0: ma_uintptr;
    data1: ma_uintptr;
  end;

  { P_anonymous_type_78  }
  P_anonymous_type_78 = ^_anonymous_type_78;

  { _anonymous_type_79  }
  _anonymous_type_79 = record
    case Integer of
      0: (loadDataBufferNode: _anonymous_type_69);
      1: (freeDataBufferNode: _anonymous_type_70);
      2: (pageDataBufferNode: _anonymous_type_71);
      3: (loadDataBuffer: _anonymous_type_72);
      4: (freeDataBuffer: _anonymous_type_73);
      5: (loadDataStream: _anonymous_type_74);
      6: (freeDataStream: _anonymous_type_75);
      7: (pageDataStream: _anonymous_type_76);
      8: (seekDataStream: _anonymous_type_77);
      9: (custom: _anonymous_type_78);
  end;

  { P_anonymous_type_79  }
  P_anonymous_type_79 = ^_anonymous_type_79;

  { ma_resource_manager_job  }
  ma_resource_manager_job = record
    toc: _anonymous_type_68;
    next: ma_uint64;
    order: ma_uint32;
    data: _anonymous_type_79;
  end;

  { ma_resource_manager_job_queue_config  }
  ma_resource_manager_job_queue_config = record
    flags: ma_uint32;
    capacity: ma_uint32;
  end;

  { ma_resource_manager_job_queue  }
  ma_resource_manager_job_queue = record
    flags: ma_uint32;
    capacity: ma_uint32;
    head: ma_uint64;
    tail: ma_uint64;
    sem: ma_semaphore;
    allocator: ma_slot_allocator;
    pJobs: Pma_resource_manager_job;
    lock: ma_spinlock;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_resource_manager_data_source_config  }
  ma_resource_manager_data_source_config = record
    pFilePath: PUTF8Char;
    pFilePathW: PWideChar;
    pNotifications: Pma_resource_manager_pipeline_notifications;
    initialSeekPointInPCMFrames: ma_uint64;
    rangeBegInPCMFrames: ma_uint64;
    rangeEndInPCMFrames: ma_uint64;
    loopPointBegInPCMFrames: ma_uint64;
    loopPointEndInPCMFrames: ma_uint64;
    isLooping: ma_bool32;
    flags: ma_uint32;
  end;

  { _anonymous_type_80  }
  _anonymous_type_80 = record
    pData: Pointer;
    sizeInBytes: NativeUInt;
  end;

  { P_anonymous_type_80  }
  P_anonymous_type_80 = ^_anonymous_type_80;

  { _anonymous_type_81  }
  _anonymous_type_81 = record
    pData: Pointer;
    totalFrameCount: ma_uint64;
    decodedFrameCount: ma_uint64;
    format: ma_format;
    channels: ma_uint32;
    sampleRate: ma_uint32;
  end;

  { P_anonymous_type_81  }
  P_anonymous_type_81 = ^_anonymous_type_81;

  { _anonymous_type_82  }
  _anonymous_type_82 = record
    data: ma_paged_audio_buffer_data;
    decodedFrameCount: ma_uint64;
    sampleRate: ma_uint32;
  end;

  { P_anonymous_type_82  }
  P_anonymous_type_82 = ^_anonymous_type_82;

  { _anonymous_type_83  }
  _anonymous_type_83 = record
    case Integer of
      0: (encoded: _anonymous_type_80);
      1: (decoded: _anonymous_type_81);
      2: (decodedPaged: _anonymous_type_82);
  end;

  { P_anonymous_type_83  }
  P_anonymous_type_83 = ^_anonymous_type_83;

  { ma_resource_manager_data_supply  }
  ma_resource_manager_data_supply = record
    _type: ma_resource_manager_data_supply_type;
    backend: _anonymous_type_83;
  end;

  { ma_resource_manager_data_buffer_node  }
  ma_resource_manager_data_buffer_node = record
    hashedName32: ma_uint32;
    refCount: ma_uint32;
    result: ma_result;
    executionCounter: ma_uint32;
    executionPointer: ma_uint32;
    isDataOwnedByResourceManager: ma_bool32;
    data: ma_resource_manager_data_supply;
    pParent: Pma_resource_manager_data_buffer_node;
    pChildLo: Pma_resource_manager_data_buffer_node;
    pChildHi: Pma_resource_manager_data_buffer_node;
  end;

  { _anonymous_type_84  }
  _anonymous_type_84 = record
    case Integer of
      0: (decoder: ma_decoder);
      1: (buffer: ma_audio_buffer);
      2: (pagedBuffer: ma_paged_audio_buffer);
  end;

  { P_anonymous_type_84  }
  P_anonymous_type_84 = ^_anonymous_type_84;

  { ma_resource_manager_data_buffer  }
  ma_resource_manager_data_buffer = record
    ds: ma_data_source_base;
    pResourceManager: Pma_resource_manager;
    pNode: Pma_resource_manager_data_buffer_node;
    flags: ma_uint32;
    executionCounter: ma_uint32;
    executionPointer: ma_uint32;
    seekTargetInPCMFrames: ma_uint64;
    seekToCursorOnNextRead: ma_bool32;
    result: ma_result;
    isLooping: ma_bool32;
    isConnectorInitialized: ma_bool32;
    connector: _anonymous_type_84;
  end;

  { ma_resource_manager_data_stream  }
  ma_resource_manager_data_stream = record
    ds: ma_data_source_base;
    pResourceManager: Pma_resource_manager;
    flags: ma_uint32;
    decoder: ma_decoder;
    isDecoderInitialized: ma_bool32;
    totalLengthInPCMFrames: ma_uint64;
    relativeCursor: ma_uint32;
    absoluteCursor: ma_uint64;
    currentPageIndex: ma_uint32;
    executionCounter: ma_uint32;
    executionPointer: ma_uint32;
    isLooping: ma_bool32;
    pPageData: Pointer;
    pageFrameCount: array [0..1] of ma_uint32;
    result: ma_result;
    isDecoderAtEnd: ma_bool32;
    isPageValid: array [0..1] of ma_bool32;
    seekCounter: ma_bool32;
  end;

  { _anonymous_type_85  }
  _anonymous_type_85 = record
    case Integer of
      0: (buffer: ma_resource_manager_data_buffer);
      1: (stream: ma_resource_manager_data_stream);
  end;

  { P_anonymous_type_85  }
  P_anonymous_type_85 = ^_anonymous_type_85;

  { ma_resource_manager_data_source  }
  ma_resource_manager_data_source = record
    backend: _anonymous_type_85;
    flags: ma_uint32;
    executionCounter: ma_uint32;
    executionPointer: ma_uint32;
  end;

  { ma_resource_manager_config  }
  ma_resource_manager_config = record
    allocationCallbacks: ma_allocation_callbacks;
    pLog: Pma_log;
    decodedFormat: ma_format;
    decodedChannels: ma_uint32;
    decodedSampleRate: ma_uint32;
    jobThreadCount: ma_uint32;
    jobQueueCapacity: ma_uint32;
    flags: ma_uint32;
    pVFS: Pma_vfs;
    ppCustomDecodingBackendVTables: PPma_decoding_backend_vtable;
    customDecodingBackendCount: ma_uint32;
    pCustomDecodingBackendUserData: Pointer;
  end;

  { ma_resource_manager  }
  ma_resource_manager = record
    config: ma_resource_manager_config;
    pRootDataBufferNode: Pma_resource_manager_data_buffer_node;
    dataBufferBSTLock: ma_mutex;
    jobThreads: array [0..63] of ma_thread;
    jobQueue: ma_resource_manager_job_queue;
    defaultVFS: ma_default_vfs;
    log: ma_log;
  end;

  { Pma_node  }
  Pma_node = Pointer;

  { PPma_node  }
  PPma_node = ^Pma_node;

  { ma_node_vtable  }
  ma_node_vtable = record
    onProcess: procedure(pNode: Pma_node; ppFramesIn: PPSingle; pFrameCountIn: Pma_uint32; ppFramesOut: PPSingle; pFrameCountOut: Pma_uint32); cdecl;
    onGetRequiredInputFrameCount: function(pNode: Pma_node; outputFrameCount: ma_uint32; pInputFrameCount: Pma_uint32): ma_result; cdecl;
    inputBusCount: ma_uint8;
    outputBusCount: ma_uint8;
    flags: ma_uint32;
  end;

  { ma_node_config  }
  ma_node_config = record
    vtable: Pma_node_vtable;
    initialState: ma_node_state;
    inputBusCount: ma_uint32;
    outputBusCount: ma_uint32;
    pInputChannels: Pma_uint32;
    pOutputChannels: Pma_uint32;
  end;

  { ma_node_output_bus  }
  ma_node_output_bus = record
    pNode: Pma_node;
    outputBusIndex: ma_uint8;
    channels: ma_uint8;
    inputNodeInputBusIndex: ma_uint8;
    flags: ma_uint32;
    refCount: ma_uint32;
    isAttached: ma_bool32;
    lock: ma_spinlock;
    volume: Single;
    pNext: Pma_node_output_bus;
    pPrev: Pma_node_output_bus;
    pInputNode: Pma_node;
  end;

  { ma_node_input_bus  }
  ma_node_input_bus = record
    head: ma_node_output_bus;
    nextCounter: ma_uint32;
    lock: ma_spinlock;
    channels: ma_uint8;
  end;

  { ma_node_base  }
  ma_node_base = record
    pNodeGraph: Pma_node_graph;
    vtable: Pma_node_vtable;
    pCachedData: PSingle;
    cachedDataCapInFramesPerBus: ma_uint16;
    cachedFrameCountOut: ma_uint16;
    cachedFrameCountIn: ma_uint16;
    consumedFrameCountIn: ma_uint16;
    state: ma_node_state;
    stateTimes: array [0..1] of ma_uint64;
    localTime: ma_uint64;
    inputBusCount: ma_uint32;
    outputBusCount: ma_uint32;
    pInputBuses: Pma_node_input_bus;
    pOutputBuses: Pma_node_output_bus;
    _inputBuses: array [0..1] of ma_node_input_bus;
    _outputBuses: array [0..1] of ma_node_output_bus;
    _pHeap: Pointer;
    _ownsHeap: ma_bool32;
  end;

  { ma_node_graph_config  }
  ma_node_graph_config = record
    channels: ma_uint32;
  end;

  { ma_node_graph  }
  ma_node_graph = record
    endpoint: ma_node_base;
    isReading: ma_bool32;
  end;

  { ma_data_source_node_config  }
  ma_data_source_node_config = record
    nodeConfig: ma_node_config;
    pDataSource: Pma_data_source;
  end;

  { ma_data_source_node  }
  ma_data_source_node = record
    base: ma_node_base;
    pDataSource: Pma_data_source;
  end;

  { ma_splitter_node_config  }
  ma_splitter_node_config = record
    nodeConfig: ma_node_config;
    channels: ma_uint32;
  end;

  { ma_splitter_node  }
  ma_splitter_node = record
    base: ma_node_base;
  end;

  { ma_biquad_node_config  }
  ma_biquad_node_config = record
    nodeConfig: ma_node_config;
    biquad: ma_biquad_config;
  end;

  { ma_biquad_node  }
  ma_biquad_node = record
    baseNode: ma_node_base;
    biquad: ma_biquad;
  end;

  { ma_lpf_node_config  }
  ma_lpf_node_config = record
    nodeConfig: ma_node_config;
    lpf: ma_lpf_config;
  end;

  { ma_lpf_node  }
  ma_lpf_node = record
    baseNode: ma_node_base;
    lpf: ma_lpf;
  end;

  { ma_hpf_node_config  }
  ma_hpf_node_config = record
    nodeConfig: ma_node_config;
    hpf: ma_hpf_config;
  end;

  { ma_hpf_node  }
  ma_hpf_node = record
    baseNode: ma_node_base;
    hpf: ma_hpf;
  end;

  { ma_bpf_node_config  }
  ma_bpf_node_config = record
    nodeConfig: ma_node_config;
    bpf: ma_bpf_config;
  end;

  { ma_bpf_node  }
  ma_bpf_node = record
    baseNode: ma_node_base;
    bpf: ma_bpf;
  end;

  { ma_notch_node_config  }
  ma_notch_node_config = record
    nodeConfig: ma_node_config;
    notch: ma_notch_config;
  end;

  { ma_notch_node  }
  ma_notch_node = record
    baseNode: ma_node_base;
    notch: ma_notch2;
  end;

  { ma_peak_node_config  }
  ma_peak_node_config = record
    nodeConfig: ma_node_config;
    peak: ma_peak_config;
  end;

  { ma_peak_node  }
  ma_peak_node = record
    baseNode: ma_node_base;
    peak: ma_peak2;
  end;

  { ma_loshelf_node_config  }
  ma_loshelf_node_config = record
    nodeConfig: ma_node_config;
    loshelf: ma_loshelf_config;
  end;

  { ma_loshelf_node  }
  ma_loshelf_node = record
    baseNode: ma_node_base;
    loshelf: ma_loshelf2;
  end;

  { ma_hishelf_node_config  }
  ma_hishelf_node_config = record
    nodeConfig: ma_node_config;
    hishelf: ma_hishelf_config;
  end;

  { ma_hishelf_node  }
  ma_hishelf_node = record
    baseNode: ma_node_base;
    hishelf: ma_hishelf2;
  end;

  { ma_delay_node_config  }
  ma_delay_node_config = record
    nodeConfig: ma_node_config;
    delay: ma_delay_config;
  end;

  { ma_delay_node  }
  ma_delay_node = record
    baseNode: ma_node_base;
    delay: ma_delay;
  end;

  { ma_engine_node_config  }
  ma_engine_node_config = record
    pEngine: Pma_engine;
    _type: ma_engine_node_type;
    channelsIn: ma_uint32;
    channelsOut: ma_uint32;
    sampleRate: ma_uint32;
    isPitchDisabled: ma_bool8;
    isSpatializationDisabled: ma_bool8;
    pinnedListenerIndex: ma_uint8;
  end;

  { ma_engine_node  }
  ma_engine_node = record
    baseNode: ma_node_base;
    pEngine: Pma_engine;
    sampleRate: ma_uint32;
    fader: ma_fader;
    resampler: ma_linear_resampler;
    spatializer: ma_spatializer;
    panner: ma_panner;
    pitch: Single;
    oldPitch: Single;
    oldDopplerPitch: Single;
    isPitchDisabled: ma_bool32;
    isSpatializationDisabled: ma_bool32;
    pinnedListenerIndex: ma_uint32;
    _ownsHeap: ma_bool8;
    _pHeap: Pointer;
  end;

  { ma_sound_config  }
  ma_sound_config = record
    pFilePath: PUTF8Char;
    pFilePathW: PWideChar;
    pDataSource: Pma_data_source;
    pInitialAttachment: Pma_node;
    initialAttachmentInputBusIndex: ma_uint32;
    channelsIn: ma_uint32;
    channelsOut: ma_uint32;
    flags: ma_uint32;
    initialSeekPointInPCMFrames: ma_uint64;
    rangeBegInPCMFrames: ma_uint64;
    rangeEndInPCMFrames: ma_uint64;
    loopPointBegInPCMFrames: ma_uint64;
    loopPointEndInPCMFrames: ma_uint64;
    isLooping: ma_bool32;
    pDoneFence: Pma_fence;
  end;

  { ma_sound  }
  ma_sound = record
    engineNode: ma_engine_node;
    pDataSource: Pma_data_source;
    seekTarget: ma_uint64;
    atEnd: ma_bool32;
    ownsDataSource: ma_bool8;
    pResourceManagerDataSource: Pma_resource_manager_data_source;
  end;

  { ma_sound_inlined  }
  ma_sound_inlined = record
    sound: ma_sound;
    pNext: Pma_sound_inlined;
    pPrev: Pma_sound_inlined;
  end;

  { ma_sound_group_config  }
  ma_sound_group_config = ma_sound_config;

  { Pma_sound_group_config  }
  Pma_sound_group_config = ^ma_sound_group_config;

  { ma_sound_group  }
  ma_sound_group = ma_sound;

  { Pma_sound_group  }
  Pma_sound_group = ^ma_sound_group;

  { ma_engine_config  }
  ma_engine_config = record
    pResourceManager: Pma_resource_manager;
    pContext: Pma_context;
    pDevice: Pma_device;
    pPlaybackDeviceID: Pma_device_id;
    pLog: Pma_log;
    listenerCount: ma_uint32;
    channels: ma_uint32;
    sampleRate: ma_uint32;
    periodSizeInFrames: ma_uint32;
    periodSizeInMilliseconds: ma_uint32;
    gainSmoothTimeInFrames: ma_uint32;
    gainSmoothTimeInMilliseconds: ma_uint32;
    allocationCallbacks: ma_allocation_callbacks;
    noAutoStart: ma_bool32;
    noDevice: ma_bool32;
    monoExpansionMode: ma_mono_expansion_mode;
    pResourceManagerVFS: Pma_vfs;
  end;

  { ma_engine  }
  ma_engine = record
    nodeGraph: ma_node_graph;
    pResourceManager: Pma_resource_manager;
    pDevice: Pma_device;
    pLog: Pma_log;
    sampleRate: ma_uint32;
    listenerCount: ma_uint32;
    listeners: array [0..3] of ma_spatializer_listener;
    allocationCallbacks: ma_allocation_callbacks;
    ownsResourceManager: ma_bool8;
    ownsDevice: ma_bool8;
    inlinedSoundLock: ma_spinlock;
    pInlinedSoundHead: Pma_sound_inlined;
    inlinedSoundCount: ma_uint32;
    gainSmoothTimeInFrames: ma_uint32;
    monoExpansionMode: ma_mono_expansion_mode;
  end;

  { PHYSFS_uint8  }
  PHYSFS_uint8 = Byte;

  { PHYSFS_sint8  }
  PHYSFS_sint8 = UTF8Char;

  { PHYSFS_uint16  }
  PHYSFS_uint16 = Word;

  { PPHYSFS_uint16  }
  PPHYSFS_uint16 = ^PHYSFS_uint16;

  { PHYSFS_sint16  }
  PHYSFS_sint16 = Smallint;

  { PPHYSFS_sint16  }
  PPHYSFS_sint16 = ^PHYSFS_sint16;

  { PHYSFS_uint32  }
  PHYSFS_uint32 = Cardinal;

  { PPHYSFS_uint32  }
  PPHYSFS_uint32 = ^PHYSFS_uint32;

  { PHYSFS_sint32  }
  PHYSFS_sint32 = Integer;

  { PPHYSFS_sint32  }
  PPHYSFS_sint32 = ^PHYSFS_sint32;

  { PHYSFS_sint64  }
  PHYSFS_sint64 = Int64;

  { PPHYSFS_sint64  }
  PPHYSFS_sint64 = ^PHYSFS_sint64;

  { PHYSFS_uint64  }
  PHYSFS_uint64 = UInt64;

  { PPHYSFS_uint64  }
  PPHYSFS_uint64 = ^PHYSFS_uint64;

  { PHYSFS_compile_time_assert_uint8IsOneByte  }
  PHYSFS_compile_time_assert_uint8IsOneByte = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint8IsOneByte  }
  PHYSFS_compile_time_assert_sint8IsOneByte = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_uint16IsTwoBytes  }
  PHYSFS_compile_time_assert_uint16IsTwoBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint16IsTwoBytes  }
  PHYSFS_compile_time_assert_sint16IsTwoBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_uint32IsFourBytes  }
  PHYSFS_compile_time_assert_uint32IsFourBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint32IsFourBytes  }
  PHYSFS_compile_time_assert_sint32IsFourBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_uint64IsEightBytes  }
  PHYSFS_compile_time_assert_uint64IsEightBytes = array [0..0] of Integer;

  { PHYSFS_compile_time_assert_sint64IsEightBytes  }
  PHYSFS_compile_time_assert_sint64IsEightBytes = array [0..0] of Integer;

  { PHYSFS_File  }
  PHYSFS_File = record
    opaque: Pointer;
  end;

  { PHYSFS_ArchiveInfo  }
  PHYSFS_ArchiveInfo = record
    extension: PUTF8Char;
    description: PUTF8Char;
    author: PUTF8Char;
    url: PUTF8Char;
    supportsSymlinks: Integer;
  end;

  { PHYSFS_Version  }
  PHYSFS_Version = record
    major: PHYSFS_uint8;
    minor: PHYSFS_uint8;
    patch: PHYSFS_uint8;
  end;

  { PHYSFS_Allocator  }
  PHYSFS_Allocator = record
    Init: function(): Integer; cdecl;
    Deinit: procedure(); cdecl;
    Malloc: function(p1: PHYSFS_uint64): Pointer; cdecl;
    Realloc: function(p1: Pointer; p2: PHYSFS_uint64): Pointer; cdecl;
    Free: procedure(p1: Pointer); cdecl;
  end;

  { PHYSFS_StringCallback  }
  PHYSFS_StringCallback = procedure(data: Pointer; const str: PUTF8Char); cdecl;

  { PHYSFS_EnumFilesCallback  }
  PHYSFS_EnumFilesCallback = procedure(data: Pointer; const origdir: PUTF8Char; const fname: PUTF8Char); cdecl;

  { PHYSFS_EnumerateCallback  }
  PHYSFS_EnumerateCallback = function(data: Pointer; const origdir: PUTF8Char; const fname: PUTF8Char): PHYSFS_EnumerateCallbackResult; cdecl;

  { PHYSFS_Stat  }
  PHYSFS_Stat = record
    filesize: PHYSFS_sint64;
    modtime: PHYSFS_sint64;
    createtime: PHYSFS_sint64;
    accesstime: PHYSFS_sint64;
    filetype: PHYSFS_FileType;
    readonly: Integer;
  end;

  { PHYSFS_Io  }
  PHYSFS_Io = record
    version: PHYSFS_uint32;
    opaque: Pointer;
    read: function(io: PPHYSFS_Io; buf: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
    write: function(io: PPHYSFS_Io; const buffer: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
    seek: function(io: PPHYSFS_Io; offset: PHYSFS_uint64): Integer; cdecl;
    tell: function(io: PPHYSFS_Io): PHYSFS_sint64; cdecl;
    length: function(io: PPHYSFS_Io): PHYSFS_sint64; cdecl;
    duplicate: function(io: PPHYSFS_Io): PPHYSFS_Io; cdecl;
    flush: function(io: PPHYSFS_Io): Integer; cdecl;
    destroy: procedure(io: PPHYSFS_Io); cdecl;
  end;

  { PHYSFS_Archiver  }
  PHYSFS_Archiver = record
    version: PHYSFS_uint32;
    info: PHYSFS_ArchiveInfo;
    openArchive: function(io: PPHYSFS_Io; const name: PUTF8Char; forWrite: Integer; claimed: PInteger): Pointer; cdecl;
    enumerate: function(opaque: Pointer; const dirname: PUTF8Char; cb: PHYSFS_EnumerateCallback; const origdir: PUTF8Char; callbackdata: Pointer): PHYSFS_EnumerateCallbackResult; cdecl;
    openRead: function(opaque: Pointer; const fnm: PUTF8Char): PPHYSFS_Io; cdecl;
    openWrite: function(opaque: Pointer; const filename: PUTF8Char): PPHYSFS_Io; cdecl;
    openAppend: function(opaque: Pointer; const filename: PUTF8Char): PPHYSFS_Io; cdecl;
    remove: function(opaque: Pointer; const filename: PUTF8Char): Integer; cdecl;
    mkdir: function(opaque: Pointer; const filename: PUTF8Char): Integer; cdecl;
    stat: function(opaque: Pointer; const fn: PUTF8Char; stat: PPHYSFS_Stat): Integer; cdecl;
    closeArchive: procedure(opaque: Pointer); cdecl;
  end;

  { z_size_t  }
  z_size_t = NativeUInt;

  { uInt  }
  uInt = Cardinal;

  { PuInt  }
  PuInt = ^uInt;

  { uLong  }
  uLong = Cardinal;

  { PuLong  }
  PuLong = ^uLong;

  { Bytef  }
  Bytef = Byte;

  { PBytef  }
  PBytef = ^Bytef;

  { charf  }
  charf = UTF8Char;

  { intf  }
  intf = Integer;

  { uIntf  }
  uIntf = uInt;

  { uLongf  }
  uLongf = uLong;

  { PuLongf  }
  PuLongf = ^uLongf;

  { voidpc  }
  voidpc = Pointer;

  { voidpf  }
  voidpf = Pointer;

  { voidp  }
  voidp = Pointer;

  { z_crc_t  }
  z_crc_t = Cardinal;

  { Pz_crc_t  }
  Pz_crc_t = ^z_crc_t;

  { alloc_func  }
  alloc_func = function(opaque: voidpf; items: uInt; size: uInt): voidpf; cdecl;

  { free_func  }
  free_func = procedure(opaque: voidpf; address: voidpf); cdecl;

  { z_stream_s  }
  z_stream_s = record
    next_in: PBytef;
    avail_in: uInt;
    total_in: uLong;
    next_out: PBytef;
    avail_out: uInt;
    total_out: uLong;
    msg: PUTF8Char;
    state: Pinternal_state;
    zalloc: alloc_func;
    zfree: free_func;
    opaque: voidpf;
    data_type: Integer;
    adler: uLong;
    reserved: uLong;
  end;

  { Pz_stream  }
  Pz_stream = ^z_stream;

  { z_stream  }
  z_stream = z_stream_s;

  { z_streamp  }
  z_streamp = Pz_stream;

  { gz_header_s  }
  gz_header_s = record
    text: Integer;
    time: uLong;
    xflags: Integer;
    os: Integer;
    extra: PBytef;
    extra_len: uInt;
    extra_max: uInt;
    name: PBytef;
    name_max: uInt;
    comment: PBytef;
    comm_max: uInt;
    hcrc: Integer;
    done: Integer;
  end;

  { Pgz_header  }
  Pgz_header = ^gz_header;

  { gz_header  }
  gz_header = gz_header_s;

  { gz_headerp  }
  gz_headerp = Pgz_header;

  { in_func  }
  in_func = function(p1: Pointer; p2: PPByte): Cardinal; cdecl;

  { out_func  }
  out_func = function(p1: Pointer; p2: PByte; p3: Cardinal): Integer; cdecl;

  { gzFile  }
  gzFile = PgzFile_s;

  { gzFile_s  }
  gzFile_s = record
    have: Cardinal;
    next: PByte;
    pos: Int64;
  end;

  { ZPOS64_T  }
  ZPOS64_T = UInt64;

  { open_file_func  }
  open_file_func = function(opaque: voidpf; const filename: PUTF8Char; mode: Integer): voidpf; cdecl;

  { read_file_func  }
  read_file_func = function(opaque: voidpf; stream: voidpf; buf: Pointer; size: uLong): uLong; cdecl;

  { write_file_func  }
  write_file_func = function(opaque: voidpf; stream: voidpf; const buf: Pointer; size: uLong): uLong; cdecl;

  { close_file_func  }
  close_file_func = function(opaque: voidpf; stream: voidpf): Integer; cdecl;

  { testerror_file_func  }
  testerror_file_func = function(opaque: voidpf; stream: voidpf): Integer; cdecl;

  { tell_file_func  }
  tell_file_func = function(opaque: voidpf; stream: voidpf): Integer; cdecl;

  { seek_file_func  }
  seek_file_func = function(opaque: voidpf; stream: voidpf; offset: uLong; origin: Integer): Integer; cdecl;

  { zlib_filefunc_def_s  }
  zlib_filefunc_def_s = record
    zopen_file: open_file_func;
    zread_file: read_file_func;
    zwrite_file: write_file_func;
    ztell_file: tell_file_func;
    zseek_file: seek_file_func;
    zclose_file: close_file_func;
    zerror_file: testerror_file_func;
    opaque: voidpf;
  end;

  { zlib_filefunc_def  }
  zlib_filefunc_def = zlib_filefunc_def_s;

  { Pzlib_filefunc_def  }
  Pzlib_filefunc_def = ^zlib_filefunc_def;

  { tell64_file_func  }
  tell64_file_func = function(opaque: voidpf; stream: voidpf): ZPOS64_T; cdecl;

  { seek64_file_func  }
  seek64_file_func = function(opaque: voidpf; stream: voidpf; offset: ZPOS64_T; origin: Integer): Integer; cdecl;

  { open64_file_func  }
  open64_file_func = function(opaque: voidpf; const filename: Pointer; mode: Integer): voidpf; cdecl;

  { zlib_filefunc64_def_s  }
  zlib_filefunc64_def_s = record
    zopen64_file: open64_file_func;
    zread_file: read_file_func;
    zwrite_file: write_file_func;
    ztell64_file: tell64_file_func;
    zseek64_file: seek64_file_func;
    zclose_file: close_file_func;
    zerror_file: testerror_file_func;
    opaque: voidpf;
  end;

  { zlib_filefunc64_def  }
  zlib_filefunc64_def = zlib_filefunc64_def_s;

  { Pzlib_filefunc64_def  }
  Pzlib_filefunc64_def = ^zlib_filefunc64_def;

  { zlib_filefunc64_32_def_s  }
  zlib_filefunc64_32_def_s = record
    zfile_func64: zlib_filefunc64_def;
    zopen32_file: open_file_func;
    ztell32_file: tell_file_func;
    zseek32_file: seek_file_func;
  end;

  { zlib_filefunc64_32_def  }
  zlib_filefunc64_32_def = zlib_filefunc64_32_def_s;

  { Pzlib_filefunc64_32_def  }
  Pzlib_filefunc64_32_def = ^zlib_filefunc64_32_def;

  { zipFile  }
  zipFile = voidp;

  { tm_zip_s  }
  tm_zip_s = record
    tm_sec: uInt;
    tm_min: uInt;
    tm_hour: uInt;
    tm_mday: uInt;
    tm_mon: uInt;
    tm_year: uInt;
  end;

  { tm_zip  }
  tm_zip = tm_zip_s;

  { zip_fileinfo  }
  zip_fileinfo = record
    tmz_date: tm_zip;
    dosDate: uLong;
    internal_fa: uLong;
    external_fa: uLong;
  end;

  { zipcharpc  }
  zipcharpc = PUTF8Char;

  { Pzipcharpc  }
  Pzipcharpc = ^zipcharpc;

  { unzFile  }
  unzFile = voidp;

  { tm_unz_s  }
  tm_unz_s = record
    tm_sec: uInt;
    tm_min: uInt;
    tm_hour: uInt;
    tm_mday: uInt;
    tm_mon: uInt;
    tm_year: uInt;
  end;

  { tm_unz  }
  tm_unz = tm_unz_s;

  { unz_global_info64_s  }
  unz_global_info64_s = record
    number_entry: ZPOS64_T;
    size_comment: uLong;
  end;

  { unz_global_info64  }
  unz_global_info64 = unz_global_info64_s;

  { Punz_global_info64  }
  Punz_global_info64 = ^unz_global_info64;

  { unz_global_info_s  }
  unz_global_info_s = record
    number_entry: uLong;
    size_comment: uLong;
  end;

  { unz_global_info  }
  unz_global_info = unz_global_info_s;

  { Punz_global_info  }
  Punz_global_info = ^unz_global_info;

  { unz_file_info64_s  }
  unz_file_info64_s = record
    version: uLong;
    version_needed: uLong;
    flag: uLong;
    compression_method: uLong;
    dosDate: uLong;
    crc: uLong;
    compressed_size: ZPOS64_T;
    uncompressed_size: ZPOS64_T;
    size_filename: uLong;
    size_file_extra: uLong;
    size_file_comment: uLong;
    disk_num_start: uLong;
    internal_fa: uLong;
    external_fa: uLong;
    tmu_date: tm_unz;
  end;

  { unz_file_info64  }
  unz_file_info64 = unz_file_info64_s;

  { Punz_file_info64  }
  Punz_file_info64 = ^unz_file_info64;

  { unz_file_info_s  }
  unz_file_info_s = record
    version: uLong;
    version_needed: uLong;
    flag: uLong;
    compression_method: uLong;
    dosDate: uLong;
    crc: uLong;
    compressed_size: uLong;
    uncompressed_size: uLong;
    size_filename: uLong;
    size_file_extra: uLong;
    size_file_comment: uLong;
    disk_num_start: uLong;
    internal_fa: uLong;
    external_fa: uLong;
    tmu_date: tm_unz;
  end;

  { unz_file_info  }
  unz_file_info = unz_file_info_s;

  { Punz_file_info  }
  Punz_file_info = ^unz_file_info;

  { unz_file_pos_s  }
  unz_file_pos_s = record
    pos_in_zip_directory: uLong;
    num_of_file: uLong;
  end;

  { unz_file_pos  }
  unz_file_pos = unz_file_pos_s;

  { Punz_file_pos  }
  Punz_file_pos = ^unz_file_pos;

  { unz64_file_pos_s  }
  unz64_file_pos_s = record
    pos_in_zip_directory: ZPOS64_T;
    num_of_file: ZPOS64_T;
  end;

  { unz64_file_pos  }
  unz64_file_pos = unz64_file_pos_s;

  { Punz64_file_pos  }
  Punz64_file_pos = ^unz64_file_pos;

  { sdlsurface_context  }
  sdlsurface_context = record
    ctx: nk_context;
    scissors: nk_rect;
    fb: PSDL_Surface;
    font_tex: PSDL_Surface;
    atlas: nk_font_atlas;
  end;

  { FPSmanager  }
  FPSmanager = record
    framecount: Uint32;
    rateticks: Single;
    baseticks: Uint32;
    lastticks: Uint32;
    rate: Uint32;
  end;

  { ENetSocket  }
  ENetSocket = TSocket;

  { ENetBuffer  }
  ENetBuffer = record
    dataLength: NativeUInt;
    data: Pointer;
  end;

  { ENetSocketSet  }
  ENetSocketSet = fd_set;

  { PENetSocketSet  }
  PENetSocketSet = ^ENetSocketSet;

  { enet_uint8  }
  enet_uint8 = Byte;

  { Penet_uint8  }
  Penet_uint8 = ^enet_uint8;

  { enet_uint16  }
  enet_uint16 = Word;

  { enet_uint32  }
  enet_uint32 = Cardinal;

  { Penet_uint32  }
  Penet_uint32 = ^enet_uint32;

  { ENetProtocolCommand  }
  ENetProtocolCommand = _ENetProtocolCommand;

  { ENetProtocolFlag  }
  ENetProtocolFlag = _ENetProtocolFlag;

  { _ENetProtocolHeader  }
  _ENetProtocolHeader = record
    peerID: enet_uint16;
    sentTime: enet_uint16;
  end;

  { ENetProtocolHeader  }
  ENetProtocolHeader = _ENetProtocolHeader;

  { _ENetProtocolCommandHeader  }
  _ENetProtocolCommandHeader = record
    command: enet_uint8;
    channelID: enet_uint8;
    reliableSequenceNumber: enet_uint16;
  end;

  { ENetProtocolCommandHeader  }
  ENetProtocolCommandHeader = _ENetProtocolCommandHeader;

  { _ENetProtocolAcknowledge  }
  _ENetProtocolAcknowledge = record
    header: ENetProtocolCommandHeader;
    receivedReliableSequenceNumber: enet_uint16;
    receivedSentTime: enet_uint16;
  end;

  { ENetProtocolAcknowledge  }
  ENetProtocolAcknowledge = _ENetProtocolAcknowledge;

  { _ENetProtocolConnect  }
  _ENetProtocolConnect = record
    header: ENetProtocolCommandHeader;
    outgoingPeerID: enet_uint16;
    incomingSessionID: enet_uint8;
    outgoingSessionID: enet_uint8;
    mtu: enet_uint32;
    windowSize: enet_uint32;
    channelCount: enet_uint32;
    incomingBandwidth: enet_uint32;
    outgoingBandwidth: enet_uint32;
    packetThrottleInterval: enet_uint32;
    packetThrottleAcceleration: enet_uint32;
    packetThrottleDeceleration: enet_uint32;
    connectID: enet_uint32;
    data: enet_uint32;
  end;

  { ENetProtocolConnect  }
  ENetProtocolConnect = _ENetProtocolConnect;

  { _ENetProtocolVerifyConnect  }
  _ENetProtocolVerifyConnect = record
    header: ENetProtocolCommandHeader;
    outgoingPeerID: enet_uint16;
    incomingSessionID: enet_uint8;
    outgoingSessionID: enet_uint8;
    mtu: enet_uint32;
    windowSize: enet_uint32;
    channelCount: enet_uint32;
    incomingBandwidth: enet_uint32;
    outgoingBandwidth: enet_uint32;
    packetThrottleInterval: enet_uint32;
    packetThrottleAcceleration: enet_uint32;
    packetThrottleDeceleration: enet_uint32;
    connectID: enet_uint32;
  end;

  { ENetProtocolVerifyConnect  }
  ENetProtocolVerifyConnect = _ENetProtocolVerifyConnect;

  { _ENetProtocolBandwidthLimit  }
  _ENetProtocolBandwidthLimit = record
    header: ENetProtocolCommandHeader;
    incomingBandwidth: enet_uint32;
    outgoingBandwidth: enet_uint32;
  end;

  { ENetProtocolBandwidthLimit  }
  ENetProtocolBandwidthLimit = _ENetProtocolBandwidthLimit;

  { _ENetProtocolThrottleConfigure  }
  _ENetProtocolThrottleConfigure = record
    header: ENetProtocolCommandHeader;
    packetThrottleInterval: enet_uint32;
    packetThrottleAcceleration: enet_uint32;
    packetThrottleDeceleration: enet_uint32;
  end;

  { ENetProtocolThrottleConfigure  }
  ENetProtocolThrottleConfigure = _ENetProtocolThrottleConfigure;

  { _ENetProtocolDisconnect  }
  _ENetProtocolDisconnect = record
    header: ENetProtocolCommandHeader;
    data: enet_uint32;
  end;

  { ENetProtocolDisconnect  }
  ENetProtocolDisconnect = _ENetProtocolDisconnect;

  { _ENetProtocolPing  }
  _ENetProtocolPing = record
    header: ENetProtocolCommandHeader;
  end;

  { ENetProtocolPing  }
  ENetProtocolPing = _ENetProtocolPing;

  { _ENetProtocolSendReliable  }
  _ENetProtocolSendReliable = record
    header: ENetProtocolCommandHeader;
    dataLength: enet_uint16;
  end;

  { ENetProtocolSendReliable  }
  ENetProtocolSendReliable = _ENetProtocolSendReliable;

  { _ENetProtocolSendUnreliable  }
  _ENetProtocolSendUnreliable = record
    header: ENetProtocolCommandHeader;
    unreliableSequenceNumber: enet_uint16;
    dataLength: enet_uint16;
  end;

  { ENetProtocolSendUnreliable  }
  ENetProtocolSendUnreliable = _ENetProtocolSendUnreliable;

  { _ENetProtocolSendUnsequenced  }
  _ENetProtocolSendUnsequenced = record
    header: ENetProtocolCommandHeader;
    unsequencedGroup: enet_uint16;
    dataLength: enet_uint16;
  end;

  { ENetProtocolSendUnsequenced  }
  ENetProtocolSendUnsequenced = _ENetProtocolSendUnsequenced;

  { _ENetProtocolSendFragment  }
  _ENetProtocolSendFragment = record
    header: ENetProtocolCommandHeader;
    startSequenceNumber: enet_uint16;
    dataLength: enet_uint16;
    fragmentCount: enet_uint32;
    fragmentNumber: enet_uint32;
    totalLength: enet_uint32;
    fragmentOffset: enet_uint32;
  end;

  { ENetProtocolSendFragment  }
  ENetProtocolSendFragment = _ENetProtocolSendFragment;

  { _ENetProtocol  }
  _ENetProtocol = record
    case Integer of
      0: (header: ENetProtocolCommandHeader);
      1: (acknowledge: ENetProtocolAcknowledge);
      2: (connect: ENetProtocolConnect);
      3: (verifyConnect: ENetProtocolVerifyConnect);
      4: (disconnect: ENetProtocolDisconnect);
      5: (ping: ENetProtocolPing);
      6: (sendReliable: ENetProtocolSendReliable);
      7: (sendUnreliable: ENetProtocolSendUnreliable);
      8: (sendUnsequenced: ENetProtocolSendUnsequenced);
      9: (sendFragment: ENetProtocolSendFragment);
      10: (bandwidthLimit: ENetProtocolBandwidthLimit);
      11: (throttleConfigure: ENetProtocolThrottleConfigure);
  end;

  { ENetProtocol  }
  ENetProtocol = _ENetProtocol;

  { PENetProtocol  }
  PENetProtocol = ^ENetProtocol;

  { _ENetListNode  }
  _ENetListNode = record
    next: P_ENetListNode;
    previous: P_ENetListNode;
  end;

  { ENetListNode  }
  ENetListNode = _ENetListNode;

  { ENetListIterator  }
  ENetListIterator = ^ENetListNode;

  { _ENetList  }
  _ENetList = record
    sentinel: ENetListNode;
  end;

  { ENetList  }
  ENetList = _ENetList;

  { PENetList  }
  PENetList = ^ENetList;

  { _ENetCallbacks  }
  _ENetCallbacks = record
    malloc: function(size: NativeUInt): Pointer; cdecl;
    free: procedure(memory: Pointer); cdecl;
    no_memory: procedure(); cdecl;
  end;

  { ENetCallbacks  }
  ENetCallbacks = _ENetCallbacks;

  { PENetCallbacks  }
  PENetCallbacks = ^ENetCallbacks;

  { ENetVersion  }
  ENetVersion = enet_uint32;

  { ENetSocketType  }
  ENetSocketType = _ENetSocketType;

  { ENetSocketWait  }
  ENetSocketWait = _ENetSocketWait;

  { ENetSocketOption  }
  ENetSocketOption = _ENetSocketOption;

  { ENetSocketShutdown  }
  ENetSocketShutdown = _ENetSocketShutdown;

  { _ENetAddress  }
  _ENetAddress = record
    host: enet_uint32;
    port: enet_uint16;
  end;

  { ENetAddress  }
  ENetAddress = _ENetAddress;

  { PENetAddress  }
  PENetAddress = ^ENetAddress;

  { ENetPacketFlag  }
  ENetPacketFlag = _ENetPacketFlag;

  { ENetPacketFreeCallback  }
  ENetPacketFreeCallback = procedure(p1: P_ENetPacket); cdecl;

  { _ENetPacket  }
  _ENetPacket = record
    referenceCount: NativeUInt;
    flags: enet_uint32;
    data: Penet_uint8;
    dataLength: NativeUInt;
    freeCallback: ENetPacketFreeCallback;
    userData: Pointer;
  end;

  { ENetPacket  }
  ENetPacket = _ENetPacket;

  { PENetPacket  }
  PENetPacket = ^ENetPacket;

  { _ENetAcknowledgement  }
  _ENetAcknowledgement = record
    acknowledgementList: ENetListNode;
    sentTime: enet_uint32;
    command: ENetProtocol;
  end;

  { ENetAcknowledgement  }
  ENetAcknowledgement = _ENetAcknowledgement;

  { PENetAcknowledgement  }
  PENetAcknowledgement = ^ENetAcknowledgement;

  { _ENetOutgoingCommand  }
  _ENetOutgoingCommand = record
    outgoingCommandList: ENetListNode;
    reliableSequenceNumber: enet_uint16;
    unreliableSequenceNumber: enet_uint16;
    sentTime: enet_uint32;
    roundTripTimeout: enet_uint32;
    roundTripTimeoutLimit: enet_uint32;
    fragmentOffset: enet_uint32;
    fragmentLength: enet_uint16;
    sendAttempts: enet_uint16;
    command: ENetProtocol;
    packet: PENetPacket;
  end;

  { ENetOutgoingCommand  }
  ENetOutgoingCommand = _ENetOutgoingCommand;

  { PENetOutgoingCommand  }
  PENetOutgoingCommand = ^ENetOutgoingCommand;

  { _ENetIncomingCommand  }
  _ENetIncomingCommand = record
    incomingCommandList: ENetListNode;
    reliableSequenceNumber: enet_uint16;
    unreliableSequenceNumber: enet_uint16;
    command: ENetProtocol;
    fragmentCount: enet_uint32;
    fragmentsRemaining: enet_uint32;
    fragments: Penet_uint32;
    packet: PENetPacket;
  end;

  { ENetIncomingCommand  }
  ENetIncomingCommand = _ENetIncomingCommand;

  { PENetIncomingCommand  }
  PENetIncomingCommand = ^ENetIncomingCommand;

  { ENetPeerState  }
  ENetPeerState = _ENetPeerState;

  { _ENetChannel  }
  _ENetChannel = record
    outgoingReliableSequenceNumber: enet_uint16;
    outgoingUnreliableSequenceNumber: enet_uint16;
    usedReliableWindows: enet_uint16;
    reliableWindows: array [0..15] of enet_uint16;
    incomingReliableSequenceNumber: enet_uint16;
    incomingUnreliableSequenceNumber: enet_uint16;
    incomingReliableCommands: ENetList;
    incomingUnreliableCommands: ENetList;
  end;

  { ENetChannel  }
  ENetChannel = _ENetChannel;

  { PENetChannel  }
  PENetChannel = ^ENetChannel;

  { ENetPeerFlag  }
  ENetPeerFlag = _ENetPeerFlag;

  { _ENetPeer  }
  _ENetPeer = record
    dispatchList: ENetListNode;
    host: P_ENetHost;
    outgoingPeerID: enet_uint16;
    incomingPeerID: enet_uint16;
    connectID: enet_uint32;
    outgoingSessionID: enet_uint8;
    incomingSessionID: enet_uint8;
    address: ENetAddress;
    data: Pointer;
    state: ENetPeerState;
    channels: PENetChannel;
    channelCount: NativeUInt;
    incomingBandwidth: enet_uint32;
    outgoingBandwidth: enet_uint32;
    incomingBandwidthThrottleEpoch: enet_uint32;
    outgoingBandwidthThrottleEpoch: enet_uint32;
    incomingDataTotal: enet_uint32;
    outgoingDataTotal: enet_uint32;
    lastSendTime: enet_uint32;
    lastReceiveTime: enet_uint32;
    nextTimeout: enet_uint32;
    earliestTimeout: enet_uint32;
    packetLossEpoch: enet_uint32;
    packetsSent: enet_uint32;
    packetsLost: enet_uint32;
    packetLoss: enet_uint32;
    packetLossVariance: enet_uint32;
    packetThrottle: enet_uint32;
    packetThrottleLimit: enet_uint32;
    packetThrottleCounter: enet_uint32;
    packetThrottleEpoch: enet_uint32;
    packetThrottleAcceleration: enet_uint32;
    packetThrottleDeceleration: enet_uint32;
    packetThrottleInterval: enet_uint32;
    pingInterval: enet_uint32;
    timeoutLimit: enet_uint32;
    timeoutMinimum: enet_uint32;
    timeoutMaximum: enet_uint32;
    lastRoundTripTime: enet_uint32;
    lowestRoundTripTime: enet_uint32;
    lastRoundTripTimeVariance: enet_uint32;
    highestRoundTripTimeVariance: enet_uint32;
    roundTripTime: enet_uint32;
    roundTripTimeVariance: enet_uint32;
    mtu: enet_uint32;
    windowSize: enet_uint32;
    reliableDataInTransit: enet_uint32;
    outgoingReliableSequenceNumber: enet_uint16;
    acknowledgements: ENetList;
    sentReliableCommands: ENetList;
    sentUnreliableCommands: ENetList;
    outgoingCommands: ENetList;
    dispatchedCommands: ENetList;
    flags: enet_uint16;
    reserved: enet_uint16;
    incomingUnsequencedGroup: enet_uint16;
    outgoingUnsequencedGroup: enet_uint16;
    unsequencedWindow: array [0..31] of enet_uint32;
    eventData: enet_uint32;
    totalWaitingData: NativeUInt;
  end;

  { ENetPeer  }
  ENetPeer = _ENetPeer;

  { PENetPeer  }
  PENetPeer = ^ENetPeer;

  { _ENetCompressor  }
  _ENetCompressor = record
    context: Pointer;
    compress: function(context: Pointer; const inBuffers: PENetBuffer; inBufferCount: NativeUInt; inLimit: NativeUInt; outData: Penet_uint8; outLimit: NativeUInt): NativeUInt; cdecl;
    decompress: function(context: Pointer; const inData: Penet_uint8; inLimit: NativeUInt; outData: Penet_uint8; outLimit: NativeUInt): NativeUInt; cdecl;
    destroy: procedure(context: Pointer); cdecl;
  end;

  { ENetCompressor  }
  ENetCompressor = _ENetCompressor;

  { PENetCompressor  }
  PENetCompressor = ^ENetCompressor;

  { ENetChecksumCallback  }
  ENetChecksumCallback = function(const buffers: PENetBuffer; bufferCount: NativeUInt): enet_uint32; cdecl;

  { ENetInterceptCallback  }
  ENetInterceptCallback = function(host: P_ENetHost; event: P_ENetEvent): Integer; cdecl;

  { _ENetHost  }
  _ENetHost = record
    socket: ENetSocket;
    address: ENetAddress;
    incomingBandwidth: enet_uint32;
    outgoingBandwidth: enet_uint32;
    bandwidthThrottleEpoch: enet_uint32;
    mtu: enet_uint32;
    randomSeed: enet_uint32;
    recalculateBandwidthLimits: Integer;
    peers: PENetPeer;
    peerCount: NativeUInt;
    channelLimit: NativeUInt;
    serviceTime: enet_uint32;
    dispatchQueue: ENetList;
    continueSending: Integer;
    packetSize: NativeUInt;
    headerFlags: enet_uint16;
    commands: array [0..31] of ENetProtocol;
    commandCount: NativeUInt;
    buffers: array [0..64] of ENetBuffer;
    bufferCount: NativeUInt;
    checksum: ENetChecksumCallback;
    compressor: ENetCompressor;
    packetData: array [0..1] of array [0..4095] of enet_uint8;
    receivedAddress: ENetAddress;
    receivedData: Penet_uint8;
    receivedDataLength: NativeUInt;
    totalSentData: enet_uint32;
    totalSentPackets: enet_uint32;
    totalReceivedData: enet_uint32;
    totalReceivedPackets: enet_uint32;
    intercept: ENetInterceptCallback;
    connectedPeers: NativeUInt;
    bandwidthLimitedPeers: NativeUInt;
    duplicatePeers: NativeUInt;
    maximumPacketSize: NativeUInt;
    maximumWaitingData: NativeUInt;
  end;

  { ENetHost  }
  ENetHost = _ENetHost;

  { PENetHost  }
  PENetHost = ^ENetHost;

  { ENetEventType  }
  ENetEventType = _ENetEventType;

  { _ENetEvent  }
  _ENetEvent = record
    _type: ENetEventType;
    peer: PENetPeer;
    channelID: enet_uint8;
    data: enet_uint32;
    packet: PENetPacket;
  end;

  { ENetEvent  }
  ENetEvent = _ENetEvent;

  { PENetEvent  }
  PENetEvent = ^ENetEvent;

  { SDL_qsort_compare  }
  SDL_qsort_compare = function(const p1: Pointer; const p2: Pointer): Integer; cdecl;

  { SDL_CreateThreadWithStackSize_fn  }
  SDL_CreateThreadWithStackSize_fn = function(p1: Pointer): Integer; cdecl;

  { SDL_TLSSet_destructor  }
  SDL_TLSSet_destructor = procedure(p1: Pointer); cdecl;

  { nk_plot_function_value_getter  }
  nk_plot_function_value_getter = function(user: Pointer; index: Integer): Single; cdecl;

  { nk_combo_callback_item_getter  }
  nk_combo_callback_item_getter = procedure(p1: Pointer; p2: Integer; p3: PPUTF8Char); cdecl;

  { nk_combobox_callback_item_getter  }
  nk_combobox_callback_item_getter = procedure(p1: Pointer; p2: Integer; p3: PPUTF8Char); cdecl;

  { PHYSFS_mountMemory_del  }
  PHYSFS_mountMemory_del = procedure(p1: Pointer); cdecl;

var
  aaArcRGBA: function(renderer: PSDL_Renderer; cx: Single; cy: Single; rx: Single; ry: Single; start: Single; _end: Single; thick: Single; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  aaBezierRGBA: function(renderer: PSDL_Renderer; x: PDouble; y: PDouble; n: Integer; s: Integer; thick: Single; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  aacircleColor: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rad: Sint16; color: Uint32): Integer; cdecl;
  aacircleRGBA: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rad: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  aaellipseColor: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rx: Sint16; ry: Sint16; color: Uint32): Integer; cdecl;
  aaellipseRGBA: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rx: Sint16; ry: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  aaFilledEllipseRGBA: function(renderer: PSDL_Renderer; cx: Single; cy: Single; rx: Single; ry: Single; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  aaFilledPieRGBA: function(renderer: PSDL_Renderer; cx: Single; cy: Single; rx: Single; ry: Single; start: Single; _end: Single; chord: Uint32; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  aaFilledPolyBezierRGBA: function(renderer: PSDL_Renderer; x: PDouble; y: PDouble; n: Integer; s: Integer; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  aaFilledPolygonRGBA: function(renderer: PSDL_Renderer; const vx: PDouble; const vy: PDouble; n: Integer; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  aalineColor: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; color: Uint32): Integer; cdecl;
  aalineRGBA: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  aapolygonColor: function(renderer: PSDL_Renderer; const vx: PSint16; const vy: PSint16; n: Integer; color: Uint32): Integer; cdecl;
  aapolygonRGBA: function(renderer: PSDL_Renderer; const vx: PSint16; const vy: PSint16; n: Integer; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  aatrigonColor: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; x3: Sint16; y3: Sint16; color: Uint32): Integer; cdecl;
  aatrigonRGBA: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; x3: Sint16; y3: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  arcColor: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rad: Sint16; start: Sint16; _end: Sint16; color: Uint32): Integer; cdecl;
  arcRGBA: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rad: Sint16; start: Sint16; _end: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  bezierColor: function(renderer: PSDL_Renderer; const vx: PSint16; const vy: PSint16; n: Integer; s: Integer; color: Uint32): Integer; cdecl;
  bezierRGBA: function(renderer: PSDL_Renderer; const vx: PSint16; const vy: PSint16; n: Integer; s: Integer; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  boxColor: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; color: Uint32): Integer; cdecl;
  boxRGBA: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  characterColor: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; c: UTF8Char; color: Uint32): Integer; cdecl;
  characterRGBA: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; c: UTF8Char; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  circleColor: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rad: Sint16; color: Uint32): Integer; cdecl;
  circleRGBA: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rad: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  ellipseColor: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rx: Sint16; ry: Sint16; color: Uint32): Integer; cdecl;
  ellipseRGBA: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rx: Sint16; ry: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  enet_address_get_host: function(const address: PENetAddress; hostName: PUTF8Char; nameLength: NativeUInt): Integer; cdecl;
  enet_address_get_host_ip: function(const address: PENetAddress; hostName: PUTF8Char; nameLength: NativeUInt): Integer; cdecl;
  enet_address_set_host: function(address: PENetAddress; const hostName: PUTF8Char): Integer; cdecl;
  enet_address_set_host_ip: function(address: PENetAddress; const hostName: PUTF8Char): Integer; cdecl;
  enet_crc32: function(const p1: PENetBuffer; p2: NativeUInt): enet_uint32; cdecl;
  enet_deinitialize: procedure(); cdecl;
  enet_free: procedure(p1: Pointer); cdecl;
  enet_host_bandwidth_limit: procedure(p1: PENetHost; p2: enet_uint32; p3: enet_uint32); cdecl;
  enet_host_bandwidth_throttle: procedure(p1: PENetHost); cdecl;
  enet_host_broadcast: procedure(p1: PENetHost; p2: enet_uint8; p3: PENetPacket); cdecl;
  enet_host_channel_limit: procedure(p1: PENetHost; p2: NativeUInt); cdecl;
  enet_host_check_events: function(p1: PENetHost; p2: PENetEvent): Integer; cdecl;
  enet_host_compress: procedure(p1: PENetHost; const p2: PENetCompressor); cdecl;
  enet_host_compress_with_range_coder: function(host: PENetHost): Integer; cdecl;
  enet_host_connect: function(p1: PENetHost; const p2: PENetAddress; p3: NativeUInt; p4: enet_uint32): PENetPeer; cdecl;
  enet_host_create: function(const p1: PENetAddress; p2: NativeUInt; p3: NativeUInt; p4: enet_uint32; p5: enet_uint32): PENetHost; cdecl;
  enet_host_destroy: procedure(p1: PENetHost); cdecl;
  enet_host_flush: procedure(p1: PENetHost); cdecl;
  enet_host_random: function(p1: PENetHost): enet_uint32; cdecl;
  enet_host_random_seed: function(): enet_uint32; cdecl;
  enet_host_service: function(p1: PENetHost; p2: PENetEvent; p3: enet_uint32): Integer; cdecl;
  enet_initialize: function(): Integer; cdecl;
  enet_initialize_with_callbacks: function(version: ENetVersion; const inits: PENetCallbacks): Integer; cdecl;
  enet_linked_version: function(): ENetVersion; cdecl;
  enet_list_clear: procedure(p1: PENetList); cdecl;
  enet_list_insert: function(p1: ENetListIterator; p2: Pointer): ENetListIterator; cdecl;
  enet_list_move: function(p1: ENetListIterator; p2: Pointer; p3: Pointer): ENetListIterator; cdecl;
  enet_list_remove: function(p1: ENetListIterator): Pointer; cdecl;
  enet_list_size: function(p1: PENetList): NativeUInt; cdecl;
  enet_malloc: function(p1: NativeUInt): Pointer; cdecl;
  enet_packet_create: function(const p1: Pointer; p2: NativeUInt; p3: enet_uint32): PENetPacket; cdecl;
  enet_packet_destroy: procedure(p1: PENetPacket); cdecl;
  enet_packet_resize: function(p1: PENetPacket; p2: NativeUInt): Integer; cdecl;
  enet_peer_disconnect: procedure(p1: PENetPeer; p2: enet_uint32); cdecl;
  enet_peer_disconnect_later: procedure(p1: PENetPeer; p2: enet_uint32); cdecl;
  enet_peer_disconnect_now: procedure(p1: PENetPeer; p2: enet_uint32); cdecl;
  enet_peer_dispatch_incoming_reliable_commands: procedure(p1: PENetPeer; p2: PENetChannel; p3: PENetIncomingCommand); cdecl;
  enet_peer_dispatch_incoming_unreliable_commands: procedure(p1: PENetPeer; p2: PENetChannel; p3: PENetIncomingCommand); cdecl;
  enet_peer_on_connect: procedure(p1: PENetPeer); cdecl;
  enet_peer_on_disconnect: procedure(p1: PENetPeer); cdecl;
  enet_peer_ping: procedure(p1: PENetPeer); cdecl;
  enet_peer_ping_interval: procedure(p1: PENetPeer; p2: enet_uint32); cdecl;
  enet_peer_queue_acknowledgement: function(p1: PENetPeer; const p2: PENetProtocol; p3: enet_uint16): PENetAcknowledgement; cdecl;
  enet_peer_queue_incoming_command: function(p1: PENetPeer; const p2: PENetProtocol; const p3: Pointer; p4: NativeUInt; p5: enet_uint32; p6: enet_uint32): PENetIncomingCommand; cdecl;
  enet_peer_queue_outgoing_command: function(p1: PENetPeer; const p2: PENetProtocol; p3: PENetPacket; p4: enet_uint32; p5: enet_uint16): PENetOutgoingCommand; cdecl;
  enet_peer_receive: function(p1: PENetPeer; channelID: Penet_uint8): PENetPacket; cdecl;
  enet_peer_reset: procedure(p1: PENetPeer); cdecl;
  enet_peer_reset_queues: procedure(p1: PENetPeer); cdecl;
  enet_peer_send: function(p1: PENetPeer; p2: enet_uint8; p3: PENetPacket): Integer; cdecl;
  enet_peer_setup_outgoing_command: procedure(p1: PENetPeer; p2: PENetOutgoingCommand); cdecl;
  enet_peer_throttle: function(p1: PENetPeer; p2: enet_uint32): Integer; cdecl;
  enet_peer_throttle_configure: procedure(p1: PENetPeer; p2: enet_uint32; p3: enet_uint32; p4: enet_uint32); cdecl;
  enet_peer_timeout: procedure(p1: PENetPeer; p2: enet_uint32; p3: enet_uint32; p4: enet_uint32); cdecl;
  enet_protocol_command_size: function(p1: enet_uint8): NativeUInt; cdecl;
  enet_range_coder_compress: function(p1: Pointer; const p2: PENetBuffer; p3: NativeUInt; p4: NativeUInt; p5: Penet_uint8; p6: NativeUInt): NativeUInt; cdecl;
  enet_range_coder_create: function(): Pointer; cdecl;
  enet_range_coder_decompress: function(p1: Pointer; const p2: Penet_uint8; p3: NativeUInt; p4: Penet_uint8; p5: NativeUInt): NativeUInt; cdecl;
  enet_range_coder_destroy: procedure(p1: Pointer); cdecl;
  enet_socket_accept: function(p1: ENetSocket; p2: PENetAddress): ENetSocket; cdecl;
  enet_socket_bind: function(p1: ENetSocket; const p2: PENetAddress): Integer; cdecl;
  enet_socket_connect: function(p1: ENetSocket; const p2: PENetAddress): Integer; cdecl;
  enet_socket_create: function(p1: ENetSocketType): ENetSocket; cdecl;
  enet_socket_destroy: procedure(p1: ENetSocket); cdecl;
  enet_socket_get_address: function(p1: ENetSocket; p2: PENetAddress): Integer; cdecl;
  enet_socket_get_option: function(p1: ENetSocket; p2: ENetSocketOption; p3: PInteger): Integer; cdecl;
  enet_socket_listen: function(p1: ENetSocket; p2: Integer): Integer; cdecl;
  enet_socket_receive: function(p1: ENetSocket; p2: PENetAddress; p3: PENetBuffer; p4: NativeUInt): Integer; cdecl;
  enet_socket_send: function(p1: ENetSocket; const p2: PENetAddress; const p3: PENetBuffer; p4: NativeUInt): Integer; cdecl;
  enet_socket_set_option: function(p1: ENetSocket; p2: ENetSocketOption; p3: Integer): Integer; cdecl;
  enet_socket_shutdown: function(p1: ENetSocket; p2: ENetSocketShutdown): Integer; cdecl;
  enet_socket_wait: function(p1: ENetSocket; p2: Penet_uint32; p3: enet_uint32): Integer; cdecl;
  enet_socketset_select: function(p1: ENetSocket; p2: PENetSocketSet; p3: PENetSocketSet; p4: enet_uint32): Integer; cdecl;
  enet_time_get: function(): enet_uint32; cdecl;
  enet_time_set: procedure(p1: enet_uint32); cdecl;
  filledCircleColor: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; r: Sint16; color: Uint32): Integer; cdecl;
  filledCircleRGBA: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rad: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  filledEllipseColor: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rx: Sint16; ry: Sint16; color: Uint32): Integer; cdecl;
  filledEllipseRGBA: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rx: Sint16; ry: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  filledPieColor: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rad: Sint16; start: Sint16; _end: Sint16; color: Uint32): Integer; cdecl;
  filledPieRGBA: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rad: Sint16; start: Sint16; _end: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  filledPolygonColor: function(renderer: PSDL_Renderer; const vx: PSint16; const vy: PSint16; n: Integer; color: Uint32): Integer; cdecl;
  filledPolygonRGBA: function(renderer: PSDL_Renderer; const vx: PSint16; const vy: PSint16; n: Integer; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  filledTrigonColor: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; x3: Sint16; y3: Sint16; color: Uint32): Integer; cdecl;
  filledTrigonRGBA: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; x3: Sint16; y3: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  gfxPrimitivesSetFont: procedure(const fontdata: Pointer; cw: Uint32; ch: Uint32); cdecl;
  gfxPrimitivesSetFontRotation: procedure(rotation: Uint32); cdecl;
  hlineColor: function(renderer: PSDL_Renderer; x1: Sint16; x2: Sint16; y: Sint16; color: Uint32): Integer; cdecl;
  hlineRGBA: function(renderer: PSDL_Renderer; x1: Sint16; x2: Sint16; y: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  lineColor: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; color: Uint32): Integer; cdecl;
  lineRGBA: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  ma_aligned_free: procedure(p: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_aligned_malloc: function(sz: NativeUInt; alignment: NativeUInt; const pAllocationCallbacks: Pma_allocation_callbacks): Pointer; cdecl;
  ma_apply_volume_factor_f32: procedure(pSamples: PSingle; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_apply_volume_factor_pcm_frames: procedure(pFrames: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32; factor: Single); cdecl;
  ma_apply_volume_factor_pcm_frames_f32: procedure(pFrames: PSingle; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_apply_volume_factor_pcm_frames_s16: procedure(pFrames: Pma_int16; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_apply_volume_factor_pcm_frames_s24: procedure(pFrames: Pointer; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_apply_volume_factor_pcm_frames_s32: procedure(pFrames: Pma_int32; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_apply_volume_factor_pcm_frames_u8: procedure(pFrames: Pma_uint8; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_apply_volume_factor_s16: procedure(pSamples: Pma_int16; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_apply_volume_factor_s24: procedure(pSamples: Pointer; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_apply_volume_factor_s32: procedure(pSamples: Pma_int32; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_apply_volume_factor_u8: procedure(pSamples: Pma_uint8; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_async_notification_event_init: function(pNotificationEvent: Pma_async_notification_event): ma_result; cdecl;
  ma_async_notification_event_signal: function(pNotificationEvent: Pma_async_notification_event): ma_result; cdecl;
  ma_async_notification_event_uninit: function(pNotificationEvent: Pma_async_notification_event): ma_result; cdecl;
  ma_async_notification_event_wait: function(pNotificationEvent: Pma_async_notification_event): ma_result; cdecl;
  ma_async_notification_poll_init: function(pNotificationPoll: Pma_async_notification_poll): ma_result; cdecl;
  ma_async_notification_poll_is_signalled: function(const pNotificationPoll: Pma_async_notification_poll): ma_bool32; cdecl;
  ma_async_notification_signal: function(pNotification: Pma_async_notification): ma_result; cdecl;
  ma_audio_buffer_alloc_and_init: function(const pConfig: Pma_audio_buffer_config; ppAudioBuffer: PPma_audio_buffer): ma_result; cdecl;
  ma_audio_buffer_at_end: function(const pAudioBuffer: Pma_audio_buffer): ma_bool32; cdecl;
  ma_audio_buffer_config_init: function(format: ma_format; channels: ma_uint32; sizeInFrames: ma_uint64; const pData: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks): ma_audio_buffer_config; cdecl;
  ma_audio_buffer_get_available_frames: function(const pAudioBuffer: Pma_audio_buffer; pAvailableFrames: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_get_cursor_in_pcm_frames: function(const pAudioBuffer: Pma_audio_buffer; pCursor: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_get_length_in_pcm_frames: function(const pAudioBuffer: Pma_audio_buffer; pLength: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_init: function(const pConfig: Pma_audio_buffer_config; pAudioBuffer: Pma_audio_buffer): ma_result; cdecl;
  ma_audio_buffer_init_copy: function(const pConfig: Pma_audio_buffer_config; pAudioBuffer: Pma_audio_buffer): ma_result; cdecl;
  ma_audio_buffer_map: function(pAudioBuffer: Pma_audio_buffer; ppFramesOut: PPointer; pFrameCount: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_read_pcm_frames: function(pAudioBuffer: Pma_audio_buffer; pFramesOut: Pointer; frameCount: ma_uint64; loop: ma_bool32): ma_uint64; cdecl;
  ma_audio_buffer_ref_at_end: function(const pAudioBufferRef: Pma_audio_buffer_ref): ma_bool32; cdecl;
  ma_audio_buffer_ref_get_available_frames: function(const pAudioBufferRef: Pma_audio_buffer_ref; pAvailableFrames: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_ref_get_cursor_in_pcm_frames: function(const pAudioBufferRef: Pma_audio_buffer_ref; pCursor: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_ref_get_length_in_pcm_frames: function(const pAudioBufferRef: Pma_audio_buffer_ref; pLength: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_ref_init: function(format: ma_format; channels: ma_uint32; const pData: Pointer; sizeInFrames: ma_uint64; pAudioBufferRef: Pma_audio_buffer_ref): ma_result; cdecl;
  ma_audio_buffer_ref_map: function(pAudioBufferRef: Pma_audio_buffer_ref; ppFramesOut: PPointer; pFrameCount: Pma_uint64): ma_result; cdecl;
  ma_audio_buffer_ref_read_pcm_frames: function(pAudioBufferRef: Pma_audio_buffer_ref; pFramesOut: Pointer; frameCount: ma_uint64; loop: ma_bool32): ma_uint64; cdecl;
  ma_audio_buffer_ref_seek_to_pcm_frame: function(pAudioBufferRef: Pma_audio_buffer_ref; frameIndex: ma_uint64): ma_result; cdecl;
  ma_audio_buffer_ref_set_data: function(pAudioBufferRef: Pma_audio_buffer_ref; const pData: Pointer; sizeInFrames: ma_uint64): ma_result; cdecl;
  ma_audio_buffer_ref_uninit: procedure(pAudioBufferRef: Pma_audio_buffer_ref); cdecl;
  ma_audio_buffer_ref_unmap: function(pAudioBufferRef: Pma_audio_buffer_ref; frameCount: ma_uint64): ma_result; cdecl;
  ma_audio_buffer_seek_to_pcm_frame: function(pAudioBuffer: Pma_audio_buffer; frameIndex: ma_uint64): ma_result; cdecl;
  ma_audio_buffer_uninit: procedure(pAudioBuffer: Pma_audio_buffer); cdecl;
  ma_audio_buffer_uninit_and_free: procedure(pAudioBuffer: Pma_audio_buffer); cdecl;
  ma_audio_buffer_unmap: function(pAudioBuffer: Pma_audio_buffer; frameCount: ma_uint64): ma_result; cdecl;
  ma_biquad_config_init: function(format: ma_format; channels: ma_uint32; b0: Double; b1: Double; b2: Double; a0: Double; a1: Double; a2: Double): ma_biquad_config; cdecl;
  ma_biquad_get_heap_size: function(const pConfig: Pma_biquad_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_biquad_get_latency: function(const pBQ: Pma_biquad): ma_uint32; cdecl;
  ma_biquad_init: function(const pConfig: Pma_biquad_config; const pAllocationCallbacks: Pma_allocation_callbacks; pBQ: Pma_biquad): ma_result; cdecl;
  ma_biquad_init_preallocated: function(const pConfig: Pma_biquad_config; pHeap: Pointer; pBQ: Pma_biquad): ma_result; cdecl;
  ma_biquad_node_config_init: function(channels: ma_uint32; b0: Single; b1: Single; b2: Single; a0: Single; a1: Single; a2: Single): ma_biquad_node_config; cdecl;
  ma_biquad_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_biquad_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_biquad_node): ma_result; cdecl;
  ma_biquad_node_reinit: function(const pConfig: Pma_biquad_config; pNode: Pma_biquad_node): ma_result; cdecl;
  ma_biquad_node_uninit: procedure(pNode: Pma_biquad_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_biquad_process_pcm_frames: function(pBQ: Pma_biquad; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_biquad_reinit: function(const pConfig: Pma_biquad_config; pBQ: Pma_biquad): ma_result; cdecl;
  ma_biquad_uninit: procedure(pBQ: Pma_biquad; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_blend_f32: procedure(pOut: PSingle; pInA: PSingle; pInB: PSingle; factor: Single; channels: ma_uint32); cdecl;
  ma_bpf_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; order: ma_uint32): ma_bpf_config; cdecl;
  ma_bpf_get_heap_size: function(const pConfig: Pma_bpf_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_bpf_get_latency: function(const pBPF: Pma_bpf): ma_uint32; cdecl;
  ma_bpf_init: function(const pConfig: Pma_bpf_config; const pAllocationCallbacks: Pma_allocation_callbacks; pBPF: Pma_bpf): ma_result; cdecl;
  ma_bpf_init_preallocated: function(const pConfig: Pma_bpf_config; pHeap: Pointer; pBPF: Pma_bpf): ma_result; cdecl;
  ma_bpf_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; order: ma_uint32): ma_bpf_node_config; cdecl;
  ma_bpf_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_bpf_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_bpf_node): ma_result; cdecl;
  ma_bpf_node_reinit: function(const pConfig: Pma_bpf_config; pNode: Pma_bpf_node): ma_result; cdecl;
  ma_bpf_node_uninit: procedure(pNode: Pma_bpf_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_bpf_process_pcm_frames: function(pBPF: Pma_bpf; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_bpf_reinit: function(const pConfig: Pma_bpf_config; pBPF: Pma_bpf): ma_result; cdecl;
  ma_bpf_uninit: procedure(pBPF: Pma_bpf; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_bpf2_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; q: Double): ma_bpf2_config; cdecl;
  ma_bpf2_get_heap_size: function(const pConfig: Pma_bpf2_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_bpf2_get_latency: function(const pBPF: Pma_bpf2): ma_uint32; cdecl;
  ma_bpf2_init: function(const pConfig: Pma_bpf2_config; const pAllocationCallbacks: Pma_allocation_callbacks; pBPF: Pma_bpf2): ma_result; cdecl;
  ma_bpf2_init_preallocated: function(const pConfig: Pma_bpf2_config; pHeap: Pointer; pBPF: Pma_bpf2): ma_result; cdecl;
  ma_bpf2_process_pcm_frames: function(pBPF: Pma_bpf2; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_bpf2_reinit: function(const pConfig: Pma_bpf2_config; pBPF: Pma_bpf2): ma_result; cdecl;
  ma_bpf2_uninit: procedure(pBPF: Pma_bpf2; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_calculate_buffer_size_in_frames_from_descriptor: function(const pDescriptor: Pma_device_descriptor; nativeSampleRate: ma_uint32; performanceProfile: ma_performance_profile): ma_uint32; cdecl;
  ma_calculate_buffer_size_in_frames_from_milliseconds: function(bufferSizeInMilliseconds: ma_uint32; sampleRate: ma_uint32): ma_uint32; cdecl;
  ma_calculate_buffer_size_in_milliseconds_from_frames: function(bufferSizeInFrames: ma_uint32; sampleRate: ma_uint32): ma_uint32; cdecl;
  ma_calloc: function(sz: NativeUInt; const pAllocationCallbacks: Pma_allocation_callbacks): Pointer; cdecl;
  ma_channel_converter_config_init: function(format: ma_format; channelsIn: ma_uint32; const pChannelMapIn: Pma_channel; channelsOut: ma_uint32; const pChannelMapOut: Pma_channel; mixingMode: ma_channel_mix_mode): ma_channel_converter_config; cdecl;
  ma_channel_converter_get_heap_size: function(const pConfig: Pma_channel_converter_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_channel_converter_get_input_channel_map: function(const pConverter: Pma_channel_converter; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_channel_converter_get_output_channel_map: function(const pConverter: Pma_channel_converter; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_channel_converter_init: function(const pConfig: Pma_channel_converter_config; const pAllocationCallbacks: Pma_allocation_callbacks; pConverter: Pma_channel_converter): ma_result; cdecl;
  ma_channel_converter_init_preallocated: function(const pConfig: Pma_channel_converter_config; pHeap: Pointer; pConverter: Pma_channel_converter): ma_result; cdecl;
  ma_channel_converter_process_pcm_frames: function(pConverter: Pma_channel_converter; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_channel_converter_uninit: procedure(pConverter: Pma_channel_converter; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_channel_map_contains_channel_position: function(channels: ma_uint32; const pChannelMap: Pma_channel; channelPosition: ma_channel): ma_bool32; cdecl;
  ma_channel_map_copy: procedure(pOut: Pma_channel; const pIn: Pma_channel; channels: ma_uint32); cdecl;
  ma_channel_map_copy_or_default: procedure(pOut: Pma_channel; channelMapCapOut: NativeUInt; const pIn: Pma_channel; channels: ma_uint32); cdecl;
  ma_channel_map_get_channel: function(const pChannelMap: Pma_channel; channelCount: ma_uint32; channelIndex: ma_uint32): ma_channel; cdecl;
  ma_channel_map_init_blank: procedure(pChannelMap: Pma_channel; channels: ma_uint32); cdecl;
  ma_channel_map_init_standard: procedure(standardChannelMap: ma_standard_channel_map; pChannelMap: Pma_channel; channelMapCap: NativeUInt; channels: ma_uint32); cdecl;
  ma_channel_map_is_blank: function(const pChannelMap: Pma_channel; channels: ma_uint32): ma_bool32; cdecl;
  ma_channel_map_is_equal: function(const pChannelMapA: Pma_channel; const pChannelMapB: Pma_channel; channels: ma_uint32): ma_bool32; cdecl;
  ma_channel_map_is_valid: function(const pChannelMap: Pma_channel; channels: ma_uint32): ma_bool32; cdecl;
  ma_clip_pcm_frames: procedure(pDst: Pointer; const pSrc: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32); cdecl;
  ma_clip_samples_f32: procedure(pDst: PSingle; const pSrc: PSingle; count: ma_uint64); cdecl;
  ma_clip_samples_s16: procedure(pDst: Pma_int16; const pSrc: Pma_int32; count: ma_uint64); cdecl;
  ma_clip_samples_s24: procedure(pDst: Pma_uint8; const pSrc: Pma_int64; count: ma_uint64); cdecl;
  ma_clip_samples_s32: procedure(pDst: Pma_int32; const pSrc: Pma_int64; count: ma_uint64); cdecl;
  ma_clip_samples_u8: procedure(pDst: Pma_uint8; const pSrc: Pma_int16; count: ma_uint64); cdecl;
  ma_context_config_init: function(): ma_context_config; cdecl;
  ma_context_enumerate_devices: function(pContext: Pma_context; callback: ma_enum_devices_callback_proc; pUserData: Pointer): ma_result; cdecl;
  ma_context_get_device_info: function(pContext: Pma_context; deviceType: ma_device_type; const pDeviceID: Pma_device_id; pDeviceInfo: Pma_device_info): ma_result; cdecl;
  ma_context_get_devices: function(pContext: Pma_context; ppPlaybackDeviceInfos: PPma_device_info; pPlaybackDeviceCount: Pma_uint32; ppCaptureDeviceInfos: PPma_device_info; pCaptureDeviceCount: Pma_uint32): ma_result; cdecl;
  ma_context_get_log: function(pContext: Pma_context): Pma_log; cdecl;
  ma_context_init: function(backends: Pma_backend; backendCount: ma_uint32; const pConfig: Pma_context_config; pContext: Pma_context): ma_result; cdecl;
  ma_context_is_loopback_supported: function(pContext: Pma_context): ma_bool32; cdecl;
  ma_context_sizeof: function(): NativeUInt; cdecl;
  ma_context_uninit: function(pContext: Pma_context): ma_result; cdecl;
  ma_convert_frames: function(pOut: Pointer; frameCountOut: ma_uint64; formatOut: ma_format; channelsOut: ma_uint32; sampleRateOut: ma_uint32; const pIn: Pointer; frameCountIn: ma_uint64; formatIn: ma_format; channelsIn: ma_uint32; sampleRateIn: ma_uint32): ma_uint64; cdecl;
  ma_convert_frames_ex: function(pOut: Pointer; frameCountOut: ma_uint64; const pIn: Pointer; frameCountIn: ma_uint64; const pConfig: Pma_data_converter_config): ma_uint64; cdecl;
  ma_convert_pcm_frames_format: procedure(pOut: Pointer; formatOut: ma_format; const pIn: Pointer; formatIn: ma_format; frameCount: ma_uint64; channels: ma_uint32; ditherMode: ma_dither_mode); cdecl;
  ma_copy_and_apply_volume_and_clip_pcm_frames: procedure(pDst: Pointer; const pSrc: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32; volume: Single); cdecl;
  ma_copy_and_apply_volume_and_clip_samples_f32: procedure(pDst: PSingle; const pSrc: PSingle; count: ma_uint64; volume: Single); cdecl;
  ma_copy_and_apply_volume_and_clip_samples_s16: procedure(pDst: Pma_int16; const pSrc: Pma_int32; count: ma_uint64; volume: Single); cdecl;
  ma_copy_and_apply_volume_and_clip_samples_s24: procedure(pDst: Pma_uint8; const pSrc: Pma_int64; count: ma_uint64; volume: Single); cdecl;
  ma_copy_and_apply_volume_and_clip_samples_s32: procedure(pDst: Pma_int32; const pSrc: Pma_int64; count: ma_uint64; volume: Single); cdecl;
  ma_copy_and_apply_volume_and_clip_samples_u8: procedure(pDst: Pma_uint8; const pSrc: Pma_int16; count: ma_uint64; volume: Single); cdecl;
  ma_copy_and_apply_volume_factor_f32: procedure(pSamplesOut: PSingle; const pSamplesIn: PSingle; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_pcm_frames: procedure(pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_pcm_frames_f32: procedure(pFramesOut: PSingle; const pFramesIn: PSingle; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_pcm_frames_s16: procedure(pFramesOut: Pma_int16; const pFramesIn: Pma_int16; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_pcm_frames_s24: procedure(pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_pcm_frames_s32: procedure(pFramesOut: Pma_int32; const pFramesIn: Pma_int32; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_pcm_frames_u8: procedure(pFramesOut: Pma_uint8; const pFramesIn: Pma_uint8; frameCount: ma_uint64; channels: ma_uint32; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_per_channel_f32: procedure(pFramesOut: PSingle; const pFramesIn: PSingle; frameCount: ma_uint64; channels: ma_uint32; pChannelGains: PSingle); cdecl;
  ma_copy_and_apply_volume_factor_s16: procedure(pSamplesOut: Pma_int16; const pSamplesIn: Pma_int16; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_s24: procedure(pSamplesOut: Pointer; const pSamplesIn: Pointer; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_s32: procedure(pSamplesOut: Pma_int32; const pSamplesIn: Pma_int32; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_copy_and_apply_volume_factor_u8: procedure(pSamplesOut: Pma_uint8; const pSamplesIn: Pma_uint8; sampleCount: ma_uint64; factor: Single); cdecl;
  ma_copy_pcm_frames: procedure(dst: Pointer; const src: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32); cdecl;
  ma_data_converter_config_init: function(formatIn: ma_format; formatOut: ma_format; channelsIn: ma_uint32; channelsOut: ma_uint32; sampleRateIn: ma_uint32; sampleRateOut: ma_uint32): ma_data_converter_config; cdecl;
  ma_data_converter_config_init_default: function(): ma_data_converter_config; cdecl;
  ma_data_converter_get_expected_output_frame_count: function(const pConverter: Pma_data_converter; inputFrameCount: ma_uint64; pOutputFrameCount: Pma_uint64): ma_result; cdecl;
  ma_data_converter_get_heap_size: function(const pConfig: Pma_data_converter_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_data_converter_get_input_channel_map: function(const pConverter: Pma_data_converter; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_data_converter_get_input_latency: function(const pConverter: Pma_data_converter): ma_uint64; cdecl;
  ma_data_converter_get_output_channel_map: function(const pConverter: Pma_data_converter; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_data_converter_get_output_latency: function(const pConverter: Pma_data_converter): ma_uint64; cdecl;
  ma_data_converter_get_required_input_frame_count: function(const pConverter: Pma_data_converter; outputFrameCount: ma_uint64; pInputFrameCount: Pma_uint64): ma_result; cdecl;
  ma_data_converter_init: function(const pConfig: Pma_data_converter_config; const pAllocationCallbacks: Pma_allocation_callbacks; pConverter: Pma_data_converter): ma_result; cdecl;
  ma_data_converter_init_preallocated: function(const pConfig: Pma_data_converter_config; pHeap: Pointer; pConverter: Pma_data_converter): ma_result; cdecl;
  ma_data_converter_process_pcm_frames: function(pConverter: Pma_data_converter; const pFramesIn: Pointer; pFrameCountIn: Pma_uint64; pFramesOut: Pointer; pFrameCountOut: Pma_uint64): ma_result; cdecl;
  ma_data_converter_set_rate: function(pConverter: Pma_data_converter; sampleRateIn: ma_uint32; sampleRateOut: ma_uint32): ma_result; cdecl;
  ma_data_converter_set_rate_ratio: function(pConverter: Pma_data_converter; ratioInOut: Single): ma_result; cdecl;
  ma_data_converter_uninit: procedure(pConverter: Pma_data_converter; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_data_source_config_init: function(): ma_data_source_config; cdecl;
  ma_data_source_get_current: function(pDataSource: Pma_data_source): Pma_data_source; cdecl;
  ma_data_source_get_cursor_in_pcm_frames: function(pDataSource: Pma_data_source; pCursor: Pma_uint64): ma_result; cdecl;
  ma_data_source_get_data_format: function(pDataSource: Pma_data_source; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_data_source_get_length_in_pcm_frames: function(pDataSource: Pma_data_source; pLength: Pma_uint64): ma_result; cdecl;
  ma_data_source_get_loop_point_in_pcm_frames: procedure(pDataSource: Pma_data_source; pLoopBegInFrames: Pma_uint64; pLoopEndInFrames: Pma_uint64); cdecl;
  ma_data_source_get_next: function(pDataSource: Pma_data_source): Pma_data_source; cdecl;
  ma_data_source_get_next_callback: function(pDataSource: Pma_data_source): ma_data_source_get_next_proc; cdecl;
  ma_data_source_get_range_in_pcm_frames: procedure(pDataSource: Pma_data_source; pRangeBegInFrames: Pma_uint64; pRangeEndInFrames: Pma_uint64); cdecl;
  ma_data_source_init: function(const pConfig: Pma_data_source_config; pDataSource: Pma_data_source): ma_result; cdecl;
  ma_data_source_is_looping: function(pDataSource: Pma_data_source): ma_bool32; cdecl;
  ma_data_source_node_config_init: function(pDataSource: Pma_data_source): ma_data_source_node_config; cdecl;
  ma_data_source_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_data_source_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pDataSourceNode: Pma_data_source_node): ma_result; cdecl;
  ma_data_source_node_is_looping: function(pDataSourceNode: Pma_data_source_node): ma_bool32; cdecl;
  ma_data_source_node_set_looping: function(pDataSourceNode: Pma_data_source_node; isLooping: ma_bool32): ma_result; cdecl;
  ma_data_source_node_uninit: procedure(pDataSourceNode: Pma_data_source_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_data_source_read_pcm_frames: function(pDataSource: Pma_data_source; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_data_source_seek_pcm_frames: function(pDataSource: Pma_data_source; frameCount: ma_uint64; pFramesSeeked: Pma_uint64): ma_result; cdecl;
  ma_data_source_seek_to_pcm_frame: function(pDataSource: Pma_data_source; frameIndex: ma_uint64): ma_result; cdecl;
  ma_data_source_set_current: function(pDataSource: Pma_data_source; pCurrentDataSource: Pma_data_source): ma_result; cdecl;
  ma_data_source_set_loop_point_in_pcm_frames: function(pDataSource: Pma_data_source; loopBegInFrames: ma_uint64; loopEndInFrames: ma_uint64): ma_result; cdecl;
  ma_data_source_set_looping: function(pDataSource: Pma_data_source; isLooping: ma_bool32): ma_result; cdecl;
  ma_data_source_set_next: function(pDataSource: Pma_data_source; pNextDataSource: Pma_data_source): ma_result; cdecl;
  ma_data_source_set_next_callback: function(pDataSource: Pma_data_source; onGetNext: ma_data_source_get_next_proc): ma_result; cdecl;
  ma_data_source_set_range_in_pcm_frames: function(pDataSource: Pma_data_source; rangeBegInFrames: ma_uint64; rangeEndInFrames: ma_uint64): ma_result; cdecl;
  ma_data_source_uninit: procedure(pDataSource: Pma_data_source); cdecl;
  ma_decode_file: function(const pFilePath: PUTF8Char; pConfig: Pma_decoder_config; pFrameCountOut: Pma_uint64; ppPCMFramesOut: PPointer): ma_result; cdecl;
  ma_decode_from_vfs: function(pVFS: Pma_vfs; const pFilePath: PUTF8Char; pConfig: Pma_decoder_config; pFrameCountOut: Pma_uint64; ppPCMFramesOut: PPointer): ma_result; cdecl;
  ma_decode_memory: function(const pData: Pointer; dataSize: NativeUInt; pConfig: Pma_decoder_config; pFrameCountOut: Pma_uint64; ppPCMFramesOut: PPointer): ma_result; cdecl;
  ma_decoder_config_init: function(outputFormat: ma_format; outputChannels: ma_uint32; outputSampleRate: ma_uint32): ma_decoder_config; cdecl;
  ma_decoder_config_init_default: function(): ma_decoder_config; cdecl;
  ma_decoder_get_available_frames: function(pDecoder: Pma_decoder; pAvailableFrames: Pma_uint64): ma_result; cdecl;
  ma_decoder_get_cursor_in_pcm_frames: function(pDecoder: Pma_decoder; pCursor: Pma_uint64): ma_result; cdecl;
  ma_decoder_get_data_format: function(pDecoder: Pma_decoder; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_decoder_get_length_in_pcm_frames: function(pDecoder: Pma_decoder; pLength: Pma_uint64): ma_result; cdecl;
  ma_decoder_init: function(onRead: ma_decoder_read_proc; onSeek: ma_decoder_seek_proc; pUserData: Pointer; const pConfig: Pma_decoder_config; pDecoder: Pma_decoder): ma_result; cdecl;
  ma_decoder_init_file: function(const pFilePath: PUTF8Char; const pConfig: Pma_decoder_config; pDecoder: Pma_decoder): ma_result; cdecl;
  ma_decoder_init_file_w: function(const pFilePath: PWideChar; const pConfig: Pma_decoder_config; pDecoder: Pma_decoder): ma_result; cdecl;
  ma_decoder_init_memory: function(const pData: Pointer; dataSize: NativeUInt; const pConfig: Pma_decoder_config; pDecoder: Pma_decoder): ma_result; cdecl;
  ma_decoder_init_vfs: function(pVFS: Pma_vfs; const pFilePath: PUTF8Char; const pConfig: Pma_decoder_config; pDecoder: Pma_decoder): ma_result; cdecl;
  ma_decoder_init_vfs_w: function(pVFS: Pma_vfs; const pFilePath: PWideChar; const pConfig: Pma_decoder_config; pDecoder: Pma_decoder): ma_result; cdecl;
  ma_decoder_read_pcm_frames: function(pDecoder: Pma_decoder; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_decoder_seek_to_pcm_frame: function(pDecoder: Pma_decoder; frameIndex: ma_uint64): ma_result; cdecl;
  ma_decoder_uninit: function(pDecoder: Pma_decoder): ma_result; cdecl;
  ma_decoding_backend_config_init: function(preferredFormat: ma_format; seekPointCount: ma_uint32): ma_decoding_backend_config; cdecl;
  ma_default_vfs_init: function(pVFS: Pma_default_vfs; const pAllocationCallbacks: Pma_allocation_callbacks): ma_result; cdecl;
  ma_deinterleave_pcm_frames: procedure(format: ma_format; channels: ma_uint32; frameCount: ma_uint64; const pInterleavedPCMFrames: Pointer; ppDeinterleavedPCMFrames: PPointer); cdecl;
  ma_delay_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; delayInFrames: ma_uint32; decay: Single): ma_delay_config; cdecl;
  ma_delay_get_decay: function(const pDelay: Pma_delay): Single; cdecl;
  ma_delay_get_dry: function(const pDelay: Pma_delay): Single; cdecl;
  ma_delay_get_wet: function(const pDelay: Pma_delay): Single; cdecl;
  ma_delay_init: function(const pConfig: Pma_delay_config; const pAllocationCallbacks: Pma_allocation_callbacks; pDelay: Pma_delay): ma_result; cdecl;
  ma_delay_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; delayInFrames: ma_uint32; decay: Single): ma_delay_node_config; cdecl;
  ma_delay_node_get_decay: function(const pDelayNode: Pma_delay_node): Single; cdecl;
  ma_delay_node_get_dry: function(const pDelayNode: Pma_delay_node): Single; cdecl;
  ma_delay_node_get_wet: function(const pDelayNode: Pma_delay_node): Single; cdecl;
  ma_delay_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_delay_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pDelayNode: Pma_delay_node): ma_result; cdecl;
  ma_delay_node_set_decay: procedure(pDelayNode: Pma_delay_node; value: Single); cdecl;
  ma_delay_node_set_dry: procedure(pDelayNode: Pma_delay_node; value: Single); cdecl;
  ma_delay_node_set_wet: procedure(pDelayNode: Pma_delay_node; value: Single); cdecl;
  ma_delay_node_uninit: procedure(pDelayNode: Pma_delay_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_delay_process_pcm_frames: function(pDelay: Pma_delay; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint32): ma_result; cdecl;
  ma_delay_set_decay: procedure(pDelay: Pma_delay; value: Single); cdecl;
  ma_delay_set_dry: procedure(pDelay: Pma_delay; value: Single); cdecl;
  ma_delay_set_wet: procedure(pDelay: Pma_delay; value: Single); cdecl;
  ma_delay_uninit: procedure(pDelay: Pma_delay; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_device_config_init: function(deviceType: ma_device_type): ma_device_config; cdecl;
  ma_device_get_context: function(pDevice: Pma_device): Pma_context; cdecl;
  ma_device_get_info: function(pDevice: Pma_device; _type: ma_device_type; pDeviceInfo: Pma_device_info): ma_result; cdecl;
  ma_device_get_log: function(pDevice: Pma_device): Pma_log; cdecl;
  ma_device_get_master_volume: function(pDevice: Pma_device; pVolume: PSingle): ma_result; cdecl;
  ma_device_get_master_volume_db: function(pDevice: Pma_device; pGainDB: PSingle): ma_result; cdecl;
  ma_device_get_name: function(pDevice: Pma_device; _type: ma_device_type; pName: PUTF8Char; nameCap: NativeUInt; pLengthNotIncludingNullTerminator: PNativeUInt): ma_result; cdecl;
  ma_device_get_state: function(const pDevice: Pma_device): ma_device_state; cdecl;
  ma_device_handle_backend_data_callback: function(pDevice: Pma_device; pOutput: Pointer; const pInput: Pointer; frameCount: ma_uint32): ma_result; cdecl;
  ma_device_init: function(pContext: Pma_context; const pConfig: Pma_device_config; pDevice: Pma_device): ma_result; cdecl;
  ma_device_init_ex: function(backends: Pma_backend; backendCount: ma_uint32; const pContextConfig: Pma_context_config; const pConfig: Pma_device_config; pDevice: Pma_device): ma_result; cdecl;
  ma_device_is_started: function(const pDevice: Pma_device): ma_bool32; cdecl;
  ma_device_set_master_volume: function(pDevice: Pma_device; volume: Single): ma_result; cdecl;
  ma_device_set_master_volume_db: function(pDevice: Pma_device; gainDB: Single): ma_result; cdecl;
  ma_device_start: function(pDevice: Pma_device): ma_result; cdecl;
  ma_device_stop: function(pDevice: Pma_device): ma_result; cdecl;
  ma_device_uninit: procedure(pDevice: Pma_device); cdecl;
  ma_duplex_rb_init: function(captureFormat: ma_format; captureChannels: ma_uint32; sampleRate: ma_uint32; captureInternalSampleRate: ma_uint32; captureInternalPeriodSizeInFrames: ma_uint32; const pAllocationCallbacks: Pma_allocation_callbacks; pRB: Pma_duplex_rb): ma_result; cdecl;
  ma_duplex_rb_uninit: function(pRB: Pma_duplex_rb): ma_result; cdecl;
  ma_encoder_config_init: function(encodingFormat: ma_encoding_format; format: ma_format; channels: ma_uint32; sampleRate: ma_uint32): ma_encoder_config; cdecl;
  ma_encoder_init: function(onWrite: ma_encoder_write_proc; onSeek: ma_encoder_seek_proc; pUserData: Pointer; const pConfig: Pma_encoder_config; pEncoder: Pma_encoder): ma_result; cdecl;
  ma_encoder_init_file: function(const pFilePath: PUTF8Char; const pConfig: Pma_encoder_config; pEncoder: Pma_encoder): ma_result; cdecl;
  ma_encoder_init_file_w: function(const pFilePath: PWideChar; const pConfig: Pma_encoder_config; pEncoder: Pma_encoder): ma_result; cdecl;
  ma_encoder_uninit: procedure(pEncoder: Pma_encoder); cdecl;
  ma_encoder_write_pcm_frames: function(pEncoder: Pma_encoder; const pFramesIn: Pointer; frameCount: ma_uint64; pFramesWritten: Pma_uint64): ma_result; cdecl;
  ma_engine_config_init: function(): ma_engine_config; cdecl;
  ma_engine_find_closest_listener: function(const pEngine: Pma_engine; absolutePosX: Single; absolutePosY: Single; absolutePosZ: Single): ma_uint32; cdecl;
  ma_engine_get_channels: function(const pEngine: Pma_engine): ma_uint32; cdecl;
  ma_engine_get_device: function(pEngine: Pma_engine): Pma_device; cdecl;
  ma_engine_get_endpoint: function(pEngine: Pma_engine): Pma_node; cdecl;
  ma_engine_get_listener_count: function(const pEngine: Pma_engine): ma_uint32; cdecl;
  ma_engine_get_log: function(pEngine: Pma_engine): Pma_log; cdecl;
  ma_engine_get_node_graph: function(pEngine: Pma_engine): Pma_node_graph; cdecl;
  ma_engine_get_resource_manager: function(pEngine: Pma_engine): Pma_resource_manager; cdecl;
  ma_engine_get_sample_rate: function(const pEngine: Pma_engine): ma_uint32; cdecl;
  ma_engine_get_time: function(const pEngine: Pma_engine): ma_uint64; cdecl;
  ma_engine_init: function(const pConfig: Pma_engine_config; pEngine: Pma_engine): ma_result; cdecl;
  ma_engine_listener_get_cone: procedure(const pEngine: Pma_engine; listenerIndex: ma_uint32; pInnerAngleInRadians: PSingle; pOuterAngleInRadians: PSingle; pOuterGain: PSingle); cdecl;
  ma_engine_listener_get_direction: function(const pEngine: Pma_engine; listenerIndex: ma_uint32): ma_vec3f; cdecl;
  ma_engine_listener_get_position: function(const pEngine: Pma_engine; listenerIndex: ma_uint32): ma_vec3f; cdecl;
  ma_engine_listener_get_velocity: function(const pEngine: Pma_engine; listenerIndex: ma_uint32): ma_vec3f; cdecl;
  ma_engine_listener_get_world_up: function(const pEngine: Pma_engine; listenerIndex: ma_uint32): ma_vec3f; cdecl;
  ma_engine_listener_is_enabled: function(const pEngine: Pma_engine; listenerIndex: ma_uint32): ma_bool32; cdecl;
  ma_engine_listener_set_cone: procedure(pEngine: Pma_engine; listenerIndex: ma_uint32; innerAngleInRadians: Single; outerAngleInRadians: Single; outerGain: Single); cdecl;
  ma_engine_listener_set_direction: procedure(pEngine: Pma_engine; listenerIndex: ma_uint32; x: Single; y: Single; z: Single); cdecl;
  ma_engine_listener_set_enabled: procedure(pEngine: Pma_engine; listenerIndex: ma_uint32; isEnabled: ma_bool32); cdecl;
  ma_engine_listener_set_position: procedure(pEngine: Pma_engine; listenerIndex: ma_uint32; x: Single; y: Single; z: Single); cdecl;
  ma_engine_listener_set_velocity: procedure(pEngine: Pma_engine; listenerIndex: ma_uint32; x: Single; y: Single; z: Single); cdecl;
  ma_engine_listener_set_world_up: procedure(pEngine: Pma_engine; listenerIndex: ma_uint32; x: Single; y: Single; z: Single); cdecl;
  ma_engine_node_config_init: function(pEngine: Pma_engine; _type: ma_engine_node_type; flags: ma_uint32): ma_engine_node_config; cdecl;
  ma_engine_node_get_heap_size: function(const pConfig: Pma_engine_node_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_engine_node_init: function(const pConfig: Pma_engine_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pEngineNode: Pma_engine_node): ma_result; cdecl;
  ma_engine_node_init_preallocated: function(const pConfig: Pma_engine_node_config; pHeap: Pointer; pEngineNode: Pma_engine_node): ma_result; cdecl;
  ma_engine_node_uninit: procedure(pEngineNode: Pma_engine_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_engine_play_sound: function(pEngine: Pma_engine; const pFilePath: PUTF8Char; pGroup: Pma_sound_group): ma_result; cdecl;
  ma_engine_read_pcm_frames: function(pEngine: Pma_engine; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_engine_set_gain_db: function(pEngine: Pma_engine; gainDB: Single): ma_result; cdecl;
  ma_engine_set_time: function(pEngine: Pma_engine; globalTime: ma_uint64): ma_uint64; cdecl;
  ma_engine_set_volume: function(pEngine: Pma_engine; volume: Single): ma_result; cdecl;
  ma_engine_start: function(pEngine: Pma_engine): ma_result; cdecl;
  ma_engine_stop: function(pEngine: Pma_engine): ma_result; cdecl;
  ma_engine_uninit: procedure(pEngine: Pma_engine); cdecl;
  ma_event_init: function(pEvent: Pma_event): ma_result; cdecl;
  ma_event_signal: function(pEvent: Pma_event): ma_result; cdecl;
  ma_event_uninit: procedure(pEvent: Pma_event); cdecl;
  ma_event_wait: function(pEvent: Pma_event): ma_result; cdecl;
  ma_fader_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32): ma_fader_config; cdecl;
  ma_fader_get_current_volume: function(pFader: Pma_fader): Single; cdecl;
  ma_fader_get_data_format: procedure(const pFader: Pma_fader; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32); cdecl;
  ma_fader_init: function(const pConfig: Pma_fader_config; pFader: Pma_fader): ma_result; cdecl;
  ma_fader_process_pcm_frames: function(pFader: Pma_fader; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_fader_set_fade: procedure(pFader: Pma_fader; volumeBeg: Single; volumeEnd: Single; lengthInFrames: ma_uint64); cdecl;
  ma_fence_acquire: function(pFence: Pma_fence): ma_result; cdecl;
  ma_fence_init: function(pFence: Pma_fence): ma_result; cdecl;
  ma_fence_release: function(pFence: Pma_fence): ma_result; cdecl;
  ma_fence_uninit: procedure(pFence: Pma_fence); cdecl;
  ma_fence_wait: function(pFence: Pma_fence): ma_result; cdecl;
  ma_free: procedure(p: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_gainer_config_init: function(channels: ma_uint32; smoothTimeInFrames: ma_uint32): ma_gainer_config; cdecl;
  ma_gainer_get_heap_size: function(const pConfig: Pma_gainer_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_gainer_init: function(const pConfig: Pma_gainer_config; const pAllocationCallbacks: Pma_allocation_callbacks; pGainer: Pma_gainer): ma_result; cdecl;
  ma_gainer_init_preallocated: function(const pConfig: Pma_gainer_config; pHeap: Pointer; pGainer: Pma_gainer): ma_result; cdecl;
  ma_gainer_process_pcm_frames: function(pGainer: Pma_gainer; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_gainer_set_gain: function(pGainer: Pma_gainer; newGain: Single): ma_result; cdecl;
  ma_gainer_set_gains: function(pGainer: Pma_gainer; pNewGains: PSingle): ma_result; cdecl;
  ma_gainer_uninit: procedure(pGainer: Pma_gainer; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_get_backend_name: function(backend: ma_backend): PUTF8Char; cdecl;
  ma_get_bytes_per_sample: function(format: ma_format): ma_uint32; cdecl;
  ma_get_enabled_backends: function(pBackends: Pma_backend; backendCap: NativeUInt; pBackendCount: PNativeUInt): ma_result; cdecl;
  ma_get_format_name: function(format: ma_format): PUTF8Char; cdecl;
  ma_hishelf_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; gainDB: Double; q: Double; frequency: Double): ma_hishelf_node_config; cdecl;
  ma_hishelf_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_hishelf_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_hishelf_node): ma_result; cdecl;
  ma_hishelf_node_reinit: function(const pConfig: Pma_hishelf_config; pNode: Pma_hishelf_node): ma_result; cdecl;
  ma_hishelf_node_uninit: procedure(pNode: Pma_hishelf_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_hishelf2_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; gainDB: Double; shelfSlope: Double; frequency: Double): ma_hishelf2_config; cdecl;
  ma_hishelf2_get_heap_size: function(const pConfig: Pma_hishelf2_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_hishelf2_get_latency: function(const pFilter: Pma_hishelf2): ma_uint32; cdecl;
  ma_hishelf2_init: function(const pConfig: Pma_hishelf2_config; const pAllocationCallbacks: Pma_allocation_callbacks; pFilter: Pma_hishelf2): ma_result; cdecl;
  ma_hishelf2_init_preallocated: function(const pConfig: Pma_hishelf2_config; pHeap: Pointer; pFilter: Pma_hishelf2): ma_result; cdecl;
  ma_hishelf2_process_pcm_frames: function(pFilter: Pma_hishelf2; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_hishelf2_reinit: function(const pConfig: Pma_hishelf2_config; pFilter: Pma_hishelf2): ma_result; cdecl;
  ma_hishelf2_uninit: procedure(pFilter: Pma_hishelf2; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_hpf_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; order: ma_uint32): ma_hpf_config; cdecl;
  ma_hpf_get_heap_size: function(const pConfig: Pma_hpf_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_hpf_get_latency: function(const pHPF: Pma_hpf): ma_uint32; cdecl;
  ma_hpf_init: function(const pConfig: Pma_hpf_config; const pAllocationCallbacks: Pma_allocation_callbacks; pHPF: Pma_hpf): ma_result; cdecl;
  ma_hpf_init_preallocated: function(const pConfig: Pma_hpf_config; pHeap: Pointer; pLPF: Pma_hpf): ma_result; cdecl;
  ma_hpf_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; order: ma_uint32): ma_hpf_node_config; cdecl;
  ma_hpf_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_hpf_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_hpf_node): ma_result; cdecl;
  ma_hpf_node_reinit: function(const pConfig: Pma_hpf_config; pNode: Pma_hpf_node): ma_result; cdecl;
  ma_hpf_node_uninit: procedure(pNode: Pma_hpf_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_hpf_process_pcm_frames: function(pHPF: Pma_hpf; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_hpf_reinit: function(const pConfig: Pma_hpf_config; pHPF: Pma_hpf): ma_result; cdecl;
  ma_hpf_uninit: procedure(pHPF: Pma_hpf; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_hpf1_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double): ma_hpf1_config; cdecl;
  ma_hpf1_get_heap_size: function(const pConfig: Pma_hpf1_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_hpf1_get_latency: function(const pHPF: Pma_hpf1): ma_uint32; cdecl;
  ma_hpf1_init: function(const pConfig: Pma_hpf1_config; const pAllocationCallbacks: Pma_allocation_callbacks; pHPF: Pma_hpf1): ma_result; cdecl;
  ma_hpf1_init_preallocated: function(const pConfig: Pma_hpf1_config; pHeap: Pointer; pLPF: Pma_hpf1): ma_result; cdecl;
  ma_hpf1_process_pcm_frames: function(pHPF: Pma_hpf1; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_hpf1_reinit: function(const pConfig: Pma_hpf1_config; pHPF: Pma_hpf1): ma_result; cdecl;
  ma_hpf1_uninit: procedure(pHPF: Pma_hpf1; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_hpf2_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; q: Double): ma_hpf2_config; cdecl;
  ma_hpf2_get_heap_size: function(const pConfig: Pma_hpf2_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_hpf2_get_latency: function(const pHPF: Pma_hpf2): ma_uint32; cdecl;
  ma_hpf2_init: function(const pConfig: Pma_hpf2_config; const pAllocationCallbacks: Pma_allocation_callbacks; pHPF: Pma_hpf2): ma_result; cdecl;
  ma_hpf2_init_preallocated: function(const pConfig: Pma_hpf2_config; pHeap: Pointer; pHPF: Pma_hpf2): ma_result; cdecl;
  ma_hpf2_process_pcm_frames: function(pHPF: Pma_hpf2; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_hpf2_reinit: function(const pConfig: Pma_hpf2_config; pHPF: Pma_hpf2): ma_result; cdecl;
  ma_hpf2_uninit: procedure(pHPF: Pma_hpf2; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_interleave_pcm_frames: procedure(format: ma_format; channels: ma_uint32; frameCount: ma_uint64; ppDeinterleavedPCMFrames: PPointer; pInterleavedPCMFrames: Pointer); cdecl;
  ma_is_backend_enabled: function(backend: ma_backend): ma_bool32; cdecl;
  ma_is_loopback_supported: function(backend: ma_backend): ma_bool32; cdecl;
  ma_linear_resampler_config_init: function(format: ma_format; channels: ma_uint32; sampleRateIn: ma_uint32; sampleRateOut: ma_uint32): ma_linear_resampler_config; cdecl;
  ma_linear_resampler_get_expected_output_frame_count: function(const pResampler: Pma_linear_resampler; inputFrameCount: ma_uint64; pOutputFrameCount: Pma_uint64): ma_result; cdecl;
  ma_linear_resampler_get_heap_size: function(const pConfig: Pma_linear_resampler_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_linear_resampler_get_input_latency: function(const pResampler: Pma_linear_resampler): ma_uint64; cdecl;
  ma_linear_resampler_get_output_latency: function(const pResampler: Pma_linear_resampler): ma_uint64; cdecl;
  ma_linear_resampler_get_required_input_frame_count: function(const pResampler: Pma_linear_resampler; outputFrameCount: ma_uint64; pInputFrameCount: Pma_uint64): ma_result; cdecl;
  ma_linear_resampler_init: function(const pConfig: Pma_linear_resampler_config; const pAllocationCallbacks: Pma_allocation_callbacks; pResampler: Pma_linear_resampler): ma_result; cdecl;
  ma_linear_resampler_init_preallocated: function(const pConfig: Pma_linear_resampler_config; pHeap: Pointer; pResampler: Pma_linear_resampler): ma_result; cdecl;
  ma_linear_resampler_process_pcm_frames: function(pResampler: Pma_linear_resampler; const pFramesIn: Pointer; pFrameCountIn: Pma_uint64; pFramesOut: Pointer; pFrameCountOut: Pma_uint64): ma_result; cdecl;
  ma_linear_resampler_set_rate: function(pResampler: Pma_linear_resampler; sampleRateIn: ma_uint32; sampleRateOut: ma_uint32): ma_result; cdecl;
  ma_linear_resampler_set_rate_ratio: function(pResampler: Pma_linear_resampler; ratioInOut: Single): ma_result; cdecl;
  ma_linear_resampler_uninit: procedure(pResampler: Pma_linear_resampler; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_log_callback_init: function(onLog: ma_log_callback_proc; pUserData: Pointer): ma_log_callback; cdecl;
  ma_log_init: function(const pAllocationCallbacks: Pma_allocation_callbacks; pLog: Pma_log): ma_result; cdecl;
  ma_log_level_to_string: function(logLevel: ma_uint32): PUTF8Char; cdecl;
  ma_log_post: function(pLog: Pma_log; level: ma_uint32; const pMessage: PUTF8Char): ma_result; cdecl;
  ma_log_postf: function(pLog: Pma_log; level: ma_uint32; const pFormat: PUTF8Char): ma_result varargs; cdecl;
  ma_log_postv: function(pLog: Pma_log; level: ma_uint32; const pFormat: PUTF8Char; args: Pointer): ma_result; cdecl;
  ma_log_register_callback: function(pLog: Pma_log; callback: ma_log_callback): ma_result; cdecl;
  ma_log_uninit: procedure(pLog: Pma_log); cdecl;
  ma_log_unregister_callback: function(pLog: Pma_log; callback: ma_log_callback): ma_result; cdecl;
  ma_loshelf_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; gainDB: Double; q: Double; frequency: Double): ma_loshelf_node_config; cdecl;
  ma_loshelf_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_loshelf_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_loshelf_node): ma_result; cdecl;
  ma_loshelf_node_reinit: function(const pConfig: Pma_loshelf_config; pNode: Pma_loshelf_node): ma_result; cdecl;
  ma_loshelf_node_uninit: procedure(pNode: Pma_loshelf_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_loshelf2_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; gainDB: Double; shelfSlope: Double; frequency: Double): ma_loshelf2_config; cdecl;
  ma_loshelf2_get_heap_size: function(const pConfig: Pma_loshelf2_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_loshelf2_get_latency: function(const pFilter: Pma_loshelf2): ma_uint32; cdecl;
  ma_loshelf2_init: function(const pConfig: Pma_loshelf2_config; const pAllocationCallbacks: Pma_allocation_callbacks; pFilter: Pma_loshelf2): ma_result; cdecl;
  ma_loshelf2_init_preallocated: function(const pConfig: Pma_loshelf2_config; pHeap: Pointer; pFilter: Pma_loshelf2): ma_result; cdecl;
  ma_loshelf2_process_pcm_frames: function(pFilter: Pma_loshelf2; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_loshelf2_reinit: function(const pConfig: Pma_loshelf2_config; pFilter: Pma_loshelf2): ma_result; cdecl;
  ma_loshelf2_uninit: procedure(pFilter: Pma_loshelf2; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_lpf_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; order: ma_uint32): ma_lpf_config; cdecl;
  ma_lpf_get_heap_size: function(const pConfig: Pma_lpf_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_lpf_get_latency: function(const pLPF: Pma_lpf): ma_uint32; cdecl;
  ma_lpf_init: function(const pConfig: Pma_lpf_config; const pAllocationCallbacks: Pma_allocation_callbacks; pLPF: Pma_lpf): ma_result; cdecl;
  ma_lpf_init_preallocated: function(const pConfig: Pma_lpf_config; pHeap: Pointer; pLPF: Pma_lpf): ma_result; cdecl;
  ma_lpf_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; order: ma_uint32): ma_lpf_node_config; cdecl;
  ma_lpf_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_lpf_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_lpf_node): ma_result; cdecl;
  ma_lpf_node_reinit: function(const pConfig: Pma_lpf_config; pNode: Pma_lpf_node): ma_result; cdecl;
  ma_lpf_node_uninit: procedure(pNode: Pma_lpf_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_lpf_process_pcm_frames: function(pLPF: Pma_lpf; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_lpf_reinit: function(const pConfig: Pma_lpf_config; pLPF: Pma_lpf): ma_result; cdecl;
  ma_lpf_uninit: procedure(pLPF: Pma_lpf; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_lpf1_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double): ma_lpf1_config; cdecl;
  ma_lpf1_get_heap_size: function(const pConfig: Pma_lpf1_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_lpf1_get_latency: function(const pLPF: Pma_lpf1): ma_uint32; cdecl;
  ma_lpf1_init: function(const pConfig: Pma_lpf1_config; const pAllocationCallbacks: Pma_allocation_callbacks; pLPF: Pma_lpf1): ma_result; cdecl;
  ma_lpf1_init_preallocated: function(const pConfig: Pma_lpf1_config; pHeap: Pointer; pLPF: Pma_lpf1): ma_result; cdecl;
  ma_lpf1_process_pcm_frames: function(pLPF: Pma_lpf1; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_lpf1_reinit: function(const pConfig: Pma_lpf1_config; pLPF: Pma_lpf1): ma_result; cdecl;
  ma_lpf1_uninit: procedure(pLPF: Pma_lpf1; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_lpf2_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; cutoffFrequency: Double; q: Double): ma_lpf2_config; cdecl;
  ma_lpf2_get_heap_size: function(const pConfig: Pma_lpf2_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_lpf2_get_latency: function(const pLPF: Pma_lpf2): ma_uint32; cdecl;
  ma_lpf2_init: function(const pConfig: Pma_lpf2_config; const pAllocationCallbacks: Pma_allocation_callbacks; pLPF: Pma_lpf2): ma_result; cdecl;
  ma_lpf2_init_preallocated: function(const pConfig: Pma_lpf2_config; pHeap: Pointer; pHPF: Pma_lpf2): ma_result; cdecl;
  ma_lpf2_process_pcm_frames: function(pLPF: Pma_lpf2; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_lpf2_reinit: function(const pConfig: Pma_lpf2_config; pLPF: Pma_lpf2): ma_result; cdecl;
  ma_lpf2_uninit: procedure(pLPF: Pma_lpf2; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_malloc: function(sz: NativeUInt; const pAllocationCallbacks: Pma_allocation_callbacks): Pointer; cdecl;
  ma_mutex_init: function(pMutex: Pma_mutex): ma_result; cdecl;
  ma_mutex_lock: procedure(pMutex: Pma_mutex); cdecl;
  ma_mutex_uninit: procedure(pMutex: Pma_mutex); cdecl;
  ma_mutex_unlock: procedure(pMutex: Pma_mutex); cdecl;
  ma_node_attach_output_bus: function(pNode: Pma_node; outputBusIndex: ma_uint32; pOtherNode: Pma_node; otherNodeInputBusIndex: ma_uint32): ma_result; cdecl;
  ma_node_config_init: function(): ma_node_config; cdecl;
  ma_node_detach_all_output_buses: function(pNode: Pma_node): ma_result; cdecl;
  ma_node_detach_output_bus: function(pNode: Pma_node; outputBusIndex: ma_uint32): ma_result; cdecl;
  ma_node_get_heap_size: function(const pConfig: Pma_node_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_node_get_input_bus_count: function(const pNode: Pma_node): ma_uint32; cdecl;
  ma_node_get_input_channels: function(const pNode: Pma_node; inputBusIndex: ma_uint32): ma_uint32; cdecl;
  ma_node_get_node_graph: function(const pNode: Pma_node): Pma_node_graph; cdecl;
  ma_node_get_output_bus_count: function(const pNode: Pma_node): ma_uint32; cdecl;
  ma_node_get_output_bus_volume: function(const pNode: Pma_node; outputBusIndex: ma_uint32): Single; cdecl;
  ma_node_get_output_channels: function(const pNode: Pma_node; outputBusIndex: ma_uint32): ma_uint32; cdecl;
  ma_node_get_state: function(const pNode: Pma_node): ma_node_state; cdecl;
  ma_node_get_state_by_time: function(const pNode: Pma_node; globalTime: ma_uint64): ma_node_state; cdecl;
  ma_node_get_state_by_time_range: function(const pNode: Pma_node; globalTimeBeg: ma_uint64; globalTimeEnd: ma_uint64): ma_node_state; cdecl;
  ma_node_get_state_time: function(const pNode: Pma_node; state: ma_node_state): ma_uint64; cdecl;
  ma_node_get_time: function(const pNode: Pma_node): ma_uint64; cdecl;
  ma_node_graph_config_init: function(channels: ma_uint32): ma_node_graph_config; cdecl;
  ma_node_graph_get_channels: function(const pNodeGraph: Pma_node_graph): ma_uint32; cdecl;
  ma_node_graph_get_endpoint: function(pNodeGraph: Pma_node_graph): Pma_node; cdecl;
  ma_node_graph_get_time: function(const pNodeGraph: Pma_node_graph): ma_uint64; cdecl;
  ma_node_graph_init: function(const pConfig: Pma_node_graph_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNodeGraph: Pma_node_graph): ma_result; cdecl;
  ma_node_graph_read_pcm_frames: function(pNodeGraph: Pma_node_graph; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_node_graph_set_time: function(pNodeGraph: Pma_node_graph; globalTime: ma_uint64): ma_result; cdecl;
  ma_node_graph_uninit: procedure(pNodeGraph: Pma_node_graph; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_node): ma_result; cdecl;
  ma_node_init_preallocated: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_node_config; pHeap: Pointer; pNode: Pma_node): ma_result; cdecl;
  ma_node_set_output_bus_volume: function(pNode: Pma_node; outputBusIndex: ma_uint32; volume: Single): ma_result; cdecl;
  ma_node_set_state: function(pNode: Pma_node; state: ma_node_state): ma_result; cdecl;
  ma_node_set_state_time: function(pNode: Pma_node; state: ma_node_state; globalTime: ma_uint64): ma_result; cdecl;
  ma_node_set_time: function(pNode: Pma_node; localTime: ma_uint64): ma_result; cdecl;
  ma_node_uninit: procedure(pNode: Pma_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_noise_config_init: function(format: ma_format; channels: ma_uint32; _type: ma_noise_type; seed: ma_int32; amplitude: Double): ma_noise_config; cdecl;
  ma_noise_get_heap_size: function(const pConfig: Pma_noise_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_noise_init: function(const pConfig: Pma_noise_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNoise: Pma_noise): ma_result; cdecl;
  ma_noise_init_preallocated: function(const pConfig: Pma_noise_config; pHeap: Pointer; pNoise: Pma_noise): ma_result; cdecl;
  ma_noise_read_pcm_frames: function(pNoise: Pma_noise; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_noise_set_amplitude: function(pNoise: Pma_noise; amplitude: Double): ma_result; cdecl;
  ma_noise_set_seed: function(pNoise: Pma_noise; seed: ma_int32): ma_result; cdecl;
  ma_noise_set_type: function(pNoise: Pma_noise; _type: ma_noise_type): ma_result; cdecl;
  ma_noise_uninit: procedure(pNoise: Pma_noise; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_notch_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; q: Double; frequency: Double): ma_notch_node_config; cdecl;
  ma_notch_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_notch_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_notch_node): ma_result; cdecl;
  ma_notch_node_reinit: function(const pConfig: Pma_notch_config; pNode: Pma_notch_node): ma_result; cdecl;
  ma_notch_node_uninit: procedure(pNode: Pma_notch_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_notch2_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; q: Double; frequency: Double): ma_notch2_config; cdecl;
  ma_notch2_get_heap_size: function(const pConfig: Pma_notch2_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_notch2_get_latency: function(const pFilter: Pma_notch2): ma_uint32; cdecl;
  ma_notch2_init: function(const pConfig: Pma_notch2_config; const pAllocationCallbacks: Pma_allocation_callbacks; pFilter: Pma_notch2): ma_result; cdecl;
  ma_notch2_init_preallocated: function(const pConfig: Pma_notch2_config; pHeap: Pointer; pFilter: Pma_notch2): ma_result; cdecl;
  ma_notch2_process_pcm_frames: function(pFilter: Pma_notch2; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_notch2_reinit: function(const pConfig: Pma_notch2_config; pFilter: Pma_notch2): ma_result; cdecl;
  ma_notch2_uninit: procedure(pFilter: Pma_notch2; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_offset_pcm_frames_const_ptr: function(const p: Pointer; offsetInFrames: ma_uint64; format: ma_format; channels: ma_uint32): Pointer; cdecl;
  ma_offset_pcm_frames_ptr: function(p: Pointer; offsetInFrames: ma_uint64; format: ma_format; channels: ma_uint32): Pointer; cdecl;
  ma_paged_audio_buffer_config_init: function(pData: Pma_paged_audio_buffer_data): ma_paged_audio_buffer_config; cdecl;
  ma_paged_audio_buffer_data_allocate_and_append_page: function(pData: Pma_paged_audio_buffer_data; pageSizeInFrames: ma_uint32; const pInitialData: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks): ma_result; cdecl;
  ma_paged_audio_buffer_data_allocate_page: function(pData: Pma_paged_audio_buffer_data; pageSizeInFrames: ma_uint64; const pInitialData: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks; ppPage: PPma_paged_audio_buffer_page): ma_result; cdecl;
  ma_paged_audio_buffer_data_append_page: function(pData: Pma_paged_audio_buffer_data; pPage: Pma_paged_audio_buffer_page): ma_result; cdecl;
  ma_paged_audio_buffer_data_free_page: function(pData: Pma_paged_audio_buffer_data; pPage: Pma_paged_audio_buffer_page; const pAllocationCallbacks: Pma_allocation_callbacks): ma_result; cdecl;
  ma_paged_audio_buffer_data_get_head: function(pData: Pma_paged_audio_buffer_data): Pma_paged_audio_buffer_page; cdecl;
  ma_paged_audio_buffer_data_get_length_in_pcm_frames: function(pData: Pma_paged_audio_buffer_data; pLength: Pma_uint64): ma_result; cdecl;
  ma_paged_audio_buffer_data_get_tail: function(pData: Pma_paged_audio_buffer_data): Pma_paged_audio_buffer_page; cdecl;
  ma_paged_audio_buffer_data_init: function(format: ma_format; channels: ma_uint32; pData: Pma_paged_audio_buffer_data): ma_result; cdecl;
  ma_paged_audio_buffer_data_uninit: procedure(pData: Pma_paged_audio_buffer_data; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_paged_audio_buffer_get_cursor_in_pcm_frames: function(pPagedAudioBuffer: Pma_paged_audio_buffer; pCursor: Pma_uint64): ma_result; cdecl;
  ma_paged_audio_buffer_get_length_in_pcm_frames: function(pPagedAudioBuffer: Pma_paged_audio_buffer; pLength: Pma_uint64): ma_result; cdecl;
  ma_paged_audio_buffer_init: function(const pConfig: Pma_paged_audio_buffer_config; pPagedAudioBuffer: Pma_paged_audio_buffer): ma_result; cdecl;
  ma_paged_audio_buffer_read_pcm_frames: function(pPagedAudioBuffer: Pma_paged_audio_buffer; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_paged_audio_buffer_seek_to_pcm_frame: function(pPagedAudioBuffer: Pma_paged_audio_buffer; frameIndex: ma_uint64): ma_result; cdecl;
  ma_paged_audio_buffer_uninit: procedure(pPagedAudioBuffer: Pma_paged_audio_buffer); cdecl;
  ma_panner_config_init: function(format: ma_format; channels: ma_uint32): ma_panner_config; cdecl;
  ma_panner_get_mode: function(const pPanner: Pma_panner): ma_pan_mode; cdecl;
  ma_panner_get_pan: function(const pPanner: Pma_panner): Single; cdecl;
  ma_panner_init: function(const pConfig: Pma_panner_config; pPanner: Pma_panner): ma_result; cdecl;
  ma_panner_process_pcm_frames: function(pPanner: Pma_panner; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_panner_set_mode: procedure(pPanner: Pma_panner; mode: ma_pan_mode); cdecl;
  ma_panner_set_pan: procedure(pPanner: Pma_panner; pan: Single); cdecl;
  ma_pcm_convert: procedure(pOut: Pointer; formatOut: ma_format; const pIn: Pointer; formatIn: ma_format; sampleCount: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_f32_to_s16: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_f32_to_s24: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_f32_to_s32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_f32_to_u8: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_rb_acquire_read: function(pRB: Pma_pcm_rb; pSizeInFrames: Pma_uint32; ppBufferOut: PPointer): ma_result; cdecl;
  ma_pcm_rb_acquire_write: function(pRB: Pma_pcm_rb; pSizeInFrames: Pma_uint32; ppBufferOut: PPointer): ma_result; cdecl;
  ma_pcm_rb_available_read: function(pRB: Pma_pcm_rb): ma_uint32; cdecl;
  ma_pcm_rb_available_write: function(pRB: Pma_pcm_rb): ma_uint32; cdecl;
  ma_pcm_rb_commit_read: function(pRB: Pma_pcm_rb; sizeInFrames: ma_uint32): ma_result; cdecl;
  ma_pcm_rb_commit_write: function(pRB: Pma_pcm_rb; sizeInFrames: ma_uint32): ma_result; cdecl;
  ma_pcm_rb_get_subbuffer_offset: function(pRB: Pma_pcm_rb; subbufferIndex: ma_uint32): ma_uint32; cdecl;
  ma_pcm_rb_get_subbuffer_ptr: function(pRB: Pma_pcm_rb; subbufferIndex: ma_uint32; pBuffer: Pointer): Pointer; cdecl;
  ma_pcm_rb_get_subbuffer_size: function(pRB: Pma_pcm_rb): ma_uint32; cdecl;
  ma_pcm_rb_get_subbuffer_stride: function(pRB: Pma_pcm_rb): ma_uint32; cdecl;
  ma_pcm_rb_init: function(format: ma_format; channels: ma_uint32; bufferSizeInFrames: ma_uint32; pOptionalPreallocatedBuffer: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks; pRB: Pma_pcm_rb): ma_result; cdecl;
  ma_pcm_rb_init_ex: function(format: ma_format; channels: ma_uint32; subbufferSizeInFrames: ma_uint32; subbufferCount: ma_uint32; subbufferStrideInFrames: ma_uint32; pOptionalPreallocatedBuffer: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks; pRB: Pma_pcm_rb): ma_result; cdecl;
  ma_pcm_rb_pointer_distance: function(pRB: Pma_pcm_rb): ma_int32; cdecl;
  ma_pcm_rb_reset: procedure(pRB: Pma_pcm_rb); cdecl;
  ma_pcm_rb_seek_read: function(pRB: Pma_pcm_rb; offsetInFrames: ma_uint32): ma_result; cdecl;
  ma_pcm_rb_seek_write: function(pRB: Pma_pcm_rb; offsetInFrames: ma_uint32): ma_result; cdecl;
  ma_pcm_rb_uninit: procedure(pRB: Pma_pcm_rb); cdecl;
  ma_pcm_s16_to_f32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s16_to_s24: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s16_to_s32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s16_to_u8: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s24_to_f32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s24_to_s16: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s24_to_s32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s24_to_u8: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s32_to_f32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s32_to_s16: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s32_to_s24: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_s32_to_u8: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_u8_to_f32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_u8_to_s16: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_u8_to_s24: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_pcm_u8_to_s32: procedure(pOut: Pointer; const pIn: Pointer; count: ma_uint64; ditherMode: ma_dither_mode); cdecl;
  ma_peak_node_config_init: function(channels: ma_uint32; sampleRate: ma_uint32; gainDB: Double; q: Double; frequency: Double): ma_peak_node_config; cdecl;
  ma_peak_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_peak_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pNode: Pma_peak_node): ma_result; cdecl;
  ma_peak_node_reinit: function(const pConfig: Pma_peak_config; pNode: Pma_peak_node): ma_result; cdecl;
  ma_peak_node_uninit: procedure(pNode: Pma_peak_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_peak2_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; gainDB: Double; q: Double; frequency: Double): ma_peak2_config; cdecl;
  ma_peak2_get_heap_size: function(const pConfig: Pma_peak2_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_peak2_get_latency: function(const pFilter: Pma_peak2): ma_uint32; cdecl;
  ma_peak2_init: function(const pConfig: Pma_peak2_config; const pAllocationCallbacks: Pma_allocation_callbacks; pFilter: Pma_peak2): ma_result; cdecl;
  ma_peak2_init_preallocated: function(const pConfig: Pma_peak2_config; pHeap: Pointer; pFilter: Pma_peak2): ma_result; cdecl;
  ma_peak2_process_pcm_frames: function(pFilter: Pma_peak2; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_peak2_reinit: function(const pConfig: Pma_peak2_config; pFilter: Pma_peak2): ma_result; cdecl;
  ma_peak2_uninit: procedure(pFilter: Pma_peak2; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_rb_acquire_read: function(pRB: Pma_rb; pSizeInBytes: PNativeUInt; ppBufferOut: PPointer): ma_result; cdecl;
  ma_rb_acquire_write: function(pRB: Pma_rb; pSizeInBytes: PNativeUInt; ppBufferOut: PPointer): ma_result; cdecl;
  ma_rb_available_read: function(pRB: Pma_rb): ma_uint32; cdecl;
  ma_rb_available_write: function(pRB: Pma_rb): ma_uint32; cdecl;
  ma_rb_commit_read: function(pRB: Pma_rb; sizeInBytes: NativeUInt): ma_result; cdecl;
  ma_rb_commit_write: function(pRB: Pma_rb; sizeInBytes: NativeUInt): ma_result; cdecl;
  ma_rb_get_subbuffer_offset: function(pRB: Pma_rb; subbufferIndex: NativeUInt): NativeUInt; cdecl;
  ma_rb_get_subbuffer_ptr: function(pRB: Pma_rb; subbufferIndex: NativeUInt; pBuffer: Pointer): Pointer; cdecl;
  ma_rb_get_subbuffer_size: function(pRB: Pma_rb): NativeUInt; cdecl;
  ma_rb_get_subbuffer_stride: function(pRB: Pma_rb): NativeUInt; cdecl;
  ma_rb_init: function(bufferSizeInBytes: NativeUInt; pOptionalPreallocatedBuffer: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks; pRB: Pma_rb): ma_result; cdecl;
  ma_rb_init_ex: function(subbufferSizeInBytes: NativeUInt; subbufferCount: NativeUInt; subbufferStrideInBytes: NativeUInt; pOptionalPreallocatedBuffer: Pointer; const pAllocationCallbacks: Pma_allocation_callbacks; pRB: Pma_rb): ma_result; cdecl;
  ma_rb_pointer_distance: function(pRB: Pma_rb): ma_int32; cdecl;
  ma_rb_reset: procedure(pRB: Pma_rb); cdecl;
  ma_rb_seek_read: function(pRB: Pma_rb; offsetInBytes: NativeUInt): ma_result; cdecl;
  ma_rb_seek_write: function(pRB: Pma_rb; offsetInBytes: NativeUInt): ma_result; cdecl;
  ma_rb_uninit: procedure(pRB: Pma_rb); cdecl;
  ma_realloc: function(p: Pointer; sz: NativeUInt; const pAllocationCallbacks: Pma_allocation_callbacks): Pointer; cdecl;
  ma_resampler_config_init: function(format: ma_format; channels: ma_uint32; sampleRateIn: ma_uint32; sampleRateOut: ma_uint32; algorithm: ma_resample_algorithm): ma_resampler_config; cdecl;
  ma_resampler_get_expected_output_frame_count: function(const pResampler: Pma_resampler; inputFrameCount: ma_uint64; pOutputFrameCount: Pma_uint64): ma_result; cdecl;
  ma_resampler_get_heap_size: function(const pConfig: Pma_resampler_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_resampler_get_input_latency: function(const pResampler: Pma_resampler): ma_uint64; cdecl;
  ma_resampler_get_output_latency: function(const pResampler: Pma_resampler): ma_uint64; cdecl;
  ma_resampler_get_required_input_frame_count: function(const pResampler: Pma_resampler; outputFrameCount: ma_uint64; pInputFrameCount: Pma_uint64): ma_result; cdecl;
  ma_resampler_init: function(const pConfig: Pma_resampler_config; const pAllocationCallbacks: Pma_allocation_callbacks; pResampler: Pma_resampler): ma_result; cdecl;
  ma_resampler_init_preallocated: function(const pConfig: Pma_resampler_config; pHeap: Pointer; pResampler: Pma_resampler): ma_result; cdecl;
  ma_resampler_process_pcm_frames: function(pResampler: Pma_resampler; const pFramesIn: Pointer; pFrameCountIn: Pma_uint64; pFramesOut: Pointer; pFrameCountOut: Pma_uint64): ma_result; cdecl;
  ma_resampler_set_rate: function(pResampler: Pma_resampler; sampleRateIn: ma_uint32; sampleRateOut: ma_uint32): ma_result; cdecl;
  ma_resampler_set_rate_ratio: function(pResampler: Pma_resampler; ratio: Single): ma_result; cdecl;
  ma_resampler_uninit: procedure(pResampler: Pma_resampler; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_resource_manager_config_init: function(): ma_resource_manager_config; cdecl;
  ma_resource_manager_data_buffer_get_available_frames: function(pDataBuffer: Pma_resource_manager_data_buffer; pAvailableFrames: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_buffer_get_cursor_in_pcm_frames: function(pDataBuffer: Pma_resource_manager_data_buffer; pCursor: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_buffer_get_data_format: function(pDataBuffer: Pma_resource_manager_data_buffer; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_resource_manager_data_buffer_get_length_in_pcm_frames: function(pDataBuffer: Pma_resource_manager_data_buffer; pLength: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_buffer_init: function(pResourceManager: Pma_resource_manager; const pFilePath: PUTF8Char; flags: ma_uint32; const pNotifications: Pma_resource_manager_pipeline_notifications; pDataBuffer: Pma_resource_manager_data_buffer): ma_result; cdecl;
  ma_resource_manager_data_buffer_init_copy: function(pResourceManager: Pma_resource_manager; const pExistingDataBuffer: Pma_resource_manager_data_buffer; pDataBuffer: Pma_resource_manager_data_buffer): ma_result; cdecl;
  ma_resource_manager_data_buffer_init_ex: function(pResourceManager: Pma_resource_manager; const pConfig: Pma_resource_manager_data_source_config; pDataBuffer: Pma_resource_manager_data_buffer): ma_result; cdecl;
  ma_resource_manager_data_buffer_init_w: function(pResourceManager: Pma_resource_manager; const pFilePath: PWideChar; flags: ma_uint32; const pNotifications: Pma_resource_manager_pipeline_notifications; pDataBuffer: Pma_resource_manager_data_buffer): ma_result; cdecl;
  ma_resource_manager_data_buffer_is_looping: function(const pDataBuffer: Pma_resource_manager_data_buffer): ma_bool32; cdecl;
  ma_resource_manager_data_buffer_read_pcm_frames: function(pDataBuffer: Pma_resource_manager_data_buffer; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_buffer_result: function(const pDataBuffer: Pma_resource_manager_data_buffer): ma_result; cdecl;
  ma_resource_manager_data_buffer_seek_to_pcm_frame: function(pDataBuffer: Pma_resource_manager_data_buffer; frameIndex: ma_uint64): ma_result; cdecl;
  ma_resource_manager_data_buffer_set_looping: function(pDataBuffer: Pma_resource_manager_data_buffer; isLooping: ma_bool32): ma_result; cdecl;
  ma_resource_manager_data_buffer_uninit: function(pDataBuffer: Pma_resource_manager_data_buffer): ma_result; cdecl;
  ma_resource_manager_data_source_config_init: function(): ma_resource_manager_data_source_config; cdecl;
  ma_resource_manager_data_source_get_available_frames: function(pDataSource: Pma_resource_manager_data_source; pAvailableFrames: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_source_get_cursor_in_pcm_frames: function(pDataSource: Pma_resource_manager_data_source; pCursor: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_source_get_data_format: function(pDataSource: Pma_resource_manager_data_source; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_resource_manager_data_source_get_length_in_pcm_frames: function(pDataSource: Pma_resource_manager_data_source; pLength: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_source_init: function(pResourceManager: Pma_resource_manager; const pName: PUTF8Char; flags: ma_uint32; const pNotifications: Pma_resource_manager_pipeline_notifications; pDataSource: Pma_resource_manager_data_source): ma_result; cdecl;
  ma_resource_manager_data_source_init_copy: function(pResourceManager: Pma_resource_manager; const pExistingDataSource: Pma_resource_manager_data_source; pDataSource: Pma_resource_manager_data_source): ma_result; cdecl;
  ma_resource_manager_data_source_init_ex: function(pResourceManager: Pma_resource_manager; const pConfig: Pma_resource_manager_data_source_config; pDataSource: Pma_resource_manager_data_source): ma_result; cdecl;
  ma_resource_manager_data_source_init_w: function(pResourceManager: Pma_resource_manager; const pName: PWideChar; flags: ma_uint32; const pNotifications: Pma_resource_manager_pipeline_notifications; pDataSource: Pma_resource_manager_data_source): ma_result; cdecl;
  ma_resource_manager_data_source_is_looping: function(const pDataSource: Pma_resource_manager_data_source): ma_bool32; cdecl;
  ma_resource_manager_data_source_read_pcm_frames: function(pDataSource: Pma_resource_manager_data_source; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_source_result: function(const pDataSource: Pma_resource_manager_data_source): ma_result; cdecl;
  ma_resource_manager_data_source_seek_to_pcm_frame: function(pDataSource: Pma_resource_manager_data_source; frameIndex: ma_uint64): ma_result; cdecl;
  ma_resource_manager_data_source_set_looping: function(pDataSource: Pma_resource_manager_data_source; isLooping: ma_bool32): ma_result; cdecl;
  ma_resource_manager_data_source_uninit: function(pDataSource: Pma_resource_manager_data_source): ma_result; cdecl;
  ma_resource_manager_data_stream_get_available_frames: function(pDataStream: Pma_resource_manager_data_stream; pAvailableFrames: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_stream_get_cursor_in_pcm_frames: function(pDataStream: Pma_resource_manager_data_stream; pCursor: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_stream_get_data_format: function(pDataStream: Pma_resource_manager_data_stream; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_resource_manager_data_stream_get_length_in_pcm_frames: function(pDataStream: Pma_resource_manager_data_stream; pLength: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_stream_init: function(pResourceManager: Pma_resource_manager; const pFilePath: PUTF8Char; flags: ma_uint32; const pNotifications: Pma_resource_manager_pipeline_notifications; pDataStream: Pma_resource_manager_data_stream): ma_result; cdecl;
  ma_resource_manager_data_stream_init_ex: function(pResourceManager: Pma_resource_manager; const pConfig: Pma_resource_manager_data_source_config; pDataStream: Pma_resource_manager_data_stream): ma_result; cdecl;
  ma_resource_manager_data_stream_init_w: function(pResourceManager: Pma_resource_manager; const pFilePath: PWideChar; flags: ma_uint32; const pNotifications: Pma_resource_manager_pipeline_notifications; pDataStream: Pma_resource_manager_data_stream): ma_result; cdecl;
  ma_resource_manager_data_stream_is_looping: function(const pDataStream: Pma_resource_manager_data_stream): ma_bool32; cdecl;
  ma_resource_manager_data_stream_read_pcm_frames: function(pDataStream: Pma_resource_manager_data_stream; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_resource_manager_data_stream_result: function(const pDataStream: Pma_resource_manager_data_stream): ma_result; cdecl;
  ma_resource_manager_data_stream_seek_to_pcm_frame: function(pDataStream: Pma_resource_manager_data_stream; frameIndex: ma_uint64): ma_result; cdecl;
  ma_resource_manager_data_stream_set_looping: function(pDataStream: Pma_resource_manager_data_stream; isLooping: ma_bool32): ma_result; cdecl;
  ma_resource_manager_data_stream_uninit: function(pDataStream: Pma_resource_manager_data_stream): ma_result; cdecl;
  ma_resource_manager_get_log: function(pResourceManager: Pma_resource_manager): Pma_log; cdecl;
  ma_resource_manager_init: function(const pConfig: Pma_resource_manager_config; pResourceManager: Pma_resource_manager): ma_result; cdecl;
  ma_resource_manager_job_init: function(code: ma_uint16): ma_resource_manager_job; cdecl;
  ma_resource_manager_job_queue_config_init: function(flags: ma_uint32; capacity: ma_uint32): ma_resource_manager_job_queue_config; cdecl;
  ma_resource_manager_job_queue_get_heap_size: function(const pConfig: Pma_resource_manager_job_queue_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_resource_manager_job_queue_init: function(const pConfig: Pma_resource_manager_job_queue_config; const pAllocationCallbacks: Pma_allocation_callbacks; pQueue: Pma_resource_manager_job_queue): ma_result; cdecl;
  ma_resource_manager_job_queue_init_preallocated: function(const pConfig: Pma_resource_manager_job_queue_config; pHeap: Pointer; pQueue: Pma_resource_manager_job_queue): ma_result; cdecl;
  ma_resource_manager_job_queue_next: function(pQueue: Pma_resource_manager_job_queue; pJob: Pma_resource_manager_job): ma_result; cdecl;
  ma_resource_manager_job_queue_post: function(pQueue: Pma_resource_manager_job_queue; const pJob: Pma_resource_manager_job): ma_result; cdecl;
  ma_resource_manager_job_queue_uninit: procedure(pQueue: Pma_resource_manager_job_queue; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_resource_manager_next_job: function(pResourceManager: Pma_resource_manager; pJob: Pma_resource_manager_job): ma_result; cdecl;
  ma_resource_manager_pipeline_notifications_init: function(): ma_resource_manager_pipeline_notifications; cdecl;
  ma_resource_manager_post_job: function(pResourceManager: Pma_resource_manager; const pJob: Pma_resource_manager_job): ma_result; cdecl;
  ma_resource_manager_post_job_quit: function(pResourceManager: Pma_resource_manager): ma_result; cdecl;
  ma_resource_manager_process_job: function(pResourceManager: Pma_resource_manager; pJob: Pma_resource_manager_job): ma_result; cdecl;
  ma_resource_manager_process_next_job: function(pResourceManager: Pma_resource_manager): ma_result; cdecl;
  ma_resource_manager_register_decoded_data: function(pResourceManager: Pma_resource_manager; const pName: PUTF8Char; const pData: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32; sampleRate: ma_uint32): ma_result; cdecl;
  ma_resource_manager_register_decoded_data_w: function(pResourceManager: Pma_resource_manager; const pName: PWideChar; const pData: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32; sampleRate: ma_uint32): ma_result; cdecl;
  ma_resource_manager_register_encoded_data: function(pResourceManager: Pma_resource_manager; const pName: PUTF8Char; const pData: Pointer; sizeInBytes: NativeUInt): ma_result; cdecl;
  ma_resource_manager_register_encoded_data_w: function(pResourceManager: Pma_resource_manager; const pName: PWideChar; const pData: Pointer; sizeInBytes: NativeUInt): ma_result; cdecl;
  ma_resource_manager_register_file: function(pResourceManager: Pma_resource_manager; const pFilePath: PUTF8Char; flags: ma_uint32): ma_result; cdecl;
  ma_resource_manager_register_file_w: function(pResourceManager: Pma_resource_manager; const pFilePath: PWideChar; flags: ma_uint32): ma_result; cdecl;
  ma_resource_manager_uninit: procedure(pResourceManager: Pma_resource_manager); cdecl;
  ma_resource_manager_unregister_data: function(pResourceManager: Pma_resource_manager; const pName: PUTF8Char): ma_result; cdecl;
  ma_resource_manager_unregister_data_w: function(pResourceManager: Pma_resource_manager; const pName: PWideChar): ma_result; cdecl;
  ma_resource_manager_unregister_file: function(pResourceManager: Pma_resource_manager; const pFilePath: PUTF8Char): ma_result; cdecl;
  ma_resource_manager_unregister_file_w: function(pResourceManager: Pma_resource_manager; const pFilePath: PWideChar): ma_result; cdecl;
  ma_result_description: function(result: ma_result): PUTF8Char; cdecl;
  ma_silence_pcm_frames: procedure(p: Pointer; frameCount: ma_uint64; format: ma_format; channels: ma_uint32); cdecl;
  ma_slot_allocator_alloc: function(pAllocator: Pma_slot_allocator; pSlot: Pma_uint64): ma_result; cdecl;
  ma_slot_allocator_config_init: function(capacity: ma_uint32): ma_slot_allocator_config; cdecl;
  ma_slot_allocator_free: function(pAllocator: Pma_slot_allocator; slot: ma_uint64): ma_result; cdecl;
  ma_slot_allocator_get_heap_size: function(const pConfig: Pma_slot_allocator_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_slot_allocator_init: function(const pConfig: Pma_slot_allocator_config; const pAllocationCallbacks: Pma_allocation_callbacks; pAllocator: Pma_slot_allocator): ma_result; cdecl;
  ma_slot_allocator_init_preallocated: function(const pConfig: Pma_slot_allocator_config; pHeap: Pointer; pAllocator: Pma_slot_allocator): ma_result; cdecl;
  ma_slot_allocator_uninit: procedure(pAllocator: Pma_slot_allocator; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_sound_at_end: function(const pSound: Pma_sound): ma_bool32; cdecl;
  ma_sound_config_init: function(): ma_sound_config; cdecl;
  ma_sound_get_attenuation_model: function(const pSound: Pma_sound): ma_attenuation_model; cdecl;
  ma_sound_get_cone: procedure(const pSound: Pma_sound; pInnerAngleInRadians: PSingle; pOuterAngleInRadians: PSingle; pOuterGain: PSingle); cdecl;
  ma_sound_get_current_fade_volume: function(pSound: Pma_sound): Single; cdecl;
  ma_sound_get_cursor_in_pcm_frames: function(pSound: Pma_sound; pCursor: Pma_uint64): ma_result; cdecl;
  ma_sound_get_data_format: function(pSound: Pma_sound; pFormat: Pma_format; pChannels: Pma_uint32; pSampleRate: Pma_uint32; pChannelMap: Pma_channel; channelMapCap: NativeUInt): ma_result; cdecl;
  ma_sound_get_data_source: function(const pSound: Pma_sound): Pma_data_source; cdecl;
  ma_sound_get_direction: function(const pSound: Pma_sound): ma_vec3f; cdecl;
  ma_sound_get_direction_to_listener: function(const pSound: Pma_sound): ma_vec3f; cdecl;
  ma_sound_get_directional_attenuation_factor: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_doppler_factor: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_engine: function(const pSound: Pma_sound): Pma_engine; cdecl;
  ma_sound_get_length_in_pcm_frames: function(pSound: Pma_sound; pLength: Pma_uint64): ma_result; cdecl;
  ma_sound_get_listener_index: function(const pSound: Pma_sound): ma_uint32; cdecl;
  ma_sound_get_max_distance: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_max_gain: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_min_distance: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_min_gain: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_pan: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_pan_mode: function(const pSound: Pma_sound): ma_pan_mode; cdecl;
  ma_sound_get_pinned_listener_index: function(const pSound: Pma_sound): ma_uint32; cdecl;
  ma_sound_get_pitch: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_position: function(const pSound: Pma_sound): ma_vec3f; cdecl;
  ma_sound_get_positioning: function(const pSound: Pma_sound): ma_positioning; cdecl;
  ma_sound_get_rolloff: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_get_time_in_pcm_frames: function(const pSound: Pma_sound): ma_uint64; cdecl;
  ma_sound_get_velocity: function(const pSound: Pma_sound): ma_vec3f; cdecl;
  ma_sound_get_volume: function(const pSound: Pma_sound): Single; cdecl;
  ma_sound_group_config_init: function(): ma_sound_group_config; cdecl;
  ma_sound_group_get_attenuation_model: function(const pGroup: Pma_sound_group): ma_attenuation_model; cdecl;
  ma_sound_group_get_cone: procedure(const pGroup: Pma_sound_group; pInnerAngleInRadians: PSingle; pOuterAngleInRadians: PSingle; pOuterGain: PSingle); cdecl;
  ma_sound_group_get_current_fade_volume: function(pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_direction: function(const pGroup: Pma_sound_group): ma_vec3f; cdecl;
  ma_sound_group_get_direction_to_listener: function(const pGroup: Pma_sound_group): ma_vec3f; cdecl;
  ma_sound_group_get_directional_attenuation_factor: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_doppler_factor: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_engine: function(const pGroup: Pma_sound_group): Pma_engine; cdecl;
  ma_sound_group_get_listener_index: function(const pGroup: Pma_sound_group): ma_uint32; cdecl;
  ma_sound_group_get_max_distance: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_max_gain: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_min_distance: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_min_gain: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_pan: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_pan_mode: function(const pGroup: Pma_sound_group): ma_pan_mode; cdecl;
  ma_sound_group_get_pinned_listener_index: function(const pGroup: Pma_sound_group): ma_uint32; cdecl;
  ma_sound_group_get_pitch: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_position: function(const pGroup: Pma_sound_group): ma_vec3f; cdecl;
  ma_sound_group_get_positioning: function(const pGroup: Pma_sound_group): ma_positioning; cdecl;
  ma_sound_group_get_rolloff: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_get_time_in_pcm_frames: function(const pGroup: Pma_sound_group): ma_uint64; cdecl;
  ma_sound_group_get_velocity: function(const pGroup: Pma_sound_group): ma_vec3f; cdecl;
  ma_sound_group_get_volume: function(const pGroup: Pma_sound_group): Single; cdecl;
  ma_sound_group_init: function(pEngine: Pma_engine; flags: ma_uint32; pParentGroup: Pma_sound_group; pGroup: Pma_sound_group): ma_result; cdecl;
  ma_sound_group_init_ex: function(pEngine: Pma_engine; const pConfig: Pma_sound_group_config; pGroup: Pma_sound_group): ma_result; cdecl;
  ma_sound_group_is_playing: function(const pGroup: Pma_sound_group): ma_bool32; cdecl;
  ma_sound_group_is_spatialization_enabled: function(const pGroup: Pma_sound_group): ma_bool32; cdecl;
  ma_sound_group_set_attenuation_model: procedure(pGroup: Pma_sound_group; attenuationModel: ma_attenuation_model); cdecl;
  ma_sound_group_set_cone: procedure(pGroup: Pma_sound_group; innerAngleInRadians: Single; outerAngleInRadians: Single; outerGain: Single); cdecl;
  ma_sound_group_set_direction: procedure(pGroup: Pma_sound_group; x: Single; y: Single; z: Single); cdecl;
  ma_sound_group_set_directional_attenuation_factor: procedure(pGroup: Pma_sound_group; directionalAttenuationFactor: Single); cdecl;
  ma_sound_group_set_doppler_factor: procedure(pGroup: Pma_sound_group; dopplerFactor: Single); cdecl;
  ma_sound_group_set_fade_in_milliseconds: procedure(pGroup: Pma_sound_group; volumeBeg: Single; volumeEnd: Single; fadeLengthInMilliseconds: ma_uint64); cdecl;
  ma_sound_group_set_fade_in_pcm_frames: procedure(pGroup: Pma_sound_group; volumeBeg: Single; volumeEnd: Single; fadeLengthInFrames: ma_uint64); cdecl;
  ma_sound_group_set_max_distance: procedure(pGroup: Pma_sound_group; maxDistance: Single); cdecl;
  ma_sound_group_set_max_gain: procedure(pGroup: Pma_sound_group; maxGain: Single); cdecl;
  ma_sound_group_set_min_distance: procedure(pGroup: Pma_sound_group; minDistance: Single); cdecl;
  ma_sound_group_set_min_gain: procedure(pGroup: Pma_sound_group; minGain: Single); cdecl;
  ma_sound_group_set_pan: procedure(pGroup: Pma_sound_group; pan: Single); cdecl;
  ma_sound_group_set_pan_mode: procedure(pGroup: Pma_sound_group; panMode: ma_pan_mode); cdecl;
  ma_sound_group_set_pinned_listener_index: procedure(pGroup: Pma_sound_group; listenerIndex: ma_uint32); cdecl;
  ma_sound_group_set_pitch: procedure(pGroup: Pma_sound_group; pitch: Single); cdecl;
  ma_sound_group_set_position: procedure(pGroup: Pma_sound_group; x: Single; y: Single; z: Single); cdecl;
  ma_sound_group_set_positioning: procedure(pGroup: Pma_sound_group; positioning: ma_positioning); cdecl;
  ma_sound_group_set_rolloff: procedure(pGroup: Pma_sound_group; rolloff: Single); cdecl;
  ma_sound_group_set_spatialization_enabled: procedure(pGroup: Pma_sound_group; enabled: ma_bool32); cdecl;
  ma_sound_group_set_start_time_in_milliseconds: procedure(pGroup: Pma_sound_group; absoluteGlobalTimeInMilliseconds: ma_uint64); cdecl;
  ma_sound_group_set_start_time_in_pcm_frames: procedure(pGroup: Pma_sound_group; absoluteGlobalTimeInFrames: ma_uint64); cdecl;
  ma_sound_group_set_stop_time_in_milliseconds: procedure(pGroup: Pma_sound_group; absoluteGlobalTimeInMilliseconds: ma_uint64); cdecl;
  ma_sound_group_set_stop_time_in_pcm_frames: procedure(pGroup: Pma_sound_group; absoluteGlobalTimeInFrames: ma_uint64); cdecl;
  ma_sound_group_set_velocity: procedure(pGroup: Pma_sound_group; x: Single; y: Single; z: Single); cdecl;
  ma_sound_group_set_volume: procedure(pGroup: Pma_sound_group; volume: Single); cdecl;
  ma_sound_group_start: function(pGroup: Pma_sound_group): ma_result; cdecl;
  ma_sound_group_stop: function(pGroup: Pma_sound_group): ma_result; cdecl;
  ma_sound_group_uninit: procedure(pGroup: Pma_sound_group); cdecl;
  ma_sound_init_copy: function(pEngine: Pma_engine; const pExistingSound: Pma_sound; flags: ma_uint32; pGroup: Pma_sound_group; pSound: Pma_sound): ma_result; cdecl;
  ma_sound_init_ex: function(pEngine: Pma_engine; const pConfig: Pma_sound_config; pSound: Pma_sound): ma_result; cdecl;
  ma_sound_init_from_data_source: function(pEngine: Pma_engine; pDataSource: Pma_data_source; flags: ma_uint32; pGroup: Pma_sound_group; pSound: Pma_sound): ma_result; cdecl;
  ma_sound_init_from_file: function(pEngine: Pma_engine; const pFilePath: PUTF8Char; flags: ma_uint32; pGroup: Pma_sound_group; pDoneFence: Pma_fence; pSound: Pma_sound): ma_result; cdecl;
  ma_sound_init_from_file_w: function(pEngine: Pma_engine; const pFilePath: PWideChar; flags: ma_uint32; pGroup: Pma_sound_group; pDoneFence: Pma_fence; pSound: Pma_sound): ma_result; cdecl;
  ma_sound_is_looping: function(const pSound: Pma_sound): ma_bool32; cdecl;
  ma_sound_is_playing: function(const pSound: Pma_sound): ma_bool32; cdecl;
  ma_sound_is_spatialization_enabled: function(const pSound: Pma_sound): ma_bool32; cdecl;
  ma_sound_seek_to_pcm_frame: function(pSound: Pma_sound; frameIndex: ma_uint64): ma_result; cdecl;
  ma_sound_set_attenuation_model: procedure(pSound: Pma_sound; attenuationModel: ma_attenuation_model); cdecl;
  ma_sound_set_cone: procedure(pSound: Pma_sound; innerAngleInRadians: Single; outerAngleInRadians: Single; outerGain: Single); cdecl;
  ma_sound_set_direction: procedure(pSound: Pma_sound; x: Single; y: Single; z: Single); cdecl;
  ma_sound_set_directional_attenuation_factor: procedure(pSound: Pma_sound; directionalAttenuationFactor: Single); cdecl;
  ma_sound_set_doppler_factor: procedure(pSound: Pma_sound; dopplerFactor: Single); cdecl;
  ma_sound_set_fade_in_milliseconds: procedure(pSound: Pma_sound; volumeBeg: Single; volumeEnd: Single; fadeLengthInMilliseconds: ma_uint64); cdecl;
  ma_sound_set_fade_in_pcm_frames: procedure(pSound: Pma_sound; volumeBeg: Single; volumeEnd: Single; fadeLengthInFrames: ma_uint64); cdecl;
  ma_sound_set_looping: procedure(pSound: Pma_sound; isLooping: ma_bool32); cdecl;
  ma_sound_set_max_distance: procedure(pSound: Pma_sound; maxDistance: Single); cdecl;
  ma_sound_set_max_gain: procedure(pSound: Pma_sound; maxGain: Single); cdecl;
  ma_sound_set_min_distance: procedure(pSound: Pma_sound; minDistance: Single); cdecl;
  ma_sound_set_min_gain: procedure(pSound: Pma_sound; minGain: Single); cdecl;
  ma_sound_set_pan: procedure(pSound: Pma_sound; pan: Single); cdecl;
  ma_sound_set_pan_mode: procedure(pSound: Pma_sound; panMode: ma_pan_mode); cdecl;
  ma_sound_set_pinned_listener_index: procedure(pSound: Pma_sound; listenerIndex: ma_uint32); cdecl;
  ma_sound_set_pitch: procedure(pSound: Pma_sound; pitch: Single); cdecl;
  ma_sound_set_position: procedure(pSound: Pma_sound; x: Single; y: Single; z: Single); cdecl;
  ma_sound_set_positioning: procedure(pSound: Pma_sound; positioning: ma_positioning); cdecl;
  ma_sound_set_rolloff: procedure(pSound: Pma_sound; rolloff: Single); cdecl;
  ma_sound_set_spatialization_enabled: procedure(pSound: Pma_sound; enabled: ma_bool32); cdecl;
  ma_sound_set_start_time_in_milliseconds: procedure(pSound: Pma_sound; absoluteGlobalTimeInMilliseconds: ma_uint64); cdecl;
  ma_sound_set_start_time_in_pcm_frames: procedure(pSound: Pma_sound; absoluteGlobalTimeInFrames: ma_uint64); cdecl;
  ma_sound_set_stop_time_in_milliseconds: procedure(pSound: Pma_sound; absoluteGlobalTimeInMilliseconds: ma_uint64); cdecl;
  ma_sound_set_stop_time_in_pcm_frames: procedure(pSound: Pma_sound; absoluteGlobalTimeInFrames: ma_uint64); cdecl;
  ma_sound_set_velocity: procedure(pSound: Pma_sound; x: Single; y: Single; z: Single); cdecl;
  ma_sound_set_volume: procedure(pSound: Pma_sound; volume: Single); cdecl;
  ma_sound_start: function(pSound: Pma_sound): ma_result; cdecl;
  ma_sound_stop: function(pSound: Pma_sound): ma_result; cdecl;
  ma_sound_uninit: procedure(pSound: Pma_sound); cdecl;
  ma_spatializer_config_init: function(channelsIn: ma_uint32; channelsOut: ma_uint32): ma_spatializer_config; cdecl;
  ma_spatializer_get_attenuation_model: function(const pSpatializer: Pma_spatializer): ma_attenuation_model; cdecl;
  ma_spatializer_get_cone: procedure(const pSpatializer: Pma_spatializer; pInnerAngleInRadians: PSingle; pOuterAngleInRadians: PSingle; pOuterGain: PSingle); cdecl;
  ma_spatializer_get_direction: function(const pSpatializer: Pma_spatializer): ma_vec3f; cdecl;
  ma_spatializer_get_directional_attenuation_factor: function(const pSpatializer: Pma_spatializer): Single; cdecl;
  ma_spatializer_get_doppler_factor: function(const pSpatializer: Pma_spatializer): Single; cdecl;
  ma_spatializer_get_heap_size: function(const pConfig: Pma_spatializer_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_spatializer_get_input_channels: function(const pSpatializer: Pma_spatializer): ma_uint32; cdecl;
  ma_spatializer_get_max_distance: function(const pSpatializer: Pma_spatializer): Single; cdecl;
  ma_spatializer_get_max_gain: function(const pSpatializer: Pma_spatializer): Single; cdecl;
  ma_spatializer_get_min_distance: function(const pSpatializer: Pma_spatializer): Single; cdecl;
  ma_spatializer_get_min_gain: function(const pSpatializer: Pma_spatializer): Single; cdecl;
  ma_spatializer_get_output_channels: function(const pSpatializer: Pma_spatializer): ma_uint32; cdecl;
  ma_spatializer_get_position: function(const pSpatializer: Pma_spatializer): ma_vec3f; cdecl;
  ma_spatializer_get_positioning: function(const pSpatializer: Pma_spatializer): ma_positioning; cdecl;
  ma_spatializer_get_relative_position_and_direction: procedure(const pSpatializer: Pma_spatializer; const pListener: Pma_spatializer_listener; pRelativePos: Pma_vec3f; pRelativeDir: Pma_vec3f); cdecl;
  ma_spatializer_get_rolloff: function(const pSpatializer: Pma_spatializer): Single; cdecl;
  ma_spatializer_get_velocity: function(const pSpatializer: Pma_spatializer): ma_vec3f; cdecl;
  ma_spatializer_init: function(const pConfig: Pma_spatializer_config; const pAllocationCallbacks: Pma_allocation_callbacks; pSpatializer: Pma_spatializer): ma_result; cdecl;
  ma_spatializer_init_preallocated: function(const pConfig: Pma_spatializer_config; pHeap: Pointer; pSpatializer: Pma_spatializer): ma_result; cdecl;
  ma_spatializer_listener_config_init: function(channelsOut: ma_uint32): ma_spatializer_listener_config; cdecl;
  ma_spatializer_listener_get_channel_map: function(pListener: Pma_spatializer_listener): Pma_channel; cdecl;
  ma_spatializer_listener_get_cone: procedure(const pListener: Pma_spatializer_listener; pInnerAngleInRadians: PSingle; pOuterAngleInRadians: PSingle; pOuterGain: PSingle); cdecl;
  ma_spatializer_listener_get_direction: function(const pListener: Pma_spatializer_listener): ma_vec3f; cdecl;
  ma_spatializer_listener_get_heap_size: function(const pConfig: Pma_spatializer_listener_config; pHeapSizeInBytes: PNativeUInt): ma_result; cdecl;
  ma_spatializer_listener_get_position: function(const pListener: Pma_spatializer_listener): ma_vec3f; cdecl;
  ma_spatializer_listener_get_speed_of_sound: function(const pListener: Pma_spatializer_listener): Single; cdecl;
  ma_spatializer_listener_get_velocity: function(const pListener: Pma_spatializer_listener): ma_vec3f; cdecl;
  ma_spatializer_listener_get_world_up: function(const pListener: Pma_spatializer_listener): ma_vec3f; cdecl;
  ma_spatializer_listener_init: function(const pConfig: Pma_spatializer_listener_config; const pAllocationCallbacks: Pma_allocation_callbacks; pListener: Pma_spatializer_listener): ma_result; cdecl;
  ma_spatializer_listener_init_preallocated: function(const pConfig: Pma_spatializer_listener_config; pHeap: Pointer; pListener: Pma_spatializer_listener): ma_result; cdecl;
  ma_spatializer_listener_is_enabled: function(const pListener: Pma_spatializer_listener): ma_bool32; cdecl;
  ma_spatializer_listener_set_cone: procedure(pListener: Pma_spatializer_listener; innerAngleInRadians: Single; outerAngleInRadians: Single; outerGain: Single); cdecl;
  ma_spatializer_listener_set_direction: procedure(pListener: Pma_spatializer_listener; x: Single; y: Single; z: Single); cdecl;
  ma_spatializer_listener_set_enabled: procedure(pListener: Pma_spatializer_listener; isEnabled: ma_bool32); cdecl;
  ma_spatializer_listener_set_position: procedure(pListener: Pma_spatializer_listener; x: Single; y: Single; z: Single); cdecl;
  ma_spatializer_listener_set_speed_of_sound: procedure(pListener: Pma_spatializer_listener; speedOfSound: Single); cdecl;
  ma_spatializer_listener_set_velocity: procedure(pListener: Pma_spatializer_listener; x: Single; y: Single; z: Single); cdecl;
  ma_spatializer_listener_set_world_up: procedure(pListener: Pma_spatializer_listener; x: Single; y: Single; z: Single); cdecl;
  ma_spatializer_listener_uninit: procedure(pListener: Pma_spatializer_listener; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_spatializer_process_pcm_frames: function(pSpatializer: Pma_spatializer; pListener: Pma_spatializer_listener; pFramesOut: Pointer; const pFramesIn: Pointer; frameCount: ma_uint64): ma_result; cdecl;
  ma_spatializer_set_attenuation_model: procedure(pSpatializer: Pma_spatializer; attenuationModel: ma_attenuation_model); cdecl;
  ma_spatializer_set_cone: procedure(pSpatializer: Pma_spatializer; innerAngleInRadians: Single; outerAngleInRadians: Single; outerGain: Single); cdecl;
  ma_spatializer_set_direction: procedure(pSpatializer: Pma_spatializer; x: Single; y: Single; z: Single); cdecl;
  ma_spatializer_set_directional_attenuation_factor: procedure(pSpatializer: Pma_spatializer; directionalAttenuationFactor: Single); cdecl;
  ma_spatializer_set_doppler_factor: procedure(pSpatializer: Pma_spatializer; dopplerFactor: Single); cdecl;
  ma_spatializer_set_max_distance: procedure(pSpatializer: Pma_spatializer; maxDistance: Single); cdecl;
  ma_spatializer_set_max_gain: procedure(pSpatializer: Pma_spatializer; maxGain: Single); cdecl;
  ma_spatializer_set_min_distance: procedure(pSpatializer: Pma_spatializer; minDistance: Single); cdecl;
  ma_spatializer_set_min_gain: procedure(pSpatializer: Pma_spatializer; minGain: Single); cdecl;
  ma_spatializer_set_position: procedure(pSpatializer: Pma_spatializer; x: Single; y: Single; z: Single); cdecl;
  ma_spatializer_set_positioning: procedure(pSpatializer: Pma_spatializer; positioning: ma_positioning); cdecl;
  ma_spatializer_set_rolloff: procedure(pSpatializer: Pma_spatializer; rolloff: Single); cdecl;
  ma_spatializer_set_velocity: procedure(pSpatializer: Pma_spatializer; x: Single; y: Single; z: Single); cdecl;
  ma_spatializer_uninit: procedure(pSpatializer: Pma_spatializer; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_spinlock_lock: function(pSpinlock: Pma_spinlock): ma_result; cdecl;
  ma_spinlock_lock_noyield: function(pSpinlock: Pma_spinlock): ma_result; cdecl;
  ma_spinlock_unlock: function(pSpinlock: Pma_spinlock): ma_result; cdecl;
  ma_splitter_node_config_init: function(channels: ma_uint32): ma_splitter_node_config; cdecl;
  ma_splitter_node_init: function(pNodeGraph: Pma_node_graph; const pConfig: Pma_splitter_node_config; const pAllocationCallbacks: Pma_allocation_callbacks; pSplitterNode: Pma_splitter_node): ma_result; cdecl;
  ma_splitter_node_uninit: procedure(pSplitterNode: Pma_splitter_node; const pAllocationCallbacks: Pma_allocation_callbacks); cdecl;
  ma_version: procedure(pMajor: Pma_uint32; pMinor: Pma_uint32; pRevision: Pma_uint32); cdecl;
  ma_version_string: function(): PUTF8Char; cdecl;
  ma_vfs_close: function(pVFS: Pma_vfs; _file: ma_vfs_file): ma_result; cdecl;
  ma_vfs_info: function(pVFS: Pma_vfs; _file: ma_vfs_file; pInfo: Pma_file_info): ma_result; cdecl;
  ma_vfs_open: function(pVFS: Pma_vfs; const pFilePath: PUTF8Char; openMode: ma_uint32; pFile: Pma_vfs_file): ma_result; cdecl;
  ma_vfs_open_and_read_file: function(pVFS: Pma_vfs; const pFilePath: PUTF8Char; ppData: PPointer; pSize: PNativeUInt; const pAllocationCallbacks: Pma_allocation_callbacks): ma_result; cdecl;
  ma_vfs_open_w: function(pVFS: Pma_vfs; const pFilePath: PWideChar; openMode: ma_uint32; pFile: Pma_vfs_file): ma_result; cdecl;
  ma_vfs_read: function(pVFS: Pma_vfs; _file: ma_vfs_file; pDst: Pointer; sizeInBytes: NativeUInt; pBytesRead: PNativeUInt): ma_result; cdecl;
  ma_vfs_seek: function(pVFS: Pma_vfs; _file: ma_vfs_file; offset: ma_int64; origin: ma_seek_origin): ma_result; cdecl;
  ma_vfs_tell: function(pVFS: Pma_vfs; _file: ma_vfs_file; pCursor: Pma_int64): ma_result; cdecl;
  ma_vfs_write: function(pVFS: Pma_vfs; _file: ma_vfs_file; const pSrc: Pointer; sizeInBytes: NativeUInt; pBytesWritten: PNativeUInt): ma_result; cdecl;
  ma_volume_db_to_linear: function(gain: Single): Single; cdecl;
  ma_volume_linear_to_db: function(factor: Single): Single; cdecl;
  ma_waveform_config_init: function(format: ma_format; channels: ma_uint32; sampleRate: ma_uint32; _type: ma_waveform_type; amplitude: Double; frequency: Double): ma_waveform_config; cdecl;
  ma_waveform_init: function(const pConfig: Pma_waveform_config; pWaveform: Pma_waveform): ma_result; cdecl;
  ma_waveform_read_pcm_frames: function(pWaveform: Pma_waveform; pFramesOut: Pointer; frameCount: ma_uint64; pFramesRead: Pma_uint64): ma_result; cdecl;
  ma_waveform_seek_to_pcm_frame: function(pWaveform: Pma_waveform; frameIndex: ma_uint64): ma_result; cdecl;
  ma_waveform_set_amplitude: function(pWaveform: Pma_waveform; amplitude: Double): ma_result; cdecl;
  ma_waveform_set_frequency: function(pWaveform: Pma_waveform; frequency: Double): ma_result; cdecl;
  ma_waveform_set_sample_rate: function(pWaveform: Pma_waveform; sampleRate: ma_uint32): ma_result; cdecl;
  ma_waveform_set_type: function(pWaveform: Pma_waveform; _type: ma_waveform_type): ma_result; cdecl;
  ma_waveform_uninit: procedure(pWaveform: Pma_waveform); cdecl;
  nk__begin: function(p1: Pnk_context): Pnk_command; cdecl;
  nk__next: function(p1: Pnk_context; const p2: Pnk_command): Pnk_command; cdecl;
  nk_begin: function(ctx: Pnk_context; const title: PUTF8Char; bounds: nk_rect; flags: nk_flags): nk_bool; cdecl;
  nk_begin_titled: function(ctx: Pnk_context; const name: PUTF8Char; const title: PUTF8Char; bounds: nk_rect; flags: nk_flags): nk_bool; cdecl;
  nk_buffer_clear: procedure(p1: Pnk_buffer); cdecl;
  nk_buffer_free: procedure(p1: Pnk_buffer); cdecl;
  nk_buffer_info: procedure(p1: Pnk_memory_status; p2: Pnk_buffer); cdecl;
  nk_buffer_init: procedure(p1: Pnk_buffer; const p2: Pnk_allocator; size: nk_size); cdecl;
  nk_buffer_init_default: procedure(p1: Pnk_buffer); cdecl;
  nk_buffer_init_fixed: procedure(p1: Pnk_buffer; memory: Pointer; size: nk_size); cdecl;
  nk_buffer_mark: procedure(p1: Pnk_buffer; _type: nk_buffer_allocation_type); cdecl;
  nk_buffer_memory: function(p1: Pnk_buffer): Pointer; cdecl;
  nk_buffer_memory_const: function(const p1: Pnk_buffer): Pointer; cdecl;
  nk_buffer_push: procedure(p1: Pnk_buffer; _type: nk_buffer_allocation_type; const memory: Pointer; size: nk_size; align: nk_size); cdecl;
  nk_buffer_reset: procedure(p1: Pnk_buffer; _type: nk_buffer_allocation_type); cdecl;
  nk_buffer_total: function(p1: Pnk_buffer): nk_size; cdecl;
  nk_button_color: function(p1: Pnk_context; p2: nk_color): nk_bool; cdecl;
  nk_button_image: function(p1: Pnk_context; img: nk_image): nk_bool; cdecl;
  nk_button_image_label: function(p1: Pnk_context; img: nk_image; const p3: PUTF8Char; text_alignment: nk_flags): nk_bool; cdecl;
  nk_button_image_label_styled: function(p1: Pnk_context; const p2: Pnk_style_button; img: nk_image; const p4: PUTF8Char; text_alignment: nk_flags): nk_bool; cdecl;
  nk_button_image_styled: function(p1: Pnk_context; const p2: Pnk_style_button; img: nk_image): nk_bool; cdecl;
  nk_button_image_text: function(p1: Pnk_context; img: nk_image; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_button_image_text_styled: function(p1: Pnk_context; const p2: Pnk_style_button; img: nk_image; const p4: PUTF8Char; p5: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_button_label: function(p1: Pnk_context; const title: PUTF8Char): nk_bool; cdecl;
  nk_button_label_styled: function(p1: Pnk_context; const p2: Pnk_style_button; const title: PUTF8Char): nk_bool; cdecl;
  nk_button_pop_behavior: function(p1: Pnk_context): nk_bool; cdecl;
  nk_button_push_behavior: function(p1: Pnk_context; p2: nk_button_behavior): nk_bool; cdecl;
  nk_button_set_behavior: procedure(p1: Pnk_context; p2: nk_button_behavior); cdecl;
  nk_button_symbol: function(p1: Pnk_context; p2: nk_symbol_type): nk_bool; cdecl;
  nk_button_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; text_alignment: nk_flags): nk_bool; cdecl;
  nk_button_symbol_label_styled: function(ctx: Pnk_context; const style: Pnk_style_button; symbol: nk_symbol_type; const title: PUTF8Char; align: nk_flags): nk_bool; cdecl;
  nk_button_symbol_styled: function(p1: Pnk_context; const p2: Pnk_style_button; p3: nk_symbol_type): nk_bool; cdecl;
  nk_button_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_button_symbol_text_styled: function(p1: Pnk_context; const p2: Pnk_style_button; p3: nk_symbol_type; const p4: PUTF8Char; p5: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_button_text: function(p1: Pnk_context; const title: PUTF8Char; len: Integer): nk_bool; cdecl;
  nk_button_text_styled: function(p1: Pnk_context; const p2: Pnk_style_button; const title: PUTF8Char; len: Integer): nk_bool; cdecl;
  nk_chart_add_slot: procedure(ctx: Pnk_context; const p2: nk_chart_type; count: Integer; min_value: Single; max_value: Single); cdecl;
  nk_chart_add_slot_colored: procedure(ctx: Pnk_context; const p2: nk_chart_type; p3: nk_color; active: nk_color; count: Integer; min_value: Single; max_value: Single); cdecl;
  nk_chart_begin: function(p1: Pnk_context; p2: nk_chart_type; num: Integer; min: Single; max: Single): nk_bool; cdecl;
  nk_chart_begin_colored: function(p1: Pnk_context; p2: nk_chart_type; p3: nk_color; active: nk_color; num: Integer; min: Single; max: Single): nk_bool; cdecl;
  nk_chart_end: procedure(p1: Pnk_context); cdecl;
  nk_chart_push: function(p1: Pnk_context; p2: Single): nk_flags; cdecl;
  nk_chart_push_slot: function(p1: Pnk_context; p2: Single; p3: Integer): nk_flags; cdecl;
  nk_check_flags_label: function(p1: Pnk_context; const p2: PUTF8Char; flags: Cardinal; value: Cardinal): Cardinal; cdecl;
  nk_check_flags_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; flags: Cardinal; value: Cardinal): Cardinal; cdecl;
  nk_check_label: function(p1: Pnk_context; const p2: PUTF8Char; active: nk_bool): nk_bool; cdecl;
  nk_check_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: nk_bool): nk_bool; cdecl;
  nk_checkbox_flags_label: function(p1: Pnk_context; const p2: PUTF8Char; flags: PCardinal; value: Cardinal): nk_bool; cdecl;
  nk_checkbox_flags_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; flags: PCardinal; value: Cardinal): nk_bool; cdecl;
  nk_checkbox_label: function(p1: Pnk_context; const p2: PUTF8Char; active: Pnk_bool): nk_bool; cdecl;
  nk_checkbox_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: Pnk_bool): nk_bool; cdecl;
  nk_clear: procedure(p1: Pnk_context); cdecl;
  nk_color_cf: function(p1: nk_color): nk_colorf; cdecl;
  nk_color_d: procedure(r: PDouble; g: PDouble; b: PDouble; a: PDouble; p5: nk_color); cdecl;
  nk_color_dv: procedure(rgba_out: PDouble; p2: nk_color); cdecl;
  nk_color_f: procedure(r: PSingle; g: PSingle; b: PSingle; a: PSingle; p5: nk_color); cdecl;
  nk_color_fv: procedure(rgba_out: PSingle; p2: nk_color); cdecl;
  nk_color_hex_rgb: procedure(output: PUTF8Char; p2: nk_color); cdecl;
  nk_color_hex_rgba: procedure(output: PUTF8Char; p2: nk_color); cdecl;
  nk_color_hsv_b: procedure(out_h: Pnk_byte; out_s: Pnk_byte; out_v: Pnk_byte; p4: nk_color); cdecl;
  nk_color_hsv_bv: procedure(hsv_out: Pnk_byte; p2: nk_color); cdecl;
  nk_color_hsv_f: procedure(out_h: PSingle; out_s: PSingle; out_v: PSingle; p4: nk_color); cdecl;
  nk_color_hsv_fv: procedure(hsv_out: PSingle; p2: nk_color); cdecl;
  nk_color_hsv_i: procedure(out_h: PInteger; out_s: PInteger; out_v: PInteger; p4: nk_color); cdecl;
  nk_color_hsv_iv: procedure(hsv_out: PInteger; p2: nk_color); cdecl;
  nk_color_hsva_b: procedure(h: Pnk_byte; s: Pnk_byte; v: Pnk_byte; a: Pnk_byte; p5: nk_color); cdecl;
  nk_color_hsva_bv: procedure(hsva_out: Pnk_byte; p2: nk_color); cdecl;
  nk_color_hsva_f: procedure(out_h: PSingle; out_s: PSingle; out_v: PSingle; out_a: PSingle; p5: nk_color); cdecl;
  nk_color_hsva_fv: procedure(hsva_out: PSingle; p2: nk_color); cdecl;
  nk_color_hsva_i: procedure(h: PInteger; s: PInteger; v: PInteger; a: PInteger; p5: nk_color); cdecl;
  nk_color_hsva_iv: procedure(hsva_out: PInteger; p2: nk_color); cdecl;
  nk_color_pick: function(p1: Pnk_context; p2: Pnk_colorf; p3: nk_color_format): nk_bool; cdecl;
  nk_color_picker: function(p1: Pnk_context; p2: nk_colorf; p3: nk_color_format): nk_colorf; cdecl;
  nk_color_u32: function(p1: nk_color): nk_uint; cdecl;
  nk_colorf_hsva_f: procedure(out_h: PSingle; out_s: PSingle; out_v: PSingle; out_a: PSingle; _in: nk_colorf); cdecl;
  nk_colorf_hsva_fv: procedure(hsva: PSingle; _in: nk_colorf); cdecl;
  nk_combo: function(p1: Pnk_context; items: PPUTF8Char; count: Integer; selected: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;
  nk_combo_begin_color: function(p1: Pnk_context; color: nk_color; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_image: function(p1: Pnk_context; img: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_image_label: function(p1: Pnk_context; const selected: PUTF8Char; p3: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_image_text: function(p1: Pnk_context; const selected: PUTF8Char; p3: Integer; p4: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_label: function(p1: Pnk_context; const selected: PUTF8Char; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_symbol: function(p1: Pnk_context; p2: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_symbol_label: function(p1: Pnk_context; const selected: PUTF8Char; p3: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_symbol_text: function(p1: Pnk_context; const selected: PUTF8Char; p3: Integer; p4: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_combo_begin_text: function(p1: Pnk_context; const selected: PUTF8Char; p3: Integer; size: nk_vec2): nk_bool; cdecl;
  nk_combo_callback: function(p1: Pnk_context; item_getter: nk_combo_callback_item_getter; userdata: Pointer; selected: Integer; count: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;
  nk_combo_close: procedure(p1: Pnk_context); cdecl;
  nk_combo_end: procedure(p1: Pnk_context); cdecl;
  nk_combo_item_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_item_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_item_label: function(p1: Pnk_context; const p2: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_item_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_item_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_item_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_combo_separator: function(p1: Pnk_context; const items_separated_by_separator: PUTF8Char; separator: Integer; selected: Integer; count: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;
  nk_combo_string: function(p1: Pnk_context; const items_separated_by_zeros: PUTF8Char; selected: Integer; count: Integer; item_height: Integer; size: nk_vec2): Integer; cdecl;
  nk_combobox: procedure(p1: Pnk_context; items: PPUTF8Char; count: Integer; selected: PInteger; item_height: Integer; size: nk_vec2); cdecl;
  nk_combobox_callback: procedure(p1: Pnk_context; item_getter: nk_combobox_callback_item_getter; p3: Pointer; selected: PInteger; count: Integer; item_height: Integer; size: nk_vec2); cdecl;
  nk_combobox_separator: procedure(p1: Pnk_context; const items_separated_by_separator: PUTF8Char; separator: Integer; selected: PInteger; count: Integer; item_height: Integer; size: nk_vec2); cdecl;
  nk_combobox_string: procedure(p1: Pnk_context; const items_separated_by_zeros: PUTF8Char; selected: PInteger; count: Integer; item_height: Integer; size: nk_vec2); cdecl;
  nk_contextual_begin: function(p1: Pnk_context; p2: nk_flags; p3: nk_vec2; trigger_bounds: nk_rect): nk_bool; cdecl;
  nk_contextual_close: procedure(p1: Pnk_context); cdecl;
  nk_contextual_end: procedure(p1: Pnk_context); cdecl;
  nk_contextual_item_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_contextual_item_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; len: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_contextual_item_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags): nk_bool; cdecl;
  nk_contextual_item_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_contextual_item_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_contextual_item_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags): nk_bool; cdecl;
  nk_draw_image: procedure(p1: Pnk_command_buffer; p2: nk_rect; const p3: Pnk_image; p4: nk_color); cdecl;
  nk_draw_nine_slice: procedure(p1: Pnk_command_buffer; p2: nk_rect; const p3: Pnk_nine_slice; p4: nk_color); cdecl;
  nk_draw_text: procedure(p1: Pnk_command_buffer; p2: nk_rect; const text: PUTF8Char; len: Integer; const p5: Pnk_user_font; p6: nk_color; p7: nk_color); cdecl;
  nk_edit_buffer: function(p1: Pnk_context; p2: nk_flags; p3: Pnk_text_edit; p4: nk_plugin_filter): nk_flags; cdecl;
  nk_edit_focus: procedure(p1: Pnk_context; flags: nk_flags); cdecl;
  nk_edit_string: function(p1: Pnk_context; p2: nk_flags; buffer: PUTF8Char; len: PInteger; max: Integer; p6: nk_plugin_filter): nk_flags; cdecl;
  nk_edit_string_zero_terminated: function(p1: Pnk_context; p2: nk_flags; buffer: PUTF8Char; max: Integer; p5: nk_plugin_filter): nk_flags; cdecl;
  nk_edit_unfocus: procedure(p1: Pnk_context); cdecl;
  nk_end: procedure(ctx: Pnk_context); cdecl;
  nk_fill_arc: procedure(p1: Pnk_command_buffer; cx: Single; cy: Single; radius: Single; a_min: Single; a_max: Single; p7: nk_color); cdecl;
  nk_fill_circle: procedure(p1: Pnk_command_buffer; p2: nk_rect; p3: nk_color); cdecl;
  nk_fill_polygon: procedure(p1: Pnk_command_buffer; p2: PSingle; point_count: Integer; p4: nk_color); cdecl;
  nk_fill_rect: procedure(p1: Pnk_command_buffer; p2: nk_rect; rounding: Single; p4: nk_color); cdecl;
  nk_fill_rect_multi_color: procedure(p1: Pnk_command_buffer; p2: nk_rect; left: nk_color; top: nk_color; right: nk_color; bottom: nk_color); cdecl;
  nk_fill_triangle: procedure(p1: Pnk_command_buffer; x0: Single; y0: Single; x1: Single; y1: Single; x2: Single; y2: Single; p8: nk_color); cdecl;
  nk_filter_ascii: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_binary: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_decimal: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_default: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_float: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_hex: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_filter_oct: function(const p1: Pnk_text_edit; unicode: nk_rune): nk_bool; cdecl;
  nk_font_atlas_add: function(p1: Pnk_font_atlas; const p2: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_add_compressed: function(p1: Pnk_font_atlas; memory: Pointer; size: nk_size; height: Single; const p5: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_add_compressed_base85: function(p1: Pnk_font_atlas; const data: PUTF8Char; height: Single; const config: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_add_default: function(p1: Pnk_font_atlas; height: Single; const p3: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_add_from_file: function(atlas: Pnk_font_atlas; const file_path: PUTF8Char; height: Single; const p4: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_add_from_memory: function(atlas: Pnk_font_atlas; memory: Pointer; size: nk_size; height: Single; const config: Pnk_font_config): Pnk_font; cdecl;
  nk_font_atlas_bake: function(p1: Pnk_font_atlas; width: PInteger; height: PInteger; p4: nk_font_atlas_format): Pointer; cdecl;
  nk_font_atlas_begin: procedure(p1: Pnk_font_atlas); cdecl;
  nk_font_atlas_cleanup: procedure(atlas: Pnk_font_atlas); cdecl;
  nk_font_atlas_clear: procedure(p1: Pnk_font_atlas); cdecl;
  nk_font_atlas_end: procedure(p1: Pnk_font_atlas; tex: nk_handle; p3: Pnk_draw_null_texture); cdecl;
  nk_font_atlas_init: procedure(p1: Pnk_font_atlas; p2: Pnk_allocator); cdecl;
  nk_font_atlas_init_custom: procedure(p1: Pnk_font_atlas; persistent: Pnk_allocator; transient: Pnk_allocator); cdecl;
  nk_font_atlas_init_default: procedure(p1: Pnk_font_atlas); cdecl;
  nk_font_chinese_glyph_ranges: function(): Pnk_rune; cdecl;
  nk_font_config_: function(pixel_height: Single): nk_font_config; cdecl;
  nk_font_cyrillic_glyph_ranges: function(): Pnk_rune; cdecl;
  nk_font_default_glyph_ranges: function(): Pnk_rune; cdecl;
  nk_font_find_glyph: function(p1: Pnk_font; unicode: nk_rune): Pnk_font_glyph; cdecl;
  nk_font_korean_glyph_ranges: function(): Pnk_rune; cdecl;
  nk_free: procedure(p1: Pnk_context); cdecl;
  nk_get_null_rect: function(): nk_rect; cdecl;
  nk_group_begin: function(p1: Pnk_context; const title: PUTF8Char; p3: nk_flags): nk_bool; cdecl;
  nk_group_begin_titled: function(p1: Pnk_context; const name: PUTF8Char; const title: PUTF8Char; p4: nk_flags): nk_bool; cdecl;
  nk_group_end: procedure(p1: Pnk_context); cdecl;
  nk_group_get_scroll: procedure(p1: Pnk_context; const id: PUTF8Char; x_offset: Pnk_uint; y_offset: Pnk_uint); cdecl;
  nk_group_scrolled_begin: function(p1: Pnk_context; off: Pnk_scroll; const title: PUTF8Char; p4: nk_flags): nk_bool; cdecl;
  nk_group_scrolled_end: procedure(p1: Pnk_context); cdecl;
  nk_group_scrolled_offset_begin: function(p1: Pnk_context; x_offset: Pnk_uint; y_offset: Pnk_uint; const title: PUTF8Char; flags: nk_flags): nk_bool; cdecl;
  nk_group_set_scroll: procedure(p1: Pnk_context; const id: PUTF8Char; x_offset: nk_uint; y_offset: nk_uint); cdecl;
  nk_handle_id: function(p1: Integer): nk_handle; cdecl;
  nk_handle_ptr: function(p1: Pointer): nk_handle; cdecl;
  nk_hsv: function(h: Integer; s: Integer; v: Integer): nk_color; cdecl;
  nk_hsv_bv: function(const hsv: Pnk_byte): nk_color; cdecl;
  nk_hsv_f: function(h: Single; s: Single; v: Single): nk_color; cdecl;
  nk_hsv_fv: function(const hsv: PSingle): nk_color; cdecl;
  nk_hsv_iv: function(const hsv: PInteger): nk_color; cdecl;
  nk_hsva: function(h: Integer; s: Integer; v: Integer; a: Integer): nk_color; cdecl;
  nk_hsva_bv: function(const hsva: Pnk_byte): nk_color; cdecl;
  nk_hsva_colorf: function(h: Single; s: Single; v: Single; a: Single): nk_colorf; cdecl;
  nk_hsva_colorfv: function(c: PSingle): nk_colorf; cdecl;
  nk_hsva_f: function(h: Single; s: Single; v: Single; a: Single): nk_color; cdecl;
  nk_hsva_fv: function(const hsva: PSingle): nk_color; cdecl;
  nk_hsva_iv: function(const hsva: PInteger): nk_color; cdecl;
  nk_image_: procedure(p1: Pnk_context; p2: nk_image); cdecl;
  nk_image_color_: procedure(p1: Pnk_context; p2: nk_image; p3: nk_color); cdecl;
  nk_image_handle_: function(p1: nk_handle): nk_image; cdecl;
  nk_image_id: function(p1: Integer): nk_image; cdecl;
  nk_image_is_subimage: function(const img: Pnk_image): nk_bool; cdecl;
  nk_image_ptr: function(p1: Pointer): nk_image; cdecl;
  nk_init: function(p1: Pnk_context; p2: Pnk_allocator; const p3: Pnk_user_font): nk_bool; cdecl;
  nk_init_custom: function(p1: Pnk_context; cmds: Pnk_buffer; pool: Pnk_buffer; const p4: Pnk_user_font): nk_bool; cdecl;
  nk_init_default: function(p1: Pnk_context; const p2: Pnk_user_font): nk_bool; cdecl;
  nk_init_fixed: function(p1: Pnk_context; memory: Pointer; size: nk_size; const p4: Pnk_user_font): nk_bool; cdecl;
  nk_input_any_mouse_click_in_rect: function(const p1: Pnk_input; p2: nk_rect): nk_bool; cdecl;
  nk_input_begin: procedure(p1: Pnk_context); cdecl;
  nk_input_button: procedure(p1: Pnk_context; p2: nk_buttons; x: Integer; y: Integer; down: nk_bool); cdecl;
  nk_input_char: procedure(p1: Pnk_context; p2: UTF8Char); cdecl;
  nk_input_end: procedure(p1: Pnk_context); cdecl;
  nk_input_glyph: procedure(p1: Pnk_context; const p2: nk_glyph); cdecl;
  nk_input_has_mouse_click: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;
  nk_input_has_mouse_click_down_in_rect: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect; down: nk_bool): nk_bool; cdecl;
  nk_input_has_mouse_click_in_rect: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect): nk_bool; cdecl;
  nk_input_is_key_down: function(const p1: Pnk_input; p2: nk_keys): nk_bool; cdecl;
  nk_input_is_key_pressed: function(const p1: Pnk_input; p2: nk_keys): nk_bool; cdecl;
  nk_input_is_key_released: function(const p1: Pnk_input; p2: nk_keys): nk_bool; cdecl;
  nk_input_is_mouse_click_down_in_rect: function(const i: Pnk_input; id: nk_buttons; b: nk_rect; down: nk_bool): nk_bool; cdecl;
  nk_input_is_mouse_click_in_rect: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect): nk_bool; cdecl;
  nk_input_is_mouse_down: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;
  nk_input_is_mouse_hovering_rect: function(const p1: Pnk_input; p2: nk_rect): nk_bool; cdecl;
  nk_input_is_mouse_pressed: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;
  nk_input_is_mouse_prev_hovering_rect: function(const p1: Pnk_input; p2: nk_rect): nk_bool; cdecl;
  nk_input_is_mouse_released: function(const p1: Pnk_input; p2: nk_buttons): nk_bool; cdecl;
  nk_input_key: procedure(p1: Pnk_context; p2: nk_keys; down: nk_bool); cdecl;
  nk_input_motion: procedure(p1: Pnk_context; x: Integer; y: Integer); cdecl;
  nk_input_mouse_clicked: function(const p1: Pnk_input; p2: nk_buttons; p3: nk_rect): nk_bool; cdecl;
  nk_input_scroll: procedure(p1: Pnk_context; val: nk_vec2); cdecl;
  nk_input_unicode: procedure(p1: Pnk_context; p2: nk_rune); cdecl;
  nk_item_is_any_active: function(p1: Pnk_context): nk_bool; cdecl;
  nk_label: procedure(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags); cdecl;
  nk_label_colored: procedure(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; p4: nk_color); cdecl;
  nk_label_colored_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: nk_color); cdecl;
  nk_label_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char); cdecl;
  nk_labelf: procedure(p1: Pnk_context; p2: nk_flags; const p3: PUTF8Char) varargs; cdecl;
  nk_labelf_colored: procedure(p1: Pnk_context; p2: nk_flags; p3: nk_color; const p4: PUTF8Char) varargs; cdecl;
  nk_labelf_colored_wrap: procedure(p1: Pnk_context; p2: nk_color; const p3: PUTF8Char) varargs; cdecl;
  nk_labelf_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char) varargs; cdecl;
  nk_labelfv: procedure(p1: Pnk_context; p2: nk_flags; const p3: PUTF8Char; p4: Pointer); cdecl;
  nk_labelfv_colored: procedure(p1: Pnk_context; p2: nk_flags; p3: nk_color; const p4: PUTF8Char; p5: Pointer); cdecl;
  nk_labelfv_colored_wrap: procedure(p1: Pnk_context; p2: nk_color; const p3: PUTF8Char; p4: Pointer); cdecl;
  nk_labelfv_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Pointer); cdecl;
  nk_layout_ratio_from_pixel: function(p1: Pnk_context; pixel_width: Single): Single; cdecl;
  nk_layout_reset_min_row_height: procedure(p1: Pnk_context); cdecl;
  nk_layout_row: procedure(p1: Pnk_context; p2: nk_layout_format; height: Single; cols: Integer; const ratio: PSingle); cdecl;
  nk_layout_row_begin: procedure(ctx: Pnk_context; fmt: nk_layout_format; row_height: Single; cols: Integer); cdecl;
  nk_layout_row_dynamic: procedure(ctx: Pnk_context; height: Single; cols: Integer); cdecl;
  nk_layout_row_end: procedure(p1: Pnk_context); cdecl;
  nk_layout_row_push: procedure(p1: Pnk_context; value: Single); cdecl;
  nk_layout_row_static: procedure(ctx: Pnk_context; height: Single; item_width: Integer; cols: Integer); cdecl;
  nk_layout_row_template_begin: procedure(p1: Pnk_context; row_height: Single); cdecl;
  nk_layout_row_template_end: procedure(p1: Pnk_context); cdecl;
  nk_layout_row_template_push_dynamic: procedure(p1: Pnk_context); cdecl;
  nk_layout_row_template_push_static: procedure(p1: Pnk_context; width: Single); cdecl;
  nk_layout_row_template_push_variable: procedure(p1: Pnk_context; min_width: Single); cdecl;
  nk_layout_set_min_row_height: procedure(p1: Pnk_context; height: Single); cdecl;
  nk_layout_space_begin: procedure(p1: Pnk_context; p2: nk_layout_format; height: Single; widget_count: Integer); cdecl;
  nk_layout_space_bounds: function(p1: Pnk_context): nk_rect; cdecl;
  nk_layout_space_end: procedure(p1: Pnk_context); cdecl;
  nk_layout_space_push: procedure(p1: Pnk_context; bounds: nk_rect); cdecl;
  nk_layout_space_rect_to_local: function(p1: Pnk_context; p2: nk_rect): nk_rect; cdecl;
  nk_layout_space_rect_to_screen: function(p1: Pnk_context; p2: nk_rect): nk_rect; cdecl;
  nk_layout_space_to_local: function(p1: Pnk_context; p2: nk_vec2): nk_vec2; cdecl;
  nk_layout_space_to_screen: function(p1: Pnk_context; p2: nk_vec2): nk_vec2; cdecl;
  nk_layout_widget_bounds: function(p1: Pnk_context): nk_rect; cdecl;
  nk_list_view_begin: function(p1: Pnk_context; _out: Pnk_list_view; const id: PUTF8Char; p4: nk_flags; row_height: Integer; row_count: Integer): nk_bool; cdecl;
  nk_list_view_end: procedure(p1: Pnk_list_view); cdecl;
  nk_menu_begin_image: function(p1: Pnk_context; const p2: PUTF8Char; p3: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_image_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; p4: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_image_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; p5: nk_image; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_symbol: function(p1: Pnk_context; const p2: PUTF8Char; p3: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_symbol_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; p4: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_symbol_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; p5: nk_symbol_type; size: nk_vec2): nk_bool; cdecl;
  nk_menu_begin_text: function(p1: Pnk_context; const title: PUTF8Char; title_len: Integer; align: nk_flags; size: nk_vec2): nk_bool; cdecl;
  nk_menu_close: procedure(p1: Pnk_context); cdecl;
  nk_menu_end: procedure(p1: Pnk_context); cdecl;
  nk_menu_item_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_menu_item_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; len: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_menu_item_label: function(p1: Pnk_context; const p2: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_menu_item_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; alignment: nk_flags): nk_bool; cdecl;
  nk_menu_item_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; alignment: nk_flags): nk_bool; cdecl;
  nk_menu_item_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags): nk_bool; cdecl;
  nk_menubar_begin: procedure(p1: Pnk_context); cdecl;
  nk_menubar_end: procedure(p1: Pnk_context); cdecl;
  nk_murmur_hash: function(const key: Pointer; len: Integer; seed: nk_hash): nk_hash; cdecl;
  nk_nine_slice_handle: function(p1: nk_handle; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_nine_slice_id: function(p1: Integer; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_nine_slice_is_sub9slice: function(const img: Pnk_nine_slice): Integer; cdecl;
  nk_nine_slice_ptr: function(p1: Pointer; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_option_label: function(p1: Pnk_context; const p2: PUTF8Char; active: nk_bool): nk_bool; cdecl;
  nk_option_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: nk_bool): nk_bool; cdecl;
  nk_plot: procedure(p1: Pnk_context; p2: nk_chart_type; const values: PSingle; count: Integer; offset: Integer); cdecl;
  nk_plot_function: procedure(p1: Pnk_context; p2: nk_chart_type; userdata: Pointer; value_getter: nk_plot_function_value_getter; count: Integer; offset: Integer); cdecl;
  nk_popup_begin: function(p1: Pnk_context; p2: nk_popup_type; const p3: PUTF8Char; p4: nk_flags; bounds: nk_rect): nk_bool; cdecl;
  nk_popup_close: procedure(p1: Pnk_context); cdecl;
  nk_popup_end: procedure(p1: Pnk_context); cdecl;
  nk_popup_get_scroll: procedure(p1: Pnk_context; offset_x: Pnk_uint; offset_y: Pnk_uint); cdecl;
  nk_popup_set_scroll: procedure(p1: Pnk_context; offset_x: nk_uint; offset_y: nk_uint); cdecl;
  nk_prog: function(p1: Pnk_context; cur: nk_size; max: nk_size; modifyable: nk_bool): nk_size; cdecl;
  nk_progress: function(p1: Pnk_context; cur: Pnk_size; max: nk_size; modifyable: nk_bool): nk_bool; cdecl;
  nk_property_double: procedure(p1: Pnk_context; const name: PUTF8Char; min: Double; val: PDouble; max: Double; step: Double; inc_per_pixel: Single); cdecl;
  nk_property_float: procedure(p1: Pnk_context; const name: PUTF8Char; min: Single; val: PSingle; max: Single; step: Single; inc_per_pixel: Single); cdecl;
  nk_property_int: procedure(p1: Pnk_context; const name: PUTF8Char; min: Integer; val: PInteger; max: Integer; step: Integer; inc_per_pixel: Single); cdecl;
  nk_propertyd: function(p1: Pnk_context; const name: PUTF8Char; min: Double; val: Double; max: Double; step: Double; inc_per_pixel: Single): Double; cdecl;
  nk_propertyf: function(p1: Pnk_context; const name: PUTF8Char; min: Single; val: Single; max: Single; step: Single; inc_per_pixel: Single): Single; cdecl;
  nk_propertyi: function(p1: Pnk_context; const name: PUTF8Char; min: Integer; val: Integer; max: Integer; step: Integer; inc_per_pixel: Single): Integer; cdecl;
  nk_push_custom: procedure(p1: Pnk_command_buffer; p2: nk_rect; p3: nk_command_custom_callback; usr: nk_handle); cdecl;
  nk_push_scissor: procedure(p1: Pnk_command_buffer; p2: nk_rect); cdecl;
  nk_radio_label: function(p1: Pnk_context; const p2: PUTF8Char; active: Pnk_bool): nk_bool; cdecl;
  nk_radio_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; active: Pnk_bool): nk_bool; cdecl;
  nk_rect_: function(x: Single; y: Single; w: Single; h: Single): nk_rect; cdecl;
  nk_rect_pos: function(p1: nk_rect): nk_vec2; cdecl;
  nk_rect_size: function(p1: nk_rect): nk_vec2; cdecl;
  nk_recta: function(pos: nk_vec2; size: nk_vec2): nk_rect; cdecl;
  nk_recti_: function(x: Integer; y: Integer; w: Integer; h: Integer): nk_rect; cdecl;
  nk_rectiv: function(const xywh: PInteger): nk_rect; cdecl;
  nk_rectv: function(const xywh: PSingle): nk_rect; cdecl;
  nk_rgb_: function(r: Integer; g: Integer; b: Integer): nk_color; cdecl;
  nk_rgb_bv: function(const rgb: Pnk_byte): nk_color; cdecl;
  nk_rgb_cf: function(c: nk_colorf): nk_color; cdecl;
  nk_rgb_f: function(r: Single; g: Single; b: Single): nk_color; cdecl;
  nk_rgb_fv: function(const rgb: PSingle): nk_color; cdecl;
  nk_rgb_hex: function(const rgb: PUTF8Char): nk_color; cdecl;
  nk_rgb_iv: function(const rgb: PInteger): nk_color; cdecl;
  nk_rgba_: function(r: Integer; g: Integer; b: Integer; a: Integer): nk_color; cdecl;
  nk_rgba_bv: function(const rgba: Pnk_byte): nk_color; cdecl;
  nk_rgba_cf: function(c: nk_colorf): nk_color; cdecl;
  nk_rgba_f: function(r: Single; g: Single; b: Single; a: Single): nk_color; cdecl;
  nk_rgba_fv: function(const rgba: PSingle): nk_color; cdecl;
  nk_rgba_hex: function(const rgb: PUTF8Char): nk_color; cdecl;
  nk_rgba_iv: function(const rgba: PInteger): nk_color; cdecl;
  nk_rgba_u32: function(p1: nk_uint): nk_color; cdecl;
  nk_sdl_handle_event: function(ctx: Pnk_context; evt: PSDL_Event): Integer; cdecl;
  nk_sdlsurface_init: function(fb: PSDL_Surface; fontSize: Single): Psdlsurface_context; cdecl;
  nk_sdlsurface_render: procedure(const sdlsurface: Psdlsurface_context; const clear: nk_color; const enable_clear: Byte); cdecl;
  nk_sdlsurface_shutdown: procedure(sdlsurface: Psdlsurface_context); cdecl;
  nk_select_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_select_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_select_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_select_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_select_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_select_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; value: nk_bool): nk_bool; cdecl;
  nk_selectable_image_label: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_selectable_image_text: function(p1: Pnk_context; p2: nk_image; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_selectable_label: function(p1: Pnk_context; const p2: PUTF8Char; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_selectable_symbol_label: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_selectable_symbol_text: function(p1: Pnk_context; p2: nk_symbol_type; const p3: PUTF8Char; p4: Integer; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_selectable_text: function(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; align: nk_flags; value: Pnk_bool): nk_bool; cdecl;
  nk_slide_float: function(p1: Pnk_context; min: Single; val: Single; max: Single; step: Single): Single; cdecl;
  nk_slide_int: function(p1: Pnk_context; min: Integer; val: Integer; max: Integer; step: Integer): Integer; cdecl;
  nk_slider_float: function(p1: Pnk_context; min: Single; val: PSingle; max: Single; step: Single): nk_bool; cdecl;
  nk_slider_int: function(p1: Pnk_context; min: Integer; val: PInteger; max: Integer; step: Integer): nk_bool; cdecl;
  nk_spacer: procedure(p1: Pnk_context); cdecl;
  nk_spacing: procedure(p1: Pnk_context; cols: Integer); cdecl;
  nk_str_append_str_char: function(p1: Pnk_str; const p2: PUTF8Char): Integer; cdecl;
  nk_str_append_str_runes: function(p1: Pnk_str; const p2: Pnk_rune): Integer; cdecl;
  nk_str_append_str_utf8: function(p1: Pnk_str; const p2: PUTF8Char): Integer; cdecl;
  nk_str_append_text_char: function(p1: Pnk_str; const p2: PUTF8Char; p3: Integer): Integer; cdecl;
  nk_str_append_text_runes: function(p1: Pnk_str; const p2: Pnk_rune; p3: Integer): Integer; cdecl;
  nk_str_append_text_utf8: function(p1: Pnk_str; const p2: PUTF8Char; p3: Integer): Integer; cdecl;
  nk_str_at_char: function(p1: Pnk_str; pos: Integer): PUTF8Char; cdecl;
  nk_str_at_char_const: function(const p1: Pnk_str; pos: Integer): PUTF8Char; cdecl;
  nk_str_at_const: function(const p1: Pnk_str; pos: Integer; unicode: Pnk_rune; len: PInteger): PUTF8Char; cdecl;
  nk_str_at_rune: function(p1: Pnk_str; pos: Integer; unicode: Pnk_rune; len: PInteger): PUTF8Char; cdecl;
  nk_str_clear: procedure(p1: Pnk_str); cdecl;
  nk_str_delete_chars: procedure(p1: Pnk_str; pos: Integer; len: Integer); cdecl;
  nk_str_delete_runes: procedure(p1: Pnk_str; pos: Integer; len: Integer); cdecl;
  nk_str_free: procedure(p1: Pnk_str); cdecl;
  nk_str_get: function(p1: Pnk_str): PUTF8Char; cdecl;
  nk_str_get_const: function(const p1: Pnk_str): PUTF8Char; cdecl;
  nk_str_init: procedure(p1: Pnk_str; const p2: Pnk_allocator; size: nk_size); cdecl;
  nk_str_init_default: procedure(p1: Pnk_str); cdecl;
  nk_str_init_fixed: procedure(p1: Pnk_str; memory: Pointer; size: nk_size); cdecl;
  nk_str_insert_at_char: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;
  nk_str_insert_at_rune: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;
  nk_str_insert_str_char: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char): Integer; cdecl;
  nk_str_insert_str_runes: function(p1: Pnk_str; pos: Integer; const p3: Pnk_rune): Integer; cdecl;
  nk_str_insert_str_utf8: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char): Integer; cdecl;
  nk_str_insert_text_char: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;
  nk_str_insert_text_runes: function(p1: Pnk_str; pos: Integer; const p3: Pnk_rune; p4: Integer): Integer; cdecl;
  nk_str_insert_text_utf8: function(p1: Pnk_str; pos: Integer; const p3: PUTF8Char; p4: Integer): Integer; cdecl;
  nk_str_len: function(p1: Pnk_str): Integer; cdecl;
  nk_str_len_char: function(p1: Pnk_str): Integer; cdecl;
  nk_str_remove_chars: procedure(p1: Pnk_str; len: Integer); cdecl;
  nk_str_remove_runes: procedure(str: Pnk_str; len: Integer); cdecl;
  nk_str_rune_at: function(const p1: Pnk_str; pos: Integer): nk_rune; cdecl;
  nk_strfilter: function(const text: PUTF8Char; const regexp: PUTF8Char): Integer; cdecl;
  nk_stricmp: function(const s1: PUTF8Char; const s2: PUTF8Char): Integer; cdecl;
  nk_stricmpn: function(const s1: PUTF8Char; const s2: PUTF8Char; n: Integer): Integer; cdecl;
  nk_strlen: function(const str: PUTF8Char): Integer; cdecl;
  nk_strmatch_fuzzy_string: function(const str: PUTF8Char; const pattern: PUTF8Char; out_score: PInteger): Integer; cdecl;
  nk_strmatch_fuzzy_text: function(const txt: PUTF8Char; txt_len: Integer; const pattern: PUTF8Char; out_score: PInteger): Integer; cdecl;
  nk_stroke_arc: procedure(p1: Pnk_command_buffer; cx: Single; cy: Single; radius: Single; a_min: Single; a_max: Single; line_thickness: Single; p8: nk_color); cdecl;
  nk_stroke_circle: procedure(p1: Pnk_command_buffer; p2: nk_rect; line_thickness: Single; p4: nk_color); cdecl;
  nk_stroke_curve: procedure(p1: Pnk_command_buffer; p2: Single; p3: Single; p4: Single; p5: Single; p6: Single; p7: Single; p8: Single; p9: Single; line_thickness: Single; p11: nk_color); cdecl;
  nk_stroke_line: procedure(b: Pnk_command_buffer; x0: Single; y0: Single; x1: Single; y1: Single; line_thickness: Single; p7: nk_color); cdecl;
  nk_stroke_polygon: procedure(p1: Pnk_command_buffer; p2: PSingle; point_count: Integer; line_thickness: Single; p5: nk_color); cdecl;
  nk_stroke_polyline: procedure(p1: Pnk_command_buffer; points: PSingle; point_count: Integer; line_thickness: Single; col: nk_color); cdecl;
  nk_stroke_rect: procedure(p1: Pnk_command_buffer; p2: nk_rect; rounding: Single; line_thickness: Single; p5: nk_color); cdecl;
  nk_stroke_triangle: procedure(p1: Pnk_command_buffer; p2: Single; p3: Single; p4: Single; p5: Single; p6: Single; p7: Single; line_thichness: Single; p9: nk_color); cdecl;
  nk_strtod: function(const str: PUTF8Char; endptr: PPUTF8Char): Double; cdecl;
  nk_strtof: function(const str: PUTF8Char; endptr: PPUTF8Char): Single; cdecl;
  nk_strtoi: function(const str: PUTF8Char; endptr: PPUTF8Char): Integer; cdecl;
  nk_style_default: procedure(p1: Pnk_context); cdecl;
  nk_style_from_table: procedure(p1: Pnk_context; const p2: Pnk_color); cdecl;
  nk_style_get_color_by_name: function(p1: nk_style_colors): PUTF8Char; cdecl;
  nk_style_hide_cursor: procedure(p1: Pnk_context); cdecl;
  nk_style_item_color_: function(p1: nk_color): nk_style_item; cdecl;
  nk_style_item_hide: function(): nk_style_item; cdecl;
  nk_style_item_image_: function(img: nk_image): nk_style_item; cdecl;
  nk_style_item_nine_slice_: function(slice: nk_nine_slice): nk_style_item; cdecl;
  nk_style_load_all_cursors: procedure(p1: Pnk_context; p2: Pnk_cursor); cdecl;
  nk_style_load_cursor: procedure(p1: Pnk_context; p2: nk_style_cursor; const p3: Pnk_cursor); cdecl;
  nk_style_pop_color: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_pop_flags: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_pop_float: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_pop_font: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_pop_style_item: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_pop_vec2: function(p1: Pnk_context): nk_bool; cdecl;
  nk_style_push_color: function(p1: Pnk_context; p2: Pnk_color; p3: nk_color): nk_bool; cdecl;
  nk_style_push_flags: function(p1: Pnk_context; p2: Pnk_flags; p3: nk_flags): nk_bool; cdecl;
  nk_style_push_float: function(p1: Pnk_context; p2: PSingle; p3: Single): nk_bool; cdecl;
  nk_style_push_font: function(p1: Pnk_context; const p2: Pnk_user_font): nk_bool; cdecl;
  nk_style_push_style_item: function(p1: Pnk_context; p2: Pnk_style_item; p3: nk_style_item): nk_bool; cdecl;
  nk_style_push_vec2: function(p1: Pnk_context; p2: Pnk_vec2; p3: nk_vec2): nk_bool; cdecl;
  nk_style_set_cursor: function(p1: Pnk_context; p2: nk_style_cursor): nk_bool; cdecl;
  nk_style_set_font: procedure(p1: Pnk_context; const p2: Pnk_user_font); cdecl;
  nk_style_show_cursor: procedure(p1: Pnk_context); cdecl;
  nk_sub9slice_handle: function(p1: nk_handle; w: nk_ushort; h: nk_ushort; sub_region: nk_rect; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_sub9slice_id: function(p1: Integer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_sub9slice_ptr: function(p1: Pointer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect; l: nk_ushort; t: nk_ushort; r: nk_ushort; b: nk_ushort): nk_nine_slice; cdecl;
  nk_subimage_handle: function(p1: nk_handle; w: nk_ushort; h: nk_ushort; sub_region: nk_rect): nk_image; cdecl;
  nk_subimage_id: function(p1: Integer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect): nk_image; cdecl;
  nk_subimage_ptr: function(p1: Pointer; w: nk_ushort; h: nk_ushort; sub_region: nk_rect): nk_image; cdecl;
  nk_text: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; p4: nk_flags); cdecl;
  nk_text_colored: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; p4: nk_flags; p5: nk_color); cdecl;
  nk_text_wrap: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer); cdecl;
  nk_text_wrap_colored: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Integer; p4: nk_color); cdecl;
  nk_textedit_cut: function(p1: Pnk_text_edit): nk_bool; cdecl;
  nk_textedit_delete: procedure(p1: Pnk_text_edit; where: Integer; len: Integer); cdecl;
  nk_textedit_delete_selection: procedure(p1: Pnk_text_edit); cdecl;
  nk_textedit_free: procedure(p1: Pnk_text_edit); cdecl;
  nk_textedit_init: procedure(p1: Pnk_text_edit; p2: Pnk_allocator; size: nk_size); cdecl;
  nk_textedit_init_default: procedure(p1: Pnk_text_edit); cdecl;
  nk_textedit_init_fixed: procedure(p1: Pnk_text_edit; memory: Pointer; size: nk_size); cdecl;
  nk_textedit_paste: function(p1: Pnk_text_edit; const p2: PUTF8Char; len: Integer): nk_bool; cdecl;
  nk_textedit_redo: procedure(p1: Pnk_text_edit); cdecl;
  nk_textedit_select_all: procedure(p1: Pnk_text_edit); cdecl;
  nk_textedit_text: procedure(p1: Pnk_text_edit; const p2: PUTF8Char; total_len: Integer); cdecl;
  nk_textedit_undo: procedure(p1: Pnk_text_edit); cdecl;
  nk_tooltip: procedure(p1: Pnk_context; const p2: PUTF8Char); cdecl;
  nk_tooltip_begin: function(p1: Pnk_context; width: Single): nk_bool; cdecl;
  nk_tooltip_end: procedure(p1: Pnk_context); cdecl;
  nk_tooltipf: procedure(p1: Pnk_context; const p2: PUTF8Char) varargs; cdecl;
  nk_tooltipfv: procedure(p1: Pnk_context; const p2: PUTF8Char; p3: Pointer); cdecl;
  nk_tree_element_image_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; p3: nk_image; const title: PUTF8Char; initial_state: nk_collapse_states; selected: Pnk_bool; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;
  nk_tree_element_pop: procedure(p1: Pnk_context); cdecl;
  nk_tree_element_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; const title: PUTF8Char; initial_state: nk_collapse_states; selected: Pnk_bool; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;
  nk_tree_image_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; p3: nk_image; const title: PUTF8Char; initial_state: nk_collapse_states; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;
  nk_tree_pop: procedure(p1: Pnk_context); cdecl;
  nk_tree_push_hashed: function(p1: Pnk_context; p2: nk_tree_type; const title: PUTF8Char; initial_state: nk_collapse_states; const hash: PUTF8Char; len: Integer; seed: Integer): nk_bool; cdecl;
  nk_tree_state_image_push: function(p1: Pnk_context; p2: nk_tree_type; p3: nk_image; const title: PUTF8Char; state: Pnk_collapse_states): nk_bool; cdecl;
  nk_tree_state_pop: procedure(p1: Pnk_context); cdecl;
  nk_tree_state_push: function(p1: Pnk_context; p2: nk_tree_type; const title: PUTF8Char; state: Pnk_collapse_states): nk_bool; cdecl;
  nk_triangle_from_direction: procedure(result: Pnk_vec2; r: nk_rect; pad_x: Single; pad_y: Single; p5: nk_heading); cdecl;
  nk_utf_at: function(const buffer: PUTF8Char; length: Integer; index: Integer; unicode: Pnk_rune; len: PInteger): PUTF8Char; cdecl;
  nk_utf_decode: function(const p1: PUTF8Char; p2: Pnk_rune; p3: Integer): Integer; cdecl;
  nk_utf_encode: function(p1: nk_rune; p2: PUTF8Char; p3: Integer): Integer; cdecl;
  nk_utf_len: function(const p1: PUTF8Char; byte_len: Integer): Integer; cdecl;
  nk_value_bool: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: Integer); cdecl;
  nk_value_color_byte: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: nk_color); cdecl;
  nk_value_color_float: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: nk_color); cdecl;
  nk_value_color_hex: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: nk_color); cdecl;
  nk_value_float: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: Single); cdecl;
  nk_value_int: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: Integer); cdecl;
  nk_value_uint: procedure(p1: Pnk_context; const prefix: PUTF8Char; p3: Cardinal); cdecl;
  nk_vec2_: function(x: Single; y: Single): nk_vec2; cdecl;
  nk_vec2i_: function(x: Integer; y: Integer): nk_vec2; cdecl;
  nk_vec2iv: function(const xy: PInteger): nk_vec2; cdecl;
  nk_vec2v: function(const xy: PSingle): nk_vec2; cdecl;
  nk_widget: function(p1: Pnk_rect; const p2: Pnk_context): nk_widget_layout_states; cdecl;
  nk_widget_bounds: function(p1: Pnk_context): nk_rect; cdecl;
  nk_widget_fitting: function(p1: Pnk_rect; p2: Pnk_context; p3: nk_vec2): nk_widget_layout_states; cdecl;
  nk_widget_has_mouse_click_down: function(p1: Pnk_context; p2: nk_buttons; down: nk_bool): nk_bool; cdecl;
  nk_widget_height: function(p1: Pnk_context): Single; cdecl;
  nk_widget_is_hovered: function(p1: Pnk_context): nk_bool; cdecl;
  nk_widget_is_mouse_clicked: function(p1: Pnk_context; p2: nk_buttons): nk_bool; cdecl;
  nk_widget_position: function(p1: Pnk_context): nk_vec2; cdecl;
  nk_widget_size: function(p1: Pnk_context): nk_vec2; cdecl;
  nk_widget_width: function(p1: Pnk_context): Single; cdecl;
  nk_window_close: procedure(ctx: Pnk_context; const name: PUTF8Char); cdecl;
  nk_window_collapse: procedure(p1: Pnk_context; const name: PUTF8Char; state: nk_collapse_states); cdecl;
  nk_window_collapse_if: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_collapse_states; cond: Integer); cdecl;
  nk_window_find: function(ctx: Pnk_context; const name: PUTF8Char): Pnk_window; cdecl;
  nk_window_get_bounds: function(const ctx: Pnk_context): nk_rect; cdecl;
  nk_window_get_canvas: function(p1: Pnk_context): Pnk_command_buffer; cdecl;
  nk_window_get_content_region: function(p1: Pnk_context): nk_rect; cdecl;
  nk_window_get_content_region_max: function(p1: Pnk_context): nk_vec2; cdecl;
  nk_window_get_content_region_min: function(p1: Pnk_context): nk_vec2; cdecl;
  nk_window_get_content_region_size: function(p1: Pnk_context): nk_vec2; cdecl;
  nk_window_get_height: function(const p1: Pnk_context): Single; cdecl;
  nk_window_get_panel: function(p1: Pnk_context): Pnk_panel; cdecl;
  nk_window_get_position: function(const ctx: Pnk_context): nk_vec2; cdecl;
  nk_window_get_scroll: procedure(p1: Pnk_context; offset_x: Pnk_uint; offset_y: Pnk_uint); cdecl;
  nk_window_get_size: function(const p1: Pnk_context): nk_vec2; cdecl;
  nk_window_get_width: function(const p1: Pnk_context): Single; cdecl;
  nk_window_has_focus: function(const p1: Pnk_context): nk_bool; cdecl;
  nk_window_is_active: function(p1: Pnk_context; const p2: PUTF8Char): nk_bool; cdecl;
  nk_window_is_any_hovered: function(p1: Pnk_context): nk_bool; cdecl;
  nk_window_is_closed: function(p1: Pnk_context; const p2: PUTF8Char): nk_bool; cdecl;
  nk_window_is_collapsed: function(ctx: Pnk_context; const name: PUTF8Char): nk_bool; cdecl;
  nk_window_is_hidden: function(p1: Pnk_context; const p2: PUTF8Char): nk_bool; cdecl;
  nk_window_is_hovered: function(p1: Pnk_context): nk_bool; cdecl;
  nk_window_set_bounds: procedure(p1: Pnk_context; const name: PUTF8Char; bounds: nk_rect); cdecl;
  nk_window_set_focus: procedure(p1: Pnk_context; const name: PUTF8Char); cdecl;
  nk_window_set_position: procedure(p1: Pnk_context; const name: PUTF8Char; pos: nk_vec2); cdecl;
  nk_window_set_scroll: procedure(p1: Pnk_context; offset_x: nk_uint; offset_y: nk_uint); cdecl;
  nk_window_set_size: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_vec2); cdecl;
  nk_window_show: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_show_states); cdecl;
  nk_window_show_if: procedure(p1: Pnk_context; const name: PUTF8Char; p3: nk_show_states; cond: Integer); cdecl;
  PHYSFS_addToSearchPath: function(const newDir: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_caseFold: function(const from: PHYSFS_uint32; _to: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_close: function(handle: PPHYSFS_File): Integer; cdecl;
  PHYSFS_deinit: function(): Integer; cdecl;
  PHYSFS_delete: function(const filename: PUTF8Char): Integer; cdecl;
  PHYSFS_deregisterArchiver: function(const ext: PUTF8Char): Integer; cdecl;
  PHYSFS_enumerate: function(const dir: PUTF8Char; c: PHYSFS_EnumerateCallback; d: Pointer): Integer; cdecl;
  PHYSFS_enumerateFiles: function(const dir: PUTF8Char): PPUTF8Char; cdecl;
  PHYSFS_enumerateFilesCallback: procedure(const dir: PUTF8Char; c: PHYSFS_EnumFilesCallback; d: Pointer); cdecl;
  PHYSFS_eof: function(handle: PPHYSFS_File): Integer; cdecl;
  PHYSFS_exists: function(const fname: PUTF8Char): Integer; cdecl;
  PHYSFS_fileLength: function(handle: PPHYSFS_File): PHYSFS_sint64; cdecl;
  PHYSFS_flush: function(handle: PPHYSFS_File): Integer; cdecl;
  PHYSFS_freeList: procedure(listVar: Pointer); cdecl;
  PHYSFS_getAllocator: function(): PPHYSFS_Allocator; cdecl;
  PHYSFS_getBaseDir: function(): PUTF8Char; cdecl;
  PHYSFS_getCdRomDirs: function(): PPUTF8Char; cdecl;
  PHYSFS_getCdRomDirsCallback: procedure(c: PHYSFS_StringCallback; d: Pointer); cdecl;
  PHYSFS_getDirSeparator: function(): PUTF8Char; cdecl;
  PHYSFS_getErrorByCode: function(code: PHYSFS_ErrorCode): PUTF8Char; cdecl;
  PHYSFS_getLastError: function(): PUTF8Char; cdecl;
  PHYSFS_getLastErrorCode: function(): PHYSFS_ErrorCode; cdecl;
  PHYSFS_getLastModTime: function(const filename: PUTF8Char): PHYSFS_sint64; cdecl;
  PHYSFS_getLinkedVersion: procedure(ver: PPHYSFS_Version); cdecl;
  PHYSFS_getMountPoint: function(const dir: PUTF8Char): PUTF8Char; cdecl;
  PHYSFS_getPrefDir: function(const org: PUTF8Char; const app: PUTF8Char): PUTF8Char; cdecl;
  PHYSFS_getRealDir: function(const filename: PUTF8Char): PUTF8Char; cdecl;
  PHYSFS_getSearchPath: function(): PPUTF8Char; cdecl;
  PHYSFS_getSearchPathCallback: procedure(c: PHYSFS_StringCallback; d: Pointer); cdecl;
  PHYSFS_getUserDir: function(): PUTF8Char; cdecl;
  PHYSFS_getWriteDir: function(): PUTF8Char; cdecl;
  PHYSFS_init: function(const argv0: PUTF8Char): Integer; cdecl;
  PHYSFS_isDirectory: function(const fname: PUTF8Char): Integer; cdecl;
  PHYSFS_isInit: function(): Integer; cdecl;
  PHYSFS_isSymbolicLink: function(const fname: PUTF8Char): Integer; cdecl;
  PHYSFS_mkdir: function(const dirName: PUTF8Char): Integer; cdecl;
  PHYSFS_mount: function(const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_mountHandle: function(_file: PPHYSFS_File; const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_mountIo: function(io: PPHYSFS_Io; const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_mountMemory: function(const buf: Pointer; len: PHYSFS_uint64; del: PHYSFS_mountMemory_del; const newDir: PUTF8Char; const mountPoint: PUTF8Char; appendToPath: Integer): Integer; cdecl;
  PHYSFS_openAppend: function(const filename: PUTF8Char): PPHYSFS_File; cdecl;
  PHYSFS_openRead: function(const filename: PUTF8Char): PPHYSFS_File; cdecl;
  PHYSFS_openWrite: function(const filename: PUTF8Char): PPHYSFS_File; cdecl;
  PHYSFS_permitSymbolicLinks: procedure(allow: Integer); cdecl;
  PHYSFS_read: function(handle: PPHYSFS_File; buffer: Pointer; objSize: PHYSFS_uint32; objCount: PHYSFS_uint32): PHYSFS_sint64; cdecl;
  PHYSFS_readBytes: function(handle: PPHYSFS_File; buffer: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
  PHYSFS_readSBE16: function(_file: PPHYSFS_File; val: PPHYSFS_sint16): Integer; cdecl;
  PHYSFS_readSBE32: function(_file: PPHYSFS_File; val: PPHYSFS_sint32): Integer; cdecl;
  PHYSFS_readSBE64: function(_file: PPHYSFS_File; val: PPHYSFS_sint64): Integer; cdecl;
  PHYSFS_readSLE16: function(_file: PPHYSFS_File; val: PPHYSFS_sint16): Integer; cdecl;
  PHYSFS_readSLE32: function(_file: PPHYSFS_File; val: PPHYSFS_sint32): Integer; cdecl;
  PHYSFS_readSLE64: function(_file: PPHYSFS_File; val: PPHYSFS_sint64): Integer; cdecl;
  PHYSFS_readUBE16: function(_file: PPHYSFS_File; val: PPHYSFS_uint16): Integer; cdecl;
  PHYSFS_readUBE32: function(_file: PPHYSFS_File; val: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_readUBE64: function(_file: PPHYSFS_File; val: PPHYSFS_uint64): Integer; cdecl;
  PHYSFS_readULE16: function(_file: PPHYSFS_File; val: PPHYSFS_uint16): Integer; cdecl;
  PHYSFS_readULE32: function(_file: PPHYSFS_File; val: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_readULE64: function(_file: PPHYSFS_File; val: PPHYSFS_uint64): Integer; cdecl;
  PHYSFS_registerArchiver: function(const archiver: PPHYSFS_Archiver): Integer; cdecl;
  PHYSFS_removeFromSearchPath: function(const oldDir: PUTF8Char): Integer; cdecl;
  PHYSFS_seek: function(handle: PPHYSFS_File; pos: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_setAllocator: function(const allocator: PPHYSFS_Allocator): Integer; cdecl;
  PHYSFS_setBuffer: function(handle: PPHYSFS_File; bufsize: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_setErrorCode: procedure(code: PHYSFS_ErrorCode); cdecl;
  PHYSFS_setRoot: function(const archive: PUTF8Char; const subdir: PUTF8Char): Integer; cdecl;
  PHYSFS_setSaneConfig: function(const organization: PUTF8Char; const appName: PUTF8Char; const archiveExt: PUTF8Char; includeCdRoms: Integer; archivesFirst: Integer): Integer; cdecl;
  PHYSFS_setWriteDir: function(const newDir: PUTF8Char): Integer; cdecl;
  PHYSFS_stat_: function(const fname: PUTF8Char; stat: PPHYSFS_Stat): Integer; cdecl;
  PHYSFS_supportedArchiveTypes: function(): PPPHYSFS_ArchiveInfo; cdecl;
  PHYSFS_swapSBE16: function(val: PHYSFS_sint16): PHYSFS_sint16; cdecl;
  PHYSFS_swapSBE32: function(val: PHYSFS_sint32): PHYSFS_sint32; cdecl;
  PHYSFS_swapSBE64: function(val: PHYSFS_sint64): PHYSFS_sint64; cdecl;
  PHYSFS_swapSLE16: function(val: PHYSFS_sint16): PHYSFS_sint16; cdecl;
  PHYSFS_swapSLE32: function(val: PHYSFS_sint32): PHYSFS_sint32; cdecl;
  PHYSFS_swapSLE64: function(val: PHYSFS_sint64): PHYSFS_sint64; cdecl;
  PHYSFS_swapUBE16: function(val: PHYSFS_uint16): PHYSFS_uint16; cdecl;
  PHYSFS_swapUBE32: function(val: PHYSFS_uint32): PHYSFS_uint32; cdecl;
  PHYSFS_swapUBE64: function(val: PHYSFS_uint64): PHYSFS_uint64; cdecl;
  PHYSFS_swapULE16: function(val: PHYSFS_uint16): PHYSFS_uint16; cdecl;
  PHYSFS_swapULE32: function(val: PHYSFS_uint32): PHYSFS_uint32; cdecl;
  PHYSFS_swapULE64: function(val: PHYSFS_uint64): PHYSFS_uint64; cdecl;
  PHYSFS_symbolicLinksPermitted: function(): Integer; cdecl;
  PHYSFS_tell: function(handle: PPHYSFS_File): PHYSFS_sint64; cdecl;
  PHYSFS_ucs4stricmp: function(const str1: PPHYSFS_uint32; const str2: PPHYSFS_uint32): Integer; cdecl;
  PHYSFS_unmount: function(const oldDir: PUTF8Char): Integer; cdecl;
  PHYSFS_utf16stricmp: function(const str1: PPHYSFS_uint16; const str2: PPHYSFS_uint16): Integer; cdecl;
  PHYSFS_utf8FromLatin1: procedure(const src: PUTF8Char; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8FromUcs2: procedure(const src: PPHYSFS_uint16; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8FromUcs4: procedure(const src: PPHYSFS_uint32; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8FromUtf16: procedure(const src: PPHYSFS_uint16; dst: PUTF8Char; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8stricmp: function(const str1: PUTF8Char; const str2: PUTF8Char): Integer; cdecl;
  PHYSFS_utf8ToUcs2: procedure(const src: PUTF8Char; dst: PPHYSFS_uint16; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8ToUcs4: procedure(const src: PUTF8Char; dst: PPHYSFS_uint32; len: PHYSFS_uint64); cdecl;
  PHYSFS_utf8ToUtf16: procedure(const src: PUTF8Char; dst: PPHYSFS_uint16; len: PHYSFS_uint64); cdecl;
  PHYSFS_write: function(handle: PPHYSFS_File; const buffer: Pointer; objSize: PHYSFS_uint32; objCount: PHYSFS_uint32): PHYSFS_sint64; cdecl;
  PHYSFS_writeBytes: function(handle: PPHYSFS_File; const buffer: Pointer; len: PHYSFS_uint64): PHYSFS_sint64; cdecl;
  PHYSFS_writeSBE16: function(_file: PPHYSFS_File; val: PHYSFS_sint16): Integer; cdecl;
  PHYSFS_writeSBE32: function(_file: PPHYSFS_File; val: PHYSFS_sint32): Integer; cdecl;
  PHYSFS_writeSBE64: function(_file: PPHYSFS_File; val: PHYSFS_sint64): Integer; cdecl;
  PHYSFS_writeSLE16: function(_file: PPHYSFS_File; val: PHYSFS_sint16): Integer; cdecl;
  PHYSFS_writeSLE32: function(_file: PPHYSFS_File; val: PHYSFS_sint32): Integer; cdecl;
  PHYSFS_writeSLE64: function(_file: PPHYSFS_File; val: PHYSFS_sint64): Integer; cdecl;
  PHYSFS_writeUBE16: function(_file: PPHYSFS_File; val: PHYSFS_uint16): Integer; cdecl;
  PHYSFS_writeUBE32: function(_file: PPHYSFS_File; val: PHYSFS_uint32): Integer; cdecl;
  PHYSFS_writeUBE64: function(_file: PPHYSFS_File; val: PHYSFS_uint64): Integer; cdecl;
  PHYSFS_writeULE16: function(_file: PPHYSFS_File; val: PHYSFS_uint16): Integer; cdecl;
  PHYSFS_writeULE32: function(_file: PPHYSFS_File; val: PHYSFS_uint32): Integer; cdecl;
  PHYSFS_writeULE64: function(_file: PPHYSFS_File; val: PHYSFS_uint64): Integer; cdecl;
  PHYSFSRWOPS_makeRWops: function(handle: PPHYSFS_File): PSDL_RWops; cdecl;
  PHYSFSRWOPS_openAppend: function(const fname: PUTF8Char): PSDL_RWops; cdecl;
  PHYSFSRWOPS_openRead: function(const fname: PUTF8Char): PSDL_RWops; cdecl;
  PHYSFSRWOPS_openWrite: function(const fname: PUTF8Char): PSDL_RWops; cdecl;
  pieColor: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rad: Sint16; start: Sint16; _end: Sint16; color: Uint32): Integer; cdecl;
  pieRGBA: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rad: Sint16; start: Sint16; _end: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  pixelColor: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; color: Uint32): Integer; cdecl;
  pixelRGBA: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  plm_audio_create_with_buffer: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_audio_t; cdecl;
  plm_audio_decode: function(self: Pplm_audio_t): Pplm_samples_t; cdecl;
  plm_audio_destroy: procedure(self: Pplm_audio_t); cdecl;
  plm_audio_get_samplerate: function(self: Pplm_audio_t): Integer; cdecl;
  plm_audio_get_time: function(self: Pplm_audio_t): Double; cdecl;
  plm_audio_has_ended: function(self: Pplm_audio_t): Integer; cdecl;
  plm_audio_has_header: function(self: Pplm_audio_t): Integer; cdecl;
  plm_audio_rewind: procedure(self: Pplm_audio_t); cdecl;
  plm_audio_set_time: procedure(self: Pplm_audio_t; time: Double); cdecl;
  plm_buffer_create_for_appending: function(initial_capacity: NativeUInt): Pplm_buffer_t; cdecl;
  plm_buffer_create_with_capacity: function(capacity: NativeUInt): Pplm_buffer_t; cdecl;
  plm_buffer_create_with_file: function(fh: PPointer; close_when_done: Integer): Pplm_buffer_t; cdecl;
  plm_buffer_create_with_filename: function(const filename: PUTF8Char): Pplm_buffer_t; cdecl;
  plm_buffer_create_with_memory: function(bytes: PUInt8; length: NativeUInt; free_when_done: Integer): Pplm_buffer_t; cdecl;
  plm_buffer_destroy: procedure(self: Pplm_buffer_t); cdecl;
  plm_buffer_get_remaining: function(self: Pplm_buffer_t): NativeUInt; cdecl;
  plm_buffer_get_size: function(self: Pplm_buffer_t): NativeUInt; cdecl;
  plm_buffer_has_ended: function(self: Pplm_buffer_t): Integer; cdecl;
  plm_buffer_rewind: procedure(self: Pplm_buffer_t); cdecl;
  plm_buffer_set_load_callback: procedure(self: Pplm_buffer_t; fp: plm_buffer_load_callback; user: Pointer); cdecl;
  plm_buffer_signal_end: procedure(self: Pplm_buffer_t); cdecl;
  plm_buffer_write: function(self: Pplm_buffer_t; bytes: PUInt8; length: NativeUInt): NativeUInt; cdecl;
  plm_create_with_buffer: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_t; cdecl;
  plm_create_with_file: function(fh: PPointer; close_when_done: Integer): Pplm_t; cdecl;
  plm_create_with_filename: function(const filename: PUTF8Char): Pplm_t; cdecl;
  plm_create_with_memory: function(bytes: PUInt8; length: NativeUInt; free_when_done: Integer): Pplm_t; cdecl;
  plm_decode: procedure(self: Pplm_t; seconds: Double); cdecl;
  plm_decode_audio: function(self: Pplm_t): Pplm_samples_t; cdecl;
  plm_decode_video: function(self: Pplm_t): Pplm_frame_t; cdecl;
  plm_demux_create: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_demux_t; cdecl;
  plm_demux_decode: function(self: Pplm_demux_t): Pplm_packet_t; cdecl;
  plm_demux_destroy: procedure(self: Pplm_demux_t); cdecl;
  plm_demux_get_duration: function(self: Pplm_demux_t; _type: Integer): Double; cdecl;
  plm_demux_get_num_audio_streams: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_get_num_video_streams: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_get_start_time: function(self: Pplm_demux_t; _type: Integer): Double; cdecl;
  plm_demux_has_ended: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_has_headers: function(self: Pplm_demux_t): Integer; cdecl;
  plm_demux_rewind: procedure(self: Pplm_demux_t); cdecl;
  plm_demux_seek: function(self: Pplm_demux_t; time: Double; _type: Integer; force_intra: Integer): Pplm_packet_t; cdecl;
  plm_destroy: procedure(self: Pplm_t); cdecl;
  plm_frame_to_abgr: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_argb: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_bgr: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_bgra: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_rgb: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_frame_to_rgba: procedure(frame: Pplm_frame_t; dest: PUInt8; stride: Integer); cdecl;
  plm_get_audio_enabled: function(self: Pplm_t): Integer; cdecl;
  plm_get_audio_lead_time: function(self: Pplm_t): Double; cdecl;
  plm_get_duration: function(self: Pplm_t): Double; cdecl;
  plm_get_framerate: function(self: Pplm_t): Double; cdecl;
  plm_get_height: function(self: Pplm_t): Integer; cdecl;
  plm_get_loop: function(self: Pplm_t): Integer; cdecl;
  plm_get_num_audio_streams: function(self: Pplm_t): Integer; cdecl;
  plm_get_num_video_streams: function(self: Pplm_t): Integer; cdecl;
  plm_get_samplerate: function(self: Pplm_t): Integer; cdecl;
  plm_get_time: function(self: Pplm_t): Double; cdecl;
  plm_get_video_enabled: function(self: Pplm_t): Integer; cdecl;
  plm_get_width: function(self: Pplm_t): Integer; cdecl;
  plm_has_ended: function(self: Pplm_t): Integer; cdecl;
  plm_has_headers: function(self: Pplm_t): Integer; cdecl;
  plm_rewind: procedure(self: Pplm_t); cdecl;
  plm_seek: function(self: Pplm_t; time: Double; seek_exact: Integer): Integer; cdecl;
  plm_seek_frame: function(self: Pplm_t; time: Double; seek_exact: Integer): Pplm_frame_t; cdecl;
  plm_set_audio_decode_callback: procedure(self: Pplm_t; fp: plm_audio_decode_callback; user: Pointer); cdecl;
  plm_set_audio_enabled: procedure(self: Pplm_t; enabled: Integer); cdecl;
  plm_set_audio_lead_time: procedure(self: Pplm_t; lead_time: Double); cdecl;
  plm_set_audio_stream: procedure(self: Pplm_t; stream_index: Integer); cdecl;
  plm_set_loop: procedure(self: Pplm_t; loop: Integer); cdecl;
  plm_set_video_decode_callback: procedure(self: Pplm_t; fp: plm_video_decode_callback; user: Pointer); cdecl;
  plm_set_video_enabled: procedure(self: Pplm_t; enabled: Integer); cdecl;
  plm_video_create_with_buffer: function(buffer: Pplm_buffer_t; destroy_when_done: Integer): Pplm_video_t; cdecl;
  plm_video_decode: function(self: Pplm_video_t): Pplm_frame_t; cdecl;
  plm_video_destroy: procedure(self: Pplm_video_t); cdecl;
  plm_video_get_framerate: function(self: Pplm_video_t): Double; cdecl;
  plm_video_get_height: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_get_time: function(self: Pplm_video_t): Double; cdecl;
  plm_video_get_width: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_has_ended: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_has_header: function(self: Pplm_video_t): Integer; cdecl;
  plm_video_rewind: procedure(self: Pplm_video_t); cdecl;
  plm_video_set_no_delay: procedure(self: Pplm_video_t; no_delay: Integer); cdecl;
  plm_video_set_time: procedure(self: Pplm_video_t; time: Double); cdecl;
  polygonColor: function(renderer: PSDL_Renderer; const vx: PSint16; const vy: PSint16; n: Integer; color: Uint32): Integer; cdecl;
  polygonRGBA: function(renderer: PSDL_Renderer; const vx: PSint16; const vy: PSint16; n: Integer; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  rectangleColor: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; color: Uint32): Integer; cdecl;
  rectangleRGBA: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  rotateSurface90Degrees: function(src: PSDL_Surface; numClockwiseTurns: Integer): PSDL_Surface; cdecl;
  rotozoomSurface: function(src: PSDL_Surface; angle: Double; zoom: Double; smooth: Integer): PSDL_Surface; cdecl;
  rotozoomSurfaceSize: procedure(width: Integer; height: Integer; angle: Double; zoom: Double; dstwidth: PInteger; dstheight: PInteger); cdecl;
  rotozoomSurfaceSizeXY: procedure(width: Integer; height: Integer; angle: Double; zoomx: Double; zoomy: Double; dstwidth: PInteger; dstheight: PInteger); cdecl;
  rotozoomSurfaceXY: function(src: PSDL_Surface; angle: Double; zoomx: Double; zoomy: Double; smooth: Integer): PSDL_Surface; cdecl;
  roundedBoxColor: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; rad: Sint16; color: Uint32): Integer; cdecl;
  roundedBoxRGBA: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; rad: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  roundedRectangleColor: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; rad: Sint16; color: Uint32): Integer; cdecl;
  roundedRectangleRGBA: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; rad: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  SDL_abs: function(x: Integer): Integer; cdecl;
  SDL_acos: function(x: Double): Double; cdecl;
  SDL_acosf: function(x: Single): Single; cdecl;
  SDL_AddEventWatch: procedure(filter: SDL_EventFilter; userdata: Pointer); cdecl;
  SDL_AddHintCallback: procedure(const name: PUTF8Char; callback: SDL_HintCallback; userdata: Pointer); cdecl;
  SDL_AddTimer: function(interval: Uint32; callback: SDL_TimerCallback; param: Pointer): SDL_TimerID; cdecl;
  SDL_AllocFormat: function(pixel_format: Uint32): PSDL_PixelFormat; cdecl;
  SDL_AllocPalette: function(ncolors: Integer): PSDL_Palette; cdecl;
  SDL_AllocRW: function(): PSDL_RWops; cdecl;
  SDL_asin: function(x: Double): Double; cdecl;
  SDL_asinf: function(x: Single): Single; cdecl;
  SDL_asprintf: function(strp: PPUTF8Char; const fmt: PUTF8Char): Integer varargs; cdecl;
  SDL_atan: function(x: Double): Double; cdecl;
  SDL_atan2: function(y: Double; x: Double): Double; cdecl;
  SDL_atan2f: function(y: Single; x: Single): Single; cdecl;
  SDL_atanf: function(x: Single): Single; cdecl;
  SDL_atof: function(const str: PUTF8Char): Double; cdecl;
  SDL_atoi: function(const str: PUTF8Char): Integer; cdecl;
  SDL_AtomicAdd: function(a: PSDL_atomic_t; v: Integer): Integer; cdecl;
  SDL_AtomicCAS: function(a: PSDL_atomic_t; oldval: Integer; newval: Integer): SDL_bool; cdecl;
  SDL_AtomicCASPtr: function(a: PPointer; oldval: Pointer; newval: Pointer): SDL_bool; cdecl;
  SDL_AtomicGet: function(a: PSDL_atomic_t): Integer; cdecl;
  SDL_AtomicGetPtr: function(a: PPointer): Pointer; cdecl;
  SDL_AtomicLock: procedure(lock: PSDL_SpinLock); cdecl;
  SDL_AtomicSet: function(a: PSDL_atomic_t; v: Integer): Integer; cdecl;
  SDL_AtomicSetPtr: function(a: PPointer; v: Pointer): Pointer; cdecl;
  SDL_AtomicTryLock: function(lock: PSDL_SpinLock): SDL_bool; cdecl;
  SDL_AtomicUnlock: procedure(lock: PSDL_SpinLock); cdecl;
  SDL_AudioInit: function(const driver_name: PUTF8Char): Integer; cdecl;
  SDL_AudioQuit: procedure(); cdecl;
  SDL_AudioStreamAvailable: function(stream: PSDL_AudioStream): Integer; cdecl;
  SDL_AudioStreamClear: procedure(stream: PSDL_AudioStream); cdecl;
  SDL_AudioStreamFlush: function(stream: PSDL_AudioStream): Integer; cdecl;
  SDL_AudioStreamGet: function(stream: PSDL_AudioStream; buf: Pointer; len: Integer): Integer; cdecl;
  SDL_AudioStreamPut: function(stream: PSDL_AudioStream; const buf: Pointer; len: Integer): Integer; cdecl;
  SDL_BuildAudioCVT: function(cvt: PSDL_AudioCVT; src_format: SDL_AudioFormat; src_channels: Uint8; src_rate: Integer; dst_format: SDL_AudioFormat; dst_channels: Uint8; dst_rate: Integer): Integer; cdecl;
  SDL_CalculateGammaRamp: procedure(gamma: Single; ramp: PUint16); cdecl;
  SDL_calloc: function(nmemb: NativeUInt; size: NativeUInt): Pointer; cdecl;
  SDL_CaptureMouse: function(enabled: SDL_bool): Integer; cdecl;
  SDL_ceil: function(x: Double): Double; cdecl;
  SDL_ceilf: function(x: Single): Single; cdecl;
  SDL_ClearError: procedure(); cdecl;
  SDL_ClearHints: procedure(); cdecl;
  SDL_ClearQueuedAudio: procedure(dev: SDL_AudioDeviceID); cdecl;
  SDL_CloseAudio: procedure(); cdecl;
  SDL_CloseAudioDevice: procedure(dev: SDL_AudioDeviceID); cdecl;
  SDL_ComposeCustomBlendMode: function(srcColorFactor: SDL_BlendFactor; dstColorFactor: SDL_BlendFactor; colorOperation: SDL_BlendOperation; srcAlphaFactor: SDL_BlendFactor; dstAlphaFactor: SDL_BlendFactor; alphaOperation: SDL_BlendOperation): SDL_BlendMode; cdecl;
  SDL_CondBroadcast: function(cond: PSDL_cond): Integer; cdecl;
  SDL_CondSignal: function(cond: PSDL_cond): Integer; cdecl;
  SDL_CondWait: function(cond: PSDL_cond; mutex: PSDL_mutex): Integer; cdecl;
  SDL_CondWaitTimeout: function(cond: PSDL_cond; mutex: PSDL_mutex; ms: Uint32): Integer; cdecl;
  SDL_ConvertAudio: function(cvt: PSDL_AudioCVT): Integer; cdecl;
  SDL_ConvertPixels: function(width: Integer; height: Integer; src_format: Uint32; const src: Pointer; src_pitch: Integer; dst_format: Uint32; dst: Pointer; dst_pitch: Integer): Integer; cdecl;
  SDL_ConvertSurface: function(src: PSDL_Surface; const fmt: PSDL_PixelFormat; flags: Uint32): PSDL_Surface; cdecl;
  SDL_ConvertSurfaceFormat: function(src: PSDL_Surface; pixel_format: Uint32; flags: Uint32): PSDL_Surface; cdecl;
  SDL_copysign: function(x: Double; y: Double): Double; cdecl;
  SDL_copysignf: function(x: Single; y: Single): Single; cdecl;
  SDL_cos: function(x: Double): Double; cdecl;
  SDL_cosf: function(x: Single): Single; cdecl;
  SDL_crc32: function(crc: Uint32; const data: Pointer; len: NativeUInt): Uint32; cdecl;
  SDL_CreateColorCursor: function(surface: PSDL_Surface; hot_x: Integer; hot_y: Integer): PSDL_Cursor; cdecl;
  SDL_CreateCond: function(): PSDL_cond; cdecl;
  SDL_CreateCursor: function(const data: PUint8; const mask: PUint8; w: Integer; h: Integer; hot_x: Integer; hot_y: Integer): PSDL_Cursor; cdecl;
  SDL_CreateMutex: function(): PSDL_mutex; cdecl;
  SDL_CreateRenderer: function(window: PSDL_Window; index: Integer; flags: Uint32): PSDL_Renderer; cdecl;
  SDL_CreateRGBSurface: function(flags: Uint32; width: Integer; height: Integer; depth: Integer; Rmask: Uint32; Gmask: Uint32; Bmask: Uint32; Amask: Uint32): PSDL_Surface; cdecl;
  SDL_CreateRGBSurfaceFrom: function(pixels: Pointer; width: Integer; height: Integer; depth: Integer; pitch: Integer; Rmask: Uint32; Gmask: Uint32; Bmask: Uint32; Amask: Uint32): PSDL_Surface; cdecl;
  SDL_CreateRGBSurfaceWithFormat: function(flags: Uint32; width: Integer; height: Integer; depth: Integer; format: Uint32): PSDL_Surface; cdecl;
  SDL_CreateRGBSurfaceWithFormatFrom: function(pixels: Pointer; width: Integer; height: Integer; depth: Integer; pitch: Integer; format: Uint32): PSDL_Surface; cdecl;
  SDL_CreateSemaphore: function(initial_value: Uint32): PSDL_sem; cdecl;
  SDL_CreateShapedWindow: function(const title: PUTF8Char; x: Cardinal; y: Cardinal; w: Cardinal; h: Cardinal; flags: Uint32): PSDL_Window; cdecl;
  SDL_CreateSoftwareRenderer: function(surface: PSDL_Surface): PSDL_Renderer; cdecl;
  SDL_CreateSystemCursor: function(id: SDL_SystemCursor): PSDL_Cursor; cdecl;
  SDL_CreateTexture: function(renderer: PSDL_Renderer; format: Uint32; access: Integer; w: Integer; h: Integer): PSDL_Texture; cdecl;
  SDL_CreateTextureFromSurface: function(renderer: PSDL_Renderer; surface: PSDL_Surface): PSDL_Texture; cdecl;
  SDL_CreateThread: function(fn: SDL_ThreadFunction; const name: PUTF8Char; data: Pointer; pfnBeginThread: pfnSDL_CurrentBeginThread; pfnEndThread: pfnSDL_CurrentEndThread): PSDL_Thread; cdecl;
  SDL_CreateThreadWithStackSize: function(fn: SDL_CreateThreadWithStackSize_fn; const name: PUTF8Char; const stacksize: NativeUInt; data: Pointer; pfnBeginThread: pfnSDL_CurrentBeginThread; pfnEndThread: pfnSDL_CurrentEndThread): PSDL_Thread; cdecl;
  SDL_CreateWindow: function(const title: PUTF8Char; x: Integer; y: Integer; w: Integer; h: Integer; flags: Uint32): PSDL_Window; cdecl;
  SDL_CreateWindowAndRenderer: function(width: Integer; height: Integer; window_flags: Uint32; window: PPSDL_Window; renderer: PPSDL_Renderer): Integer; cdecl;
  SDL_CreateWindowFrom: function(const data: Pointer): PSDL_Window; cdecl;
  SDL_Delay: procedure(ms: Uint32); cdecl;
  SDL_DelEventWatch: procedure(filter: SDL_EventFilter; userdata: Pointer); cdecl;
  SDL_DelHintCallback: procedure(const name: PUTF8Char; callback: SDL_HintCallback; userdata: Pointer); cdecl;
  SDL_DequeueAudio: function(dev: SDL_AudioDeviceID; data: Pointer; len: Uint32): Uint32; cdecl;
  SDL_DestroyCond: procedure(cond: PSDL_cond); cdecl;
  SDL_DestroyMutex: procedure(mutex: PSDL_mutex); cdecl;
  SDL_DestroyRenderer: procedure(renderer: PSDL_Renderer); cdecl;
  SDL_DestroySemaphore: procedure(sem: PSDL_sem); cdecl;
  SDL_DestroyTexture: procedure(texture: PSDL_Texture); cdecl;
  SDL_DestroyWindow: procedure(window: PSDL_Window); cdecl;
  SDL_DetachThread: procedure(thread: PSDL_Thread); cdecl;
  SDL_Direct3D9GetAdapterIndex: function(displayIndex: Integer): Integer; cdecl;
  SDL_DisableScreenSaver: procedure(); cdecl;
  SDL_DuplicateSurface: function(surface: PSDL_Surface): PSDL_Surface; cdecl;
  SDL_DXGIGetOutputInfo: function(displayIndex: Integer; adapterIndex: PInteger; outputIndex: PInteger): SDL_bool; cdecl;
  SDL_EnableScreenSaver: procedure(); cdecl;
  SDL_EnclosePoints: function(const points: PSDL_Point; count: Integer; const clip: PSDL_Rect; result: PSDL_Rect): SDL_bool; cdecl;
  SDL_Error: function(code: SDL_errorcode): Integer; cdecl;
  SDL_EventState: function(_type: Uint32; state: Integer): Uint8; cdecl;
  SDL_exp: function(x: Double): Double; cdecl;
  SDL_expf: function(x: Single): Single; cdecl;
  SDL_fabs: function(x: Double): Double; cdecl;
  SDL_fabsf: function(x: Single): Single; cdecl;
  SDL_FillRect: function(dst: PSDL_Surface; const rect: PSDL_Rect; color: Uint32): Integer; cdecl;
  SDL_FillRects: function(dst: PSDL_Surface; const rects: PSDL_Rect; count: Integer; color: Uint32): Integer; cdecl;
  SDL_FilterEvents: procedure(filter: SDL_EventFilter; userdata: Pointer); cdecl;
  SDL_FlashWindow: function(window: PSDL_Window; operation: SDL_FlashOperation): Integer; cdecl;
  SDL_floor: function(x: Double): Double; cdecl;
  SDL_floorf: function(x: Single): Single; cdecl;
  SDL_FlushEvent: procedure(_type: Uint32); cdecl;
  SDL_FlushEvents: procedure(minType: Uint32; maxType: Uint32); cdecl;
  SDL_fmod: function(x: Double; y: Double): Double; cdecl;
  SDL_fmodf: function(x: Single; y: Single): Single; cdecl;
  SDL_framerateDelay: function(manager: PFPSmanager): Uint32; cdecl;
  SDL_free: procedure(mem: Pointer); cdecl;
  SDL_FreeAudioStream: procedure(stream: PSDL_AudioStream); cdecl;
  SDL_FreeCursor: procedure(cursor: PSDL_Cursor); cdecl;
  SDL_FreeFormat: procedure(format: PSDL_PixelFormat); cdecl;
  SDL_FreePalette: procedure(palette: PSDL_Palette); cdecl;
  SDL_FreeRW: procedure(area: PSDL_RWops); cdecl;
  SDL_FreeSurface: procedure(surface: PSDL_Surface); cdecl;
  SDL_FreeWAV: procedure(audio_buf: PUint8); cdecl;
  SDL_GameControllerAddMapping: function(const mappingString: PUTF8Char): Integer; cdecl;
  SDL_GameControllerAddMappingsFromRW: function(rw: PSDL_RWops; freerw: Integer): Integer; cdecl;
  SDL_GameControllerClose: procedure(gamecontroller: PSDL_GameController); cdecl;
  SDL_GameControllerEventState: function(state: Integer): Integer; cdecl;
  SDL_GameControllerFromInstanceID: function(joyid: SDL_JoystickID): PSDL_GameController; cdecl;
  SDL_GameControllerFromPlayerIndex: function(player_index: Integer): PSDL_GameController; cdecl;
  SDL_GameControllerGetAppleSFSymbolsNameForAxis: function(gamecontroller: PSDL_GameController; axis: SDL_GameControllerAxis): PUTF8Char; cdecl;
  SDL_GameControllerGetAppleSFSymbolsNameForButton: function(gamecontroller: PSDL_GameController; button: SDL_GameControllerButton): PUTF8Char; cdecl;
  SDL_GameControllerGetAttached: function(gamecontroller: PSDL_GameController): SDL_bool; cdecl;
  SDL_GameControllerGetAxis: function(gamecontroller: PSDL_GameController; axis: SDL_GameControllerAxis): Sint16; cdecl;
  SDL_GameControllerGetAxisFromString: function(const str: PUTF8Char): SDL_GameControllerAxis; cdecl;
  SDL_GameControllerGetBindForAxis: function(gamecontroller: PSDL_GameController; axis: SDL_GameControllerAxis): SDL_GameControllerButtonBind; cdecl;
  SDL_GameControllerGetBindForButton: function(gamecontroller: PSDL_GameController; button: SDL_GameControllerButton): SDL_GameControllerButtonBind; cdecl;
  SDL_GameControllerGetButton: function(gamecontroller: PSDL_GameController; button: SDL_GameControllerButton): Uint8; cdecl;
  SDL_GameControllerGetButtonFromString: function(const str: PUTF8Char): SDL_GameControllerButton; cdecl;
  SDL_GameControllerGetJoystick: function(gamecontroller: PSDL_GameController): PSDL_Joystick; cdecl;
  SDL_GameControllerGetNumTouchpadFingers: function(gamecontroller: PSDL_GameController; touchpad: Integer): Integer; cdecl;
  SDL_GameControllerGetNumTouchpads: function(gamecontroller: PSDL_GameController): Integer; cdecl;
  SDL_GameControllerGetPlayerIndex: function(gamecontroller: PSDL_GameController): Integer; cdecl;
  SDL_GameControllerGetProduct: function(gamecontroller: PSDL_GameController): Uint16; cdecl;
  SDL_GameControllerGetProductVersion: function(gamecontroller: PSDL_GameController): Uint16; cdecl;
  SDL_GameControllerGetSensorData: function(gamecontroller: PSDL_GameController; _type: SDL_SensorType; data: PSingle; num_values: Integer): Integer; cdecl;
  SDL_GameControllerGetSensorDataRate: function(gamecontroller: PSDL_GameController; _type: SDL_SensorType): Single; cdecl;
  SDL_GameControllerGetSerial: function(gamecontroller: PSDL_GameController): PUTF8Char; cdecl;
  SDL_GameControllerGetStringForAxis: function(axis: SDL_GameControllerAxis): PUTF8Char; cdecl;
  SDL_GameControllerGetStringForButton: function(button: SDL_GameControllerButton): PUTF8Char; cdecl;
  SDL_GameControllerGetTouchpadFinger: function(gamecontroller: PSDL_GameController; touchpad: Integer; finger: Integer; state: PUint8; x: PSingle; y: PSingle; pressure: PSingle): Integer; cdecl;
  SDL_GameControllerGetType: function(gamecontroller: PSDL_GameController): SDL_GameControllerType; cdecl;
  SDL_GameControllerGetVendor: function(gamecontroller: PSDL_GameController): Uint16; cdecl;
  SDL_GameControllerHasAxis: function(gamecontroller: PSDL_GameController; axis: SDL_GameControllerAxis): SDL_bool; cdecl;
  SDL_GameControllerHasButton: function(gamecontroller: PSDL_GameController; button: SDL_GameControllerButton): SDL_bool; cdecl;
  SDL_GameControllerHasLED: function(gamecontroller: PSDL_GameController): SDL_bool; cdecl;
  SDL_GameControllerHasRumble: function(gamecontroller: PSDL_GameController): SDL_bool; cdecl;
  SDL_GameControllerHasRumbleTriggers: function(gamecontroller: PSDL_GameController): SDL_bool; cdecl;
  SDL_GameControllerHasSensor: function(gamecontroller: PSDL_GameController; _type: SDL_SensorType): SDL_bool; cdecl;
  SDL_GameControllerIsSensorEnabled: function(gamecontroller: PSDL_GameController; _type: SDL_SensorType): SDL_bool; cdecl;
  SDL_GameControllerMapping: function(gamecontroller: PSDL_GameController): PUTF8Char; cdecl;
  SDL_GameControllerMappingForDeviceIndex: function(joystick_index: Integer): PUTF8Char; cdecl;
  SDL_GameControllerMappingForGUID: function(guid: SDL_JoystickGUID): PUTF8Char; cdecl;
  SDL_GameControllerMappingForIndex: function(mapping_index: Integer): PUTF8Char; cdecl;
  SDL_GameControllerName: function(gamecontroller: PSDL_GameController): PUTF8Char; cdecl;
  SDL_GameControllerNameForIndex: function(joystick_index: Integer): PUTF8Char; cdecl;
  SDL_GameControllerNumMappings: function(): Integer; cdecl;
  SDL_GameControllerOpen: function(joystick_index: Integer): PSDL_GameController; cdecl;
  SDL_GameControllerRumble: function(gamecontroller: PSDL_GameController; low_frequency_rumble: Uint16; high_frequency_rumble: Uint16; duration_ms: Uint32): Integer; cdecl;
  SDL_GameControllerRumbleTriggers: function(gamecontroller: PSDL_GameController; left_rumble: Uint16; right_rumble: Uint16; duration_ms: Uint32): Integer; cdecl;
  SDL_GameControllerSendEffect: function(gamecontroller: PSDL_GameController; const data: Pointer; size: Integer): Integer; cdecl;
  SDL_GameControllerSetLED: function(gamecontroller: PSDL_GameController; red: Uint8; green: Uint8; blue: Uint8): Integer; cdecl;
  SDL_GameControllerSetPlayerIndex: procedure(gamecontroller: PSDL_GameController; player_index: Integer); cdecl;
  SDL_GameControllerSetSensorEnabled: function(gamecontroller: PSDL_GameController; _type: SDL_SensorType; enabled: SDL_bool): Integer; cdecl;
  SDL_GameControllerTypeForIndex: function(joystick_index: Integer): SDL_GameControllerType; cdecl;
  SDL_GameControllerUpdate: procedure(); cdecl;
  SDL_GetAssertionHandler: function(puserdata: PPointer): SDL_AssertionHandler; cdecl;
  SDL_GetAssertionReport: function(): PSDL_AssertData; cdecl;
  SDL_GetAudioDeviceName: function(index: Integer; iscapture: Integer): PUTF8Char; cdecl;
  SDL_GetAudioDeviceSpec: function(index: Integer; iscapture: Integer; spec: PSDL_AudioSpec): Integer; cdecl;
  SDL_GetAudioDeviceStatus: function(dev: SDL_AudioDeviceID): SDL_AudioStatus; cdecl;
  SDL_GetAudioDriver: function(index: Integer): PUTF8Char; cdecl;
  SDL_GetAudioStatus: function(): SDL_AudioStatus; cdecl;
  SDL_GetBasePath: function(): PUTF8Char; cdecl;
  SDL_GetClipboardText: function(): PUTF8Char; cdecl;
  SDL_GetClipRect: procedure(surface: PSDL_Surface; rect: PSDL_Rect); cdecl;
  SDL_GetClosestDisplayMode: function(displayIndex: Integer; const mode: PSDL_DisplayMode; closest: PSDL_DisplayMode): PSDL_DisplayMode; cdecl;
  SDL_GetColorKey: function(surface: PSDL_Surface; key: PUint32): Integer; cdecl;
  SDL_GetCPUCacheLineSize: function(): Integer; cdecl;
  SDL_GetCPUCount: function(): Integer; cdecl;
  SDL_GetCurrentAudioDriver: function(): PUTF8Char; cdecl;
  SDL_GetCurrentDisplayMode: function(displayIndex: Integer; mode: PSDL_DisplayMode): Integer; cdecl;
  SDL_GetCurrentVideoDriver: function(): PUTF8Char; cdecl;
  SDL_GetCursor: function(): PSDL_Cursor; cdecl;
  SDL_GetDefaultAssertionHandler: function(): SDL_AssertionHandler; cdecl;
  SDL_GetDefaultCursor: function(): PSDL_Cursor; cdecl;
  SDL_GetDesktopDisplayMode: function(displayIndex: Integer; mode: PSDL_DisplayMode): Integer; cdecl;
  SDL_GetDisplayBounds: function(displayIndex: Integer; rect: PSDL_Rect): Integer; cdecl;
  SDL_GetDisplayDPI: function(displayIndex: Integer; ddpi: PSingle; hdpi: PSingle; vdpi: PSingle): Integer; cdecl;
  SDL_GetDisplayMode: function(displayIndex: Integer; modeIndex: Integer; mode: PSDL_DisplayMode): Integer; cdecl;
  SDL_GetDisplayName: function(displayIndex: Integer): PUTF8Char; cdecl;
  SDL_GetDisplayOrientation: function(displayIndex: Integer): SDL_DisplayOrientation; cdecl;
  SDL_GetDisplayUsableBounds: function(displayIndex: Integer; rect: PSDL_Rect): Integer; cdecl;
  SDL_getenv: function(const name: PUTF8Char): PUTF8Char; cdecl;
  SDL_GetError: function(): PUTF8Char; cdecl;
  SDL_GetErrorMsg: function(errstr: PUTF8Char; maxlen: Integer): PUTF8Char; cdecl;
  SDL_GetEventFilter: function(filter: PSDL_EventFilter; userdata: PPointer): SDL_bool; cdecl;
  SDL_getFramecount: function(manager: PFPSmanager): Integer; cdecl;
  SDL_getFramerate: function(manager: PFPSmanager): Integer; cdecl;
  SDL_GetGlobalMouseState: function(x: PInteger; y: PInteger): Uint32; cdecl;
  SDL_GetGrabbedWindow: function(): PSDL_Window; cdecl;
  SDL_GetHint: function(const name: PUTF8Char): PUTF8Char; cdecl;
  SDL_GetHintBoolean: function(const name: PUTF8Char; default_value: SDL_bool): SDL_bool; cdecl;
  SDL_GetKeyboardFocus: function(): PSDL_Window; cdecl;
  SDL_GetKeyboardState: function(numkeys: PInteger): PUint8; cdecl;
  SDL_GetKeyFromName: function(const name: PUTF8Char): SDL_Keycode; cdecl;
  SDL_GetKeyFromScancode: function(scancode: SDL_Scancode): SDL_Keycode; cdecl;
  SDL_GetKeyName: function(key: SDL_Keycode): PUTF8Char; cdecl;
  SDL_GetMemoryFunctions: procedure(malloc_func: PSDL_malloc_func; calloc_func: PSDL_calloc_func; realloc_func: PSDL_realloc_func; free_func: PSDL_free_func); cdecl;
  SDL_GetModState: function(): SDL_Keymod; cdecl;
  SDL_GetMouseFocus: function(): PSDL_Window; cdecl;
  SDL_GetMouseState: function(x: PInteger; y: PInteger): Uint32; cdecl;
  SDL_GetNumAllocations: function(): Integer; cdecl;
  SDL_GetNumAudioDevices: function(iscapture: Integer): Integer; cdecl;
  SDL_GetNumAudioDrivers: function(): Integer; cdecl;
  SDL_GetNumDisplayModes: function(displayIndex: Integer): Integer; cdecl;
  SDL_GetNumRenderDrivers: function(): Integer; cdecl;
  SDL_GetNumTouchDevices: function(): Integer; cdecl;
  SDL_GetNumTouchFingers: function(touchID: SDL_TouchID): Integer; cdecl;
  SDL_GetNumVideoDisplays: function(): Integer; cdecl;
  SDL_GetNumVideoDrivers: function(): Integer; cdecl;
  SDL_GetPerformanceCounter: function(): Uint64; cdecl;
  SDL_GetPerformanceFrequency: function(): Uint64; cdecl;
  SDL_GetPixelFormatName: function(format: Uint32): PUTF8Char; cdecl;
  SDL_GetPlatform: function(): PUTF8Char; cdecl;
  SDL_GetPowerInfo: function(secs: PInteger; pct: PInteger): SDL_PowerState; cdecl;
  SDL_GetPreferredLocales: function(): PSDL_Locale; cdecl;
  SDL_GetPrefPath: function(const org: PUTF8Char; const app: PUTF8Char): PUTF8Char; cdecl;
  SDL_GetQueuedAudioSize: function(dev: SDL_AudioDeviceID): Uint32; cdecl;
  SDL_GetRelativeMouseMode: function(): SDL_bool; cdecl;
  SDL_GetRelativeMouseState: function(x: PInteger; y: PInteger): Uint32; cdecl;
  SDL_GetRenderDrawBlendMode: function(renderer: PSDL_Renderer; blendMode: PSDL_BlendMode): Integer; cdecl;
  SDL_GetRenderDrawColor: function(renderer: PSDL_Renderer; r: PUint8; g: PUint8; b: PUint8; a: PUint8): Integer; cdecl;
  SDL_GetRenderDriverInfo: function(index: Integer; info: PSDL_RendererInfo): Integer; cdecl;
  SDL_GetRenderer: function(window: PSDL_Window): PSDL_Renderer; cdecl;
  SDL_GetRendererInfo: function(renderer: PSDL_Renderer; info: PSDL_RendererInfo): Integer; cdecl;
  SDL_GetRendererOutputSize: function(renderer: PSDL_Renderer; w: PInteger; h: PInteger): Integer; cdecl;
  SDL_GetRenderTarget: function(renderer: PSDL_Renderer): PSDL_Texture; cdecl;
  SDL_GetRevision: function(): PUTF8Char; cdecl;
  SDL_GetRevisionNumber: function(): Integer; cdecl;
  SDL_GetRGB: procedure(pixel: Uint32; const format: PSDL_PixelFormat; r: PUint8; g: PUint8; b: PUint8); cdecl;
  SDL_GetRGBA: procedure(pixel: Uint32; const format: PSDL_PixelFormat; r: PUint8; g: PUint8; b: PUint8; a: PUint8); cdecl;
  SDL_GetScancodeFromKey: function(key: SDL_Keycode): SDL_Scancode; cdecl;
  SDL_GetScancodeFromName: function(const name: PUTF8Char): SDL_Scancode; cdecl;
  SDL_GetScancodeName: function(scancode: SDL_Scancode): PUTF8Char; cdecl;
  SDL_GetShapedWindowMode: function(window: PSDL_Window; shape_mode: PSDL_WindowShapeMode): Integer; cdecl;
  SDL_GetSurfaceAlphaMod: function(surface: PSDL_Surface; alpha: PUint8): Integer; cdecl;
  SDL_GetSurfaceBlendMode: function(surface: PSDL_Surface; blendMode: PSDL_BlendMode): Integer; cdecl;
  SDL_GetSurfaceColorMod: function(surface: PSDL_Surface; r: PUint8; g: PUint8; b: PUint8): Integer; cdecl;
  SDL_GetSystemRAM: function(): Integer; cdecl;
  SDL_GetTextureAlphaMod: function(texture: PSDL_Texture; alpha: PUint8): Integer; cdecl;
  SDL_GetTextureBlendMode: function(texture: PSDL_Texture; blendMode: PSDL_BlendMode): Integer; cdecl;
  SDL_GetTextureColorMod: function(texture: PSDL_Texture; r: PUint8; g: PUint8; b: PUint8): Integer; cdecl;
  SDL_GetTextureScaleMode: function(texture: PSDL_Texture; scaleMode: PSDL_ScaleMode): Integer; cdecl;
  SDL_GetTextureUserData: function(texture: PSDL_Texture): Pointer; cdecl;
  SDL_GetThreadID: function(thread: PSDL_Thread): SDL_threadID_; cdecl;
  SDL_GetThreadName: function(thread: PSDL_Thread): PUTF8Char; cdecl;
  SDL_GetTicks: function(): Uint32; cdecl;
  SDL_GetTicks64: function(): Uint64; cdecl;
  SDL_GetTouchDevice: function(index: Integer): SDL_TouchID; cdecl;
  SDL_GetTouchDeviceType: function(touchID: SDL_TouchID): SDL_TouchDeviceType; cdecl;
  SDL_GetTouchFinger: function(touchID: SDL_TouchID; index: Integer): PSDL_Finger; cdecl;
  SDL_GetVersion: procedure(ver: PSDL_version); cdecl;
  SDL_GetVideoDriver: function(index: Integer): PUTF8Char; cdecl;
  SDL_GetWindowBordersSize: function(window: PSDL_Window; top: PInteger; left: PInteger; bottom: PInteger; right: PInteger): Integer; cdecl;
  SDL_GetWindowBrightness: function(window: PSDL_Window): Single; cdecl;
  SDL_GetWindowData: function(window: PSDL_Window; const name: PUTF8Char): Pointer; cdecl;
  SDL_GetWindowDisplayIndex: function(window: PSDL_Window): Integer; cdecl;
  SDL_GetWindowDisplayMode: function(window: PSDL_Window; mode: PSDL_DisplayMode): Integer; cdecl;
  SDL_GetWindowFlags: function(window: PSDL_Window): Uint32; cdecl;
  SDL_GetWindowFromID: function(id: Uint32): PSDL_Window; cdecl;
  SDL_GetWindowGammaRamp: function(window: PSDL_Window; red: PUint16; green: PUint16; blue: PUint16): Integer; cdecl;
  SDL_GetWindowGrab: function(window: PSDL_Window): SDL_bool; cdecl;
  SDL_GetWindowICCProfile: function(window: PSDL_Window; size: PNativeUInt): Pointer; cdecl;
  SDL_GetWindowID: function(window: PSDL_Window): Uint32; cdecl;
  SDL_GetWindowKeyboardGrab: function(window: PSDL_Window): SDL_bool; cdecl;
  SDL_GetWindowMaximumSize: procedure(window: PSDL_Window; w: PInteger; h: PInteger); cdecl;
  SDL_GetWindowMinimumSize: procedure(window: PSDL_Window; w: PInteger; h: PInteger); cdecl;
  SDL_GetWindowMouseGrab: function(window: PSDL_Window): SDL_bool; cdecl;
  SDL_GetWindowMouseRect: function(window: PSDL_Window): PSDL_Rect; cdecl;
  SDL_GetWindowOpacity: function(window: PSDL_Window; out_opacity: PSingle): Integer; cdecl;
  SDL_GetWindowPixelFormat: function(window: PSDL_Window): Uint32; cdecl;
  SDL_GetWindowPosition: procedure(window: PSDL_Window; x: PInteger; y: PInteger); cdecl;
  SDL_GetWindowSize: procedure(window: PSDL_Window; w: PInteger; h: PInteger); cdecl;
  SDL_GetWindowSurface: function(window: PSDL_Window): PSDL_Surface; cdecl;
  SDL_GetWindowTitle: function(window: PSDL_Window): PUTF8Char; cdecl;
  SDL_GetYUVConversionMode: function(): SDL_YUV_CONVERSION_MODE; cdecl;
  SDL_GetYUVConversionModeForResolution: function(width: Integer; height: Integer): SDL_YUV_CONVERSION_MODE; cdecl;
  SDL_GL_BindTexture: function(texture: PSDL_Texture; texw: PSingle; texh: PSingle): Integer; cdecl;
  SDL_GL_CreateContext: function(window: PSDL_Window): SDL_GLContext; cdecl;
  SDL_GL_DeleteContext: procedure(context: SDL_GLContext); cdecl;
  SDL_GL_ExtensionSupported: function(const extension: PUTF8Char): SDL_bool; cdecl;
  SDL_GL_GetAttribute: function(attr: SDL_GLattr; value: PInteger): Integer; cdecl;
  SDL_GL_GetCurrentContext: function(): SDL_GLContext; cdecl;
  SDL_GL_GetCurrentWindow: function(): PSDL_Window; cdecl;
  SDL_GL_GetDrawableSize: procedure(window: PSDL_Window; w: PInteger; h: PInteger); cdecl;
  SDL_GL_GetProcAddress: function(const proc: PUTF8Char): Pointer; cdecl;
  SDL_GL_GetSwapInterval: function(): Integer; cdecl;
  SDL_GL_LoadLibrary: function(const path: PUTF8Char): Integer; cdecl;
  SDL_GL_MakeCurrent: function(window: PSDL_Window; context: SDL_GLContext): Integer; cdecl;
  SDL_GL_ResetAttributes: procedure(); cdecl;
  SDL_GL_SetAttribute: function(attr: SDL_GLattr; value: Integer): Integer; cdecl;
  SDL_GL_SetSwapInterval: function(interval: Integer): Integer; cdecl;
  SDL_GL_SwapWindow: procedure(window: PSDL_Window); cdecl;
  SDL_GL_UnbindTexture: function(texture: PSDL_Texture): Integer; cdecl;
  SDL_GL_UnloadLibrary: procedure(); cdecl;
  SDL_HapticClose: procedure(haptic: PSDL_Haptic); cdecl;
  SDL_HapticDestroyEffect: procedure(haptic: PSDL_Haptic; effect: Integer); cdecl;
  SDL_HapticEffectSupported: function(haptic: PSDL_Haptic; effect: PSDL_HapticEffect): Integer; cdecl;
  SDL_HapticGetEffectStatus: function(haptic: PSDL_Haptic; effect: Integer): Integer; cdecl;
  SDL_HapticIndex: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticName: function(device_index: Integer): PUTF8Char; cdecl;
  SDL_HapticNewEffect: function(haptic: PSDL_Haptic; effect: PSDL_HapticEffect): Integer; cdecl;
  SDL_HapticNumAxes: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticNumEffects: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticNumEffectsPlaying: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticOpen: function(device_index: Integer): PSDL_Haptic; cdecl;
  SDL_HapticOpened: function(device_index: Integer): Integer; cdecl;
  SDL_HapticOpenFromJoystick: function(joystick: PSDL_Joystick): PSDL_Haptic; cdecl;
  SDL_HapticOpenFromMouse: function(): PSDL_Haptic; cdecl;
  SDL_HapticPause: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticQuery: function(haptic: PSDL_Haptic): Cardinal; cdecl;
  SDL_HapticRumbleInit: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticRumblePlay: function(haptic: PSDL_Haptic; strength: Single; length: Uint32): Integer; cdecl;
  SDL_HapticRumbleStop: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticRumbleSupported: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticRunEffect: function(haptic: PSDL_Haptic; effect: Integer; iterations: Uint32): Integer; cdecl;
  SDL_HapticSetAutocenter: function(haptic: PSDL_Haptic; autocenter: Integer): Integer; cdecl;
  SDL_HapticSetGain: function(haptic: PSDL_Haptic; gain: Integer): Integer; cdecl;
  SDL_HapticStopAll: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticStopEffect: function(haptic: PSDL_Haptic; effect: Integer): Integer; cdecl;
  SDL_HapticUnpause: function(haptic: PSDL_Haptic): Integer; cdecl;
  SDL_HapticUpdateEffect: function(haptic: PSDL_Haptic; effect: Integer; data: PSDL_HapticEffect): Integer; cdecl;
  SDL_Has3DNow: function(): SDL_bool; cdecl;
  SDL_HasAltiVec: function(): SDL_bool; cdecl;
  SDL_HasARMSIMD: function(): SDL_bool; cdecl;
  SDL_HasAVX: function(): SDL_bool; cdecl;
  SDL_HasAVX2: function(): SDL_bool; cdecl;
  SDL_HasAVX512F: function(): SDL_bool; cdecl;
  SDL_HasClipboardText: function(): SDL_bool; cdecl;
  SDL_HasColorKey: function(surface: PSDL_Surface): SDL_bool; cdecl;
  SDL_HasEvent: function(_type: Uint32): SDL_bool; cdecl;
  SDL_HasEvents: function(minType: Uint32; maxType: Uint32): SDL_bool; cdecl;
  SDL_HasIntersection: function(const A: PSDL_Rect; const B: PSDL_Rect): SDL_bool; cdecl;
  SDL_HasMMX: function(): SDL_bool; cdecl;
  SDL_HasNEON: function(): SDL_bool; cdecl;
  SDL_HasRDTSC: function(): SDL_bool; cdecl;
  SDL_HasScreenKeyboardSupport: function(): SDL_bool; cdecl;
  SDL_HasSSE: function(): SDL_bool; cdecl;
  SDL_HasSSE2: function(): SDL_bool; cdecl;
  SDL_HasSSE3: function(): SDL_bool; cdecl;
  SDL_HasSSE41: function(): SDL_bool; cdecl;
  SDL_HasSSE42: function(): SDL_bool; cdecl;
  SDL_HasSurfaceRLE: function(surface: PSDL_Surface): SDL_bool; cdecl;
  SDL_hid_ble_scan: procedure(active: SDL_bool); cdecl;
  SDL_hid_close: procedure(dev: PSDL_hid_device); cdecl;
  SDL_hid_device_change_count: function(): Uint32; cdecl;
  SDL_hid_enumerate: function(vendor_id: Word; product_id: Word): PSDL_hid_device_info; cdecl;
  SDL_hid_exit: function(): Integer; cdecl;
  SDL_hid_free_enumeration: procedure(devs: PSDL_hid_device_info); cdecl;
  SDL_hid_get_feature_report: function(dev: PSDL_hid_device; data: PByte; length: NativeUInt): Integer; cdecl;
  SDL_hid_get_indexed_string: function(dev: PSDL_hid_device; string_index: Integer; _string: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_hid_get_manufacturer_string: function(dev: PSDL_hid_device; _string: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_hid_get_product_string: function(dev: PSDL_hid_device; _string: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_hid_get_serial_number_string: function(dev: PSDL_hid_device; _string: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_hid_init: function(): Integer; cdecl;
  SDL_hid_open: function(vendor_id: Word; product_id: Word; const serial_number: PWideChar): PSDL_hid_device; cdecl;
  SDL_hid_open_path: function(const path: PUTF8Char; bExclusive: Integer): PSDL_hid_device; cdecl;
  SDL_hid_read: function(dev: PSDL_hid_device; data: PByte; length: NativeUInt): Integer; cdecl;
  SDL_hid_read_timeout: function(dev: PSDL_hid_device; data: PByte; length: NativeUInt; milliseconds: Integer): Integer; cdecl;
  SDL_hid_send_feature_report: function(dev: PSDL_hid_device; const data: PByte; length: NativeUInt): Integer; cdecl;
  SDL_hid_set_nonblocking: function(dev: PSDL_hid_device; nonblock: Integer): Integer; cdecl;
  SDL_hid_write: function(dev: PSDL_hid_device; const data: PByte; length: NativeUInt): Integer; cdecl;
  SDL_HideWindow: procedure(window: PSDL_Window); cdecl;
  SDL_iconv: function(cd: SDL_iconv_t; inbuf: PPUTF8Char; inbytesleft: PNativeUInt; outbuf: PPUTF8Char; outbytesleft: PNativeUInt): NativeUInt; cdecl;
  SDL_iconv_close: function(cd: SDL_iconv_t): Integer; cdecl;
  SDL_iconv_open: function(const tocode: PUTF8Char; const fromcode: PUTF8Char): SDL_iconv_t; cdecl;
  SDL_iconv_string: function(const tocode: PUTF8Char; const fromcode: PUTF8Char; const inbuf: PUTF8Char; inbytesleft: NativeUInt): PUTF8Char; cdecl;
  SDL_imageFilterAbsDiff: function(Src1: PByte; Src2: PByte; Dest: PByte; length: Cardinal): Integer; cdecl;
  SDL_imageFilterAdd: function(Src1: PByte; Src2: PByte; Dest: PByte; length: Cardinal): Integer; cdecl;
  SDL_imageFilterAddByte: function(Src1: PByte; Dest: PByte; length: Cardinal; C: Byte): Integer; cdecl;
  SDL_imageFilterAddByteToHalf: function(Src1: PByte; Dest: PByte; length: Cardinal; C: Byte): Integer; cdecl;
  SDL_imageFilterAddUint: function(Src1: PByte; Dest: PByte; length: Cardinal; C: Cardinal): Integer; cdecl;
  SDL_imageFilterBinarizeUsingThreshold: function(Src1: PByte; Dest: PByte; length: Cardinal; T: Byte): Integer; cdecl;
  SDL_imageFilterBitAnd: function(Src1: PByte; Src2: PByte; Dest: PByte; length: Cardinal): Integer; cdecl;
  SDL_imageFilterBitNegation: function(Src1: PByte; Dest: PByte; length: Cardinal): Integer; cdecl;
  SDL_imageFilterBitOr: function(Src1: PByte; Src2: PByte; Dest: PByte; length: Cardinal): Integer; cdecl;
  SDL_imageFilterClipToRange: function(Src1: PByte; Dest: PByte; length: Cardinal; Tmin: Byte; Tmax: Byte): Integer; cdecl;
  SDL_imageFilterDiv: function(Src1: PByte; Src2: PByte; Dest: PByte; length: Cardinal): Integer; cdecl;
  SDL_imageFilterMean: function(Src1: PByte; Src2: PByte; Dest: PByte; length: Cardinal): Integer; cdecl;
  SDL_imageFilterMMXdetect: function(): Integer; cdecl;
  SDL_imageFilterMMXoff: procedure(); cdecl;
  SDL_imageFilterMMXon: procedure(); cdecl;
  SDL_imageFilterMult: function(Src1: PByte; Src2: PByte; Dest: PByte; length: Cardinal): Integer; cdecl;
  SDL_imageFilterMultByByte: function(Src1: PByte; Dest: PByte; length: Cardinal; C: Byte): Integer; cdecl;
  SDL_imageFilterMultDivby2: function(Src1: PByte; Src2: PByte; Dest: PByte; length: Cardinal): Integer; cdecl;
  SDL_imageFilterMultDivby4: function(Src1: PByte; Src2: PByte; Dest: PByte; length: Cardinal): Integer; cdecl;
  SDL_imageFilterMultNor: function(Src1: PByte; Src2: PByte; Dest: PByte; length: Cardinal): Integer; cdecl;
  SDL_imageFilterNormalizeLinear: function(Src: PByte; Dest: PByte; length: Cardinal; Cmin: Integer; Cmax: Integer; Nmin: Integer; Nmax: Integer): Integer; cdecl;
  SDL_imageFilterShiftLeft: function(Src1: PByte; Dest: PByte; length: Cardinal; N: Byte): Integer; cdecl;
  SDL_imageFilterShiftLeftByte: function(Src1: PByte; Dest: PByte; length: Cardinal; N: Byte): Integer; cdecl;
  SDL_imageFilterShiftLeftUint: function(Src1: PByte; Dest: PByte; length: Cardinal; N: Byte): Integer; cdecl;
  SDL_imageFilterShiftRight: function(Src1: PByte; Dest: PByte; length: Cardinal; N: Byte): Integer; cdecl;
  SDL_imageFilterShiftRightAndMultByByte: function(Src1: PByte; Dest: PByte; length: Cardinal; N: Byte; C: Byte): Integer; cdecl;
  SDL_imageFilterShiftRightUint: function(Src1: PByte; Dest: PByte; length: Cardinal; N: Byte): Integer; cdecl;
  SDL_imageFilterSub: function(Src1: PByte; Src2: PByte; Dest: PByte; length: Cardinal): Integer; cdecl;
  SDL_imageFilterSubByte: function(Src1: PByte; Dest: PByte; length: Cardinal; C: Byte): Integer; cdecl;
  SDL_imageFilterSubUint: function(Src1: PByte; Dest: PByte; length: Cardinal; C: Cardinal): Integer; cdecl;
  SDL_Init: function(flags: Uint32): Integer; cdecl;
  SDL_initFramerate: procedure(manager: PFPSmanager); cdecl;
  SDL_InitSubSystem: function(flags: Uint32): Integer; cdecl;
  SDL_IntersectRect: function(const A: PSDL_Rect; const B: PSDL_Rect; result: PSDL_Rect): SDL_bool; cdecl;
  SDL_IntersectRectAndLine: function(const rect: PSDL_Rect; X1: PInteger; Y1: PInteger; X2: PInteger; Y2: PInteger): SDL_bool; cdecl;
  SDL_isalnum: function(x: Integer): Integer; cdecl;
  SDL_isalpha: function(x: Integer): Integer; cdecl;
  SDL_isblank: function(x: Integer): Integer; cdecl;
  SDL_iscntrl: function(x: Integer): Integer; cdecl;
  SDL_isdigit: function(x: Integer): Integer; cdecl;
  SDL_IsGameController: function(joystick_index: Integer): SDL_bool; cdecl;
  SDL_isgraph: function(x: Integer): Integer; cdecl;
  SDL_islower: function(x: Integer): Integer; cdecl;
  SDL_isprint: function(x: Integer): Integer; cdecl;
  SDL_ispunct: function(x: Integer): Integer; cdecl;
  SDL_IsScreenKeyboardShown: function(window: PSDL_Window): SDL_bool; cdecl;
  SDL_IsScreenSaverEnabled: function(): SDL_bool; cdecl;
  SDL_IsShapedWindow: function(const window: PSDL_Window): SDL_bool; cdecl;
  SDL_isspace: function(x: Integer): Integer; cdecl;
  SDL_IsTablet: function(): SDL_bool; cdecl;
  SDL_IsTextInputActive: function(): SDL_bool; cdecl;
  SDL_isupper: function(x: Integer): Integer; cdecl;
  SDL_isxdigit: function(x: Integer): Integer; cdecl;
  SDL_itoa: function(value: Integer; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_JoystickAttachVirtual: function(_type: SDL_JoystickType; naxes: Integer; nbuttons: Integer; nhats: Integer): Integer; cdecl;
  SDL_JoystickClose: procedure(joystick: PSDL_Joystick); cdecl;
  SDL_JoystickCurrentPowerLevel: function(joystick: PSDL_Joystick): SDL_JoystickPowerLevel; cdecl;
  SDL_JoystickDetachVirtual: function(device_index: Integer): Integer; cdecl;
  SDL_JoystickEventState: function(state: Integer): Integer; cdecl;
  SDL_JoystickFromInstanceID: function(instance_id: SDL_JoystickID): PSDL_Joystick; cdecl;
  SDL_JoystickFromPlayerIndex: function(player_index: Integer): PSDL_Joystick; cdecl;
  SDL_JoystickGetAttached: function(joystick: PSDL_Joystick): SDL_bool; cdecl;
  SDL_JoystickGetAxis: function(joystick: PSDL_Joystick; axis: Integer): Sint16; cdecl;
  SDL_JoystickGetAxisInitialState: function(joystick: PSDL_Joystick; axis: Integer; state: PSint16): SDL_bool; cdecl;
  SDL_JoystickGetBall: function(joystick: PSDL_Joystick; ball: Integer; dx: PInteger; dy: PInteger): Integer; cdecl;
  SDL_JoystickGetButton: function(joystick: PSDL_Joystick; button: Integer): Uint8; cdecl;
  SDL_JoystickGetDeviceGUID: function(device_index: Integer): SDL_JoystickGUID; cdecl;
  SDL_JoystickGetDeviceInstanceID: function(device_index: Integer): SDL_JoystickID; cdecl;
  SDL_JoystickGetDevicePlayerIndex: function(device_index: Integer): Integer; cdecl;
  SDL_JoystickGetDeviceProduct: function(device_index: Integer): Uint16; cdecl;
  SDL_JoystickGetDeviceProductVersion: function(device_index: Integer): Uint16; cdecl;
  SDL_JoystickGetDeviceType: function(device_index: Integer): SDL_JoystickType; cdecl;
  SDL_JoystickGetDeviceVendor: function(device_index: Integer): Uint16; cdecl;
  SDL_JoystickGetGUID: function(joystick: PSDL_Joystick): SDL_JoystickGUID; cdecl;
  SDL_JoystickGetGUIDFromString: function(const pchGUID: PUTF8Char): SDL_JoystickGUID; cdecl;
  SDL_JoystickGetGUIDString: procedure(guid: SDL_JoystickGUID; pszGUID: PUTF8Char; cbGUID: Integer); cdecl;
  SDL_JoystickGetHat: function(joystick: PSDL_Joystick; hat: Integer): Uint8; cdecl;
  SDL_JoystickGetPlayerIndex: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_JoystickGetProduct: function(joystick: PSDL_Joystick): Uint16; cdecl;
  SDL_JoystickGetProductVersion: function(joystick: PSDL_Joystick): Uint16; cdecl;
  SDL_JoystickGetSerial: function(joystick: PSDL_Joystick): PUTF8Char; cdecl;
  SDL_JoystickGetType: function(joystick: PSDL_Joystick): SDL_JoystickType; cdecl;
  SDL_JoystickGetVendor: function(joystick: PSDL_Joystick): Uint16; cdecl;
  SDL_JoystickHasLED: function(joystick: PSDL_Joystick): SDL_bool; cdecl;
  SDL_JoystickHasRumble: function(joystick: PSDL_Joystick): SDL_bool; cdecl;
  SDL_JoystickHasRumbleTriggers: function(joystick: PSDL_Joystick): SDL_bool; cdecl;
  SDL_JoystickInstanceID: function(joystick: PSDL_Joystick): SDL_JoystickID; cdecl;
  SDL_JoystickIsHaptic: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_JoystickIsVirtual: function(device_index: Integer): SDL_bool; cdecl;
  SDL_JoystickName: function(joystick: PSDL_Joystick): PUTF8Char; cdecl;
  SDL_JoystickNameForIndex: function(device_index: Integer): PUTF8Char; cdecl;
  SDL_JoystickNumAxes: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_JoystickNumBalls: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_JoystickNumButtons: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_JoystickNumHats: function(joystick: PSDL_Joystick): Integer; cdecl;
  SDL_JoystickOpen: function(device_index: Integer): PSDL_Joystick; cdecl;
  SDL_JoystickRumble: function(joystick: PSDL_Joystick; low_frequency_rumble: Uint16; high_frequency_rumble: Uint16; duration_ms: Uint32): Integer; cdecl;
  SDL_JoystickRumbleTriggers: function(joystick: PSDL_Joystick; left_rumble: Uint16; right_rumble: Uint16; duration_ms: Uint32): Integer; cdecl;
  SDL_JoystickSendEffect: function(joystick: PSDL_Joystick; const data: Pointer; size: Integer): Integer; cdecl;
  SDL_JoystickSetLED: function(joystick: PSDL_Joystick; red: Uint8; green: Uint8; blue: Uint8): Integer; cdecl;
  SDL_JoystickSetPlayerIndex: procedure(joystick: PSDL_Joystick; player_index: Integer); cdecl;
  SDL_JoystickSetVirtualAxis: function(joystick: PSDL_Joystick; axis: Integer; value: Sint16): Integer; cdecl;
  SDL_JoystickSetVirtualButton: function(joystick: PSDL_Joystick; button: Integer; value: Uint8): Integer; cdecl;
  SDL_JoystickSetVirtualHat: function(joystick: PSDL_Joystick; hat: Integer; value: Uint8): Integer; cdecl;
  SDL_JoystickUpdate: procedure(); cdecl;
  SDL_lltoa: function(value: Sint64; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_LoadBMP_RW: function(src: PSDL_RWops; freesrc: Integer): PSDL_Surface; cdecl;
  SDL_LoadDollarTemplates: function(touchId: SDL_TouchID; src: PSDL_RWops): Integer; cdecl;
  SDL_LoadFile: function(const _file: PUTF8Char; datasize: PNativeUInt): Pointer; cdecl;
  SDL_LoadFile_RW: function(src: PSDL_RWops; datasize: PNativeUInt; freesrc: Integer): Pointer; cdecl;
  SDL_LoadFunction: function(handle: Pointer; const name: PUTF8Char): Pointer; cdecl;
  SDL_LoadObject: function(const sofile: PUTF8Char): Pointer; cdecl;
  SDL_LoadWAV_RW: function(src: PSDL_RWops; freesrc: Integer; spec: PSDL_AudioSpec; audio_buf: PPUint8; audio_len: PUint32): PSDL_AudioSpec; cdecl;
  SDL_LockAudio: procedure(); cdecl;
  SDL_LockAudioDevice: procedure(dev: SDL_AudioDeviceID); cdecl;
  SDL_LockJoysticks: procedure(); cdecl;
  SDL_LockMutex: function(mutex: PSDL_mutex): Integer; cdecl;
  SDL_LockSensors: procedure(); cdecl;
  SDL_LockSurface: function(surface: PSDL_Surface): Integer; cdecl;
  SDL_LockTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; pixels: PPointer; pitch: PInteger): Integer; cdecl;
  SDL_LockTextureToSurface: function(texture: PSDL_Texture; const rect: PSDL_Rect; surface: PPSDL_Surface): Integer; cdecl;
  SDL_log: function(x: Double): Double; cdecl;
  SDL_Log_: procedure(const fmt: PUTF8Char) varargs; cdecl;
  SDL_log10: function(x: Double): Double; cdecl;
  SDL_log10f: function(x: Single): Single; cdecl;
  SDL_LogCritical: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogDebug: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogError: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_logf: function(x: Single): Single; cdecl;
  SDL_LogGetOutputFunction: procedure(callback: PSDL_LogOutputFunction; userdata: PPointer); cdecl;
  SDL_LogGetPriority: function(category: Integer): SDL_LogPriority; cdecl;
  SDL_LogInfo: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogMessage: procedure(category: Integer; priority: SDL_LogPriority; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogMessageV: procedure(category: Integer; priority: SDL_LogPriority; const fmt: PUTF8Char; ap: Pointer); cdecl;
  SDL_LogResetPriorities: procedure(); cdecl;
  SDL_LogSetAllPriority: procedure(priority: SDL_LogPriority); cdecl;
  SDL_LogSetOutputFunction: procedure(callback: SDL_LogOutputFunction; userdata: Pointer); cdecl;
  SDL_LogSetPriority: procedure(category: Integer; priority: SDL_LogPriority); cdecl;
  SDL_LogVerbose: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LogWarn: procedure(category: Integer; const fmt: PUTF8Char) varargs; cdecl;
  SDL_LowerBlit: function(src: PSDL_Surface; srcrect: PSDL_Rect; dst: PSDL_Surface; dstrect: PSDL_Rect): Integer; cdecl;
  SDL_LowerBlitScaled: function(src: PSDL_Surface; srcrect: PSDL_Rect; dst: PSDL_Surface; dstrect: PSDL_Rect): Integer; cdecl;
  SDL_lround: function(x: Double): Integer; cdecl;
  SDL_lroundf: function(x: Single): Integer; cdecl;
  SDL_ltoa: function(value: Integer; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_main: function(argc: Integer; argv: PPUTF8Char): Integer; cdecl;
  SDL_malloc: function(size: NativeUInt): Pointer; cdecl;
  SDL_MapRGB: function(const format: PSDL_PixelFormat; r: Uint8; g: Uint8; b: Uint8): Uint32; cdecl;
  SDL_MapRGBA: function(const format: PSDL_PixelFormat; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Uint32; cdecl;
  SDL_MasksToPixelFormatEnum: function(bpp: Integer; Rmask: Uint32; Gmask: Uint32; Bmask: Uint32; Amask: Uint32): Uint32; cdecl;
  SDL_MaximizeWindow: procedure(window: PSDL_Window); cdecl;
  SDL_memcmp: function(const s1: Pointer; const s2: Pointer; len: NativeUInt): Integer; cdecl;
  SDL_memcpy: function(dst: Pointer; const src: Pointer; len: NativeUInt): Pointer; cdecl;
  SDL_memmove: function(dst: Pointer; const src: Pointer; len: NativeUInt): Pointer; cdecl;
  SDL_MemoryBarrierAcquireFunction: procedure(); cdecl;
  SDL_MemoryBarrierReleaseFunction: procedure(); cdecl;
  SDL_memset: function(dst: Pointer; c: Integer; len: NativeUInt): Pointer; cdecl;
  SDL_Metal_CreateView: function(window: PSDL_Window): SDL_MetalView; cdecl;
  SDL_Metal_DestroyView: procedure(view: SDL_MetalView); cdecl;
  SDL_Metal_GetDrawableSize: procedure(window: PSDL_Window; w: PInteger; h: PInteger); cdecl;
  SDL_Metal_GetLayer: function(view: SDL_MetalView): Pointer; cdecl;
  SDL_MinimizeWindow: procedure(window: PSDL_Window); cdecl;
  SDL_MixAudio: procedure(dst: PUint8; const src: PUint8; len: Uint32; volume: Integer); cdecl;
  SDL_MixAudioFormat: procedure(dst: PUint8; const src: PUint8; format: SDL_AudioFormat; len: Uint32; volume: Integer); cdecl;
  SDL_MouseIsHaptic: function(): Integer; cdecl;
  SDL_NewAudioStream: function(const src_format: SDL_AudioFormat; const src_channels: Uint8; const src_rate: Integer; const dst_format: SDL_AudioFormat; const dst_channels: Uint8; const dst_rate: Integer): PSDL_AudioStream; cdecl;
  SDL_NumHaptics: function(): Integer; cdecl;
  SDL_NumJoysticks: function(): Integer; cdecl;
  SDL_NumSensors: function(): Integer; cdecl;
  SDL_OnApplicationDidBecomeActive: procedure(); cdecl;
  SDL_OnApplicationDidEnterBackground: procedure(); cdecl;
  SDL_OnApplicationDidReceiveMemoryWarning: procedure(); cdecl;
  SDL_OnApplicationWillEnterForeground: procedure(); cdecl;
  SDL_OnApplicationWillResignActive: procedure(); cdecl;
  SDL_OnApplicationWillTerminate: procedure(); cdecl;
  SDL_OpenAudio: function(desired: PSDL_AudioSpec; obtained: PSDL_AudioSpec): Integer; cdecl;
  SDL_OpenAudioDevice: function(const device: PUTF8Char; iscapture: Integer; const desired: PSDL_AudioSpec; obtained: PSDL_AudioSpec; allowed_changes: Integer): SDL_AudioDeviceID; cdecl;
  SDL_OpenURL: function(const url: PUTF8Char): Integer; cdecl;
  SDL_PauseAudio: procedure(pause_on: Integer); cdecl;
  SDL_PauseAudioDevice: procedure(dev: SDL_AudioDeviceID; pause_on: Integer); cdecl;
  SDL_PeepEvents: function(events: PSDL_Event; numevents: Integer; action: SDL_eventaction; minType: Uint32; maxType: Uint32): Integer; cdecl;
  SDL_PixelFormatEnumToMasks: function(format: Uint32; bpp: PInteger; Rmask: PUint32; Gmask: PUint32; Bmask: PUint32; Amask: PUint32): SDL_bool; cdecl;
  SDL_PollEvent: function(event: PSDL_Event): Integer; cdecl;
  SDL_pow: function(x: Double; y: Double): Double; cdecl;
  SDL_powf: function(x: Single; y: Single): Single; cdecl;
  SDL_PremultiplyAlpha: function(width: Integer; height: Integer; src_format: Uint32; const src: Pointer; src_pitch: Integer; dst_format: Uint32; dst: Pointer; dst_pitch: Integer): Integer; cdecl;
  SDL_PumpEvents: procedure(); cdecl;
  SDL_PushEvent: function(event: PSDL_Event): Integer; cdecl;
  SDL_qsort: procedure(base: Pointer; nmemb: NativeUInt; size: NativeUInt; compare: SDL_qsort_compare); cdecl;
  SDL_QueryTexture: function(texture: PSDL_Texture; format: PUint32; access: PInteger; w: PInteger; h: PInteger): Integer; cdecl;
  SDL_QueueAudio: function(dev: SDL_AudioDeviceID; const data: Pointer; len: Uint32): Integer; cdecl;
  SDL_Quit: procedure(); cdecl;
  SDL_QuitSubSystem: procedure(flags: Uint32); cdecl;
  SDL_RaiseWindow: procedure(window: PSDL_Window); cdecl;
  SDL_ReadBE16: function(src: PSDL_RWops): Uint16; cdecl;
  SDL_ReadBE32: function(src: PSDL_RWops): Uint32; cdecl;
  SDL_ReadBE64: function(src: PSDL_RWops): Uint64; cdecl;
  SDL_ReadLE16: function(src: PSDL_RWops): Uint16; cdecl;
  SDL_ReadLE32: function(src: PSDL_RWops): Uint32; cdecl;
  SDL_ReadLE64: function(src: PSDL_RWops): Uint64; cdecl;
  SDL_ReadU8: function(src: PSDL_RWops): Uint8; cdecl;
  SDL_realloc: function(mem: Pointer; size: NativeUInt): Pointer; cdecl;
  SDL_RecordGesture: function(touchId: SDL_TouchID): Integer; cdecl;
  SDL_RegisterApp: function(const name: PUTF8Char; style: Uint32; hInst: Pointer): Integer; cdecl;
  SDL_RegisterEvents: function(numevents: Integer): Uint32; cdecl;
  SDL_RemoveTimer: function(id: SDL_TimerID): SDL_bool; cdecl;
  SDL_RenderClear: function(renderer: PSDL_Renderer): Integer; cdecl;
  SDL_RenderCopy: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_Rect; const dstrect: PSDL_Rect): Integer; cdecl;
  SDL_RenderCopyEx: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_Rect; const dstrect: PSDL_Rect; const angle: Double; const center: PSDL_Point; const flip: SDL_RendererFlip): Integer; cdecl;
  SDL_RenderCopyExF: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_Rect; const dstrect: PSDL_FRect; const angle: Double; const center: PSDL_FPoint; const flip: SDL_RendererFlip): Integer; cdecl;
  SDL_RenderCopyF: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const srcrect: PSDL_Rect; const dstrect: PSDL_FRect): Integer; cdecl;
  SDL_RenderDrawLine: function(renderer: PSDL_Renderer; x1: Integer; y1: Integer; x2: Integer; y2: Integer): Integer; cdecl;
  SDL_RenderDrawLineF: function(renderer: PSDL_Renderer; x1: Single; y1: Single; x2: Single; y2: Single): Integer; cdecl;
  SDL_RenderDrawLines: function(renderer: PSDL_Renderer; const points: PSDL_Point; count: Integer): Integer; cdecl;
  SDL_RenderDrawLinesF: function(renderer: PSDL_Renderer; const points: PSDL_FPoint; count: Integer): Integer; cdecl;
  SDL_RenderDrawPoint: function(renderer: PSDL_Renderer; x: Integer; y: Integer): Integer; cdecl;
  SDL_RenderDrawPointF: function(renderer: PSDL_Renderer; x: Single; y: Single): Integer; cdecl;
  SDL_RenderDrawPoints: function(renderer: PSDL_Renderer; const points: PSDL_Point; count: Integer): Integer; cdecl;
  SDL_RenderDrawPointsF: function(renderer: PSDL_Renderer; const points: PSDL_FPoint; count: Integer): Integer; cdecl;
  SDL_RenderDrawRect: function(renderer: PSDL_Renderer; const rect: PSDL_Rect): Integer; cdecl;
  SDL_RenderDrawRectF: function(renderer: PSDL_Renderer; const rect: PSDL_FRect): Integer; cdecl;
  SDL_RenderDrawRects: function(renderer: PSDL_Renderer; const rects: PSDL_Rect; count: Integer): Integer; cdecl;
  SDL_RenderDrawRectsF: function(renderer: PSDL_Renderer; const rects: PSDL_FRect; count: Integer): Integer; cdecl;
  SDL_RenderFillRect: function(renderer: PSDL_Renderer; const rect: PSDL_Rect): Integer; cdecl;
  SDL_RenderFillRectF: function(renderer: PSDL_Renderer; const rect: PSDL_FRect): Integer; cdecl;
  SDL_RenderFillRects: function(renderer: PSDL_Renderer; const rects: PSDL_Rect; count: Integer): Integer; cdecl;
  SDL_RenderFillRectsF: function(renderer: PSDL_Renderer; const rects: PSDL_FRect; count: Integer): Integer; cdecl;
  SDL_RenderFlush: function(renderer: PSDL_Renderer): Integer; cdecl;
  SDL_RenderGeometry: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const vertices: PSDL_Vertex; num_vertices: Integer; const indices: PInteger; num_indices: Integer): Integer; cdecl;
  SDL_RenderGeometryRaw: function(renderer: PSDL_Renderer; texture: PSDL_Texture; const xy: PSingle; xy_stride: Integer; const color: PSDL_Color; color_stride: Integer; const uv: PSingle; uv_stride: Integer; num_vertices: Integer; const indices: Pointer; num_indices: Integer; size_indices: Integer): Integer; cdecl;
  SDL_RenderGetClipRect: procedure(renderer: PSDL_Renderer; rect: PSDL_Rect); cdecl;
  SDL_RenderGetD3D11Device: function(renderer: PSDL_Renderer): PID3D11Device; cdecl;
  SDL_RenderGetD3D9Device: function(renderer: PSDL_Renderer): PIDirect3DDevice9; cdecl;
  SDL_RenderGetIntegerScale: function(renderer: PSDL_Renderer): SDL_bool; cdecl;
  SDL_RenderGetLogicalSize: procedure(renderer: PSDL_Renderer; w: PInteger; h: PInteger); cdecl;
  SDL_RenderGetMetalCommandEncoder: function(renderer: PSDL_Renderer): Pointer; cdecl;
  SDL_RenderGetMetalLayer: function(renderer: PSDL_Renderer): Pointer; cdecl;
  SDL_RenderGetScale: procedure(renderer: PSDL_Renderer; scaleX: PSingle; scaleY: PSingle); cdecl;
  SDL_RenderGetViewport: procedure(renderer: PSDL_Renderer; rect: PSDL_Rect); cdecl;
  SDL_RenderIsClipEnabled: function(renderer: PSDL_Renderer): SDL_bool; cdecl;
  SDL_RenderLogicalToWindow: procedure(renderer: PSDL_Renderer; logicalX: Single; logicalY: Single; windowX: PInteger; windowY: PInteger); cdecl;
  SDL_RenderPresent: procedure(renderer: PSDL_Renderer); cdecl;
  SDL_RenderReadPixels: function(renderer: PSDL_Renderer; const rect: PSDL_Rect; format: Uint32; pixels: Pointer; pitch: Integer): Integer; cdecl;
  SDL_RenderSetClipRect: function(renderer: PSDL_Renderer; const rect: PSDL_Rect): Integer; cdecl;
  SDL_RenderSetIntegerScale: function(renderer: PSDL_Renderer; enable: SDL_bool): Integer; cdecl;
  SDL_RenderSetLogicalSize: function(renderer: PSDL_Renderer; w: Integer; h: Integer): Integer; cdecl;
  SDL_RenderSetScale: function(renderer: PSDL_Renderer; scaleX: Single; scaleY: Single): Integer; cdecl;
  SDL_RenderSetViewport: function(renderer: PSDL_Renderer; const rect: PSDL_Rect): Integer; cdecl;
  SDL_RenderSetVSync: function(renderer: PSDL_Renderer; vsync: Integer): Integer; cdecl;
  SDL_RenderTargetSupported: function(renderer: PSDL_Renderer): SDL_bool; cdecl;
  SDL_RenderWindowToLogical: procedure(renderer: PSDL_Renderer; windowX: Integer; windowY: Integer; logicalX: PSingle; logicalY: PSingle); cdecl;
  SDL_ReportAssertion: function(p1: PSDL_AssertData; const p2: PUTF8Char; const p3: PUTF8Char; p4: Integer): SDL_AssertState; cdecl;
  SDL_ResetAssertionReport: procedure(); cdecl;
  SDL_RestoreWindow: procedure(window: PSDL_Window); cdecl;
  SDL_round: function(x: Double): Double; cdecl;
  SDL_roundf: function(x: Single): Single; cdecl;
  SDL_RWclose: function(context: PSDL_RWops): Integer; cdecl;
  SDL_RWFromConstMem: function(const mem: Pointer; size: Integer): PSDL_RWops; cdecl;
  SDL_RWFromFile: function(const _file: PUTF8Char; const mode: PUTF8Char): PSDL_RWops; cdecl;
  SDL_RWFromFP: function(fp: PPointer; autoclose: SDL_bool): PSDL_RWops; cdecl;
  SDL_RWFromMem: function(mem: Pointer; size: Integer): PSDL_RWops; cdecl;
  SDL_RWread: function(context: PSDL_RWops; ptr: Pointer; size: NativeUInt; maxnum: NativeUInt): NativeUInt; cdecl;
  SDL_RWseek: function(context: PSDL_RWops; offset: Sint64; whence: Integer): Sint64; cdecl;
  SDL_RWsize: function(context: PSDL_RWops): Sint64; cdecl;
  SDL_RWtell: function(context: PSDL_RWops): Sint64; cdecl;
  SDL_RWwrite: function(context: PSDL_RWops; const ptr: Pointer; size: NativeUInt; num: NativeUInt): NativeUInt; cdecl;
  SDL_SaveAllDollarTemplates: function(dst: PSDL_RWops): Integer; cdecl;
  SDL_SaveBMP_RW: function(surface: PSDL_Surface; dst: PSDL_RWops; freedst: Integer): Integer; cdecl;
  SDL_SaveDollarTemplate: function(gestureId: SDL_GestureID; dst: PSDL_RWops): Integer; cdecl;
  SDL_scalbn: function(x: Double; n: Integer): Double; cdecl;
  SDL_scalbnf: function(x: Single; n: Integer): Single; cdecl;
  SDL_SemPost: function(sem: PSDL_sem): Integer; cdecl;
  SDL_SemTryWait: function(sem: PSDL_sem): Integer; cdecl;
  SDL_SemValue: function(sem: PSDL_sem): Uint32; cdecl;
  SDL_SemWait: function(sem: PSDL_sem): Integer; cdecl;
  SDL_SemWaitTimeout: function(sem: PSDL_sem; ms: Uint32): Integer; cdecl;
  SDL_SensorClose: procedure(sensor: PSDL_Sensor); cdecl;
  SDL_SensorFromInstanceID: function(instance_id: SDL_SensorID): PSDL_Sensor; cdecl;
  SDL_SensorGetData: function(sensor: PSDL_Sensor; data: PSingle; num_values: Integer): Integer; cdecl;
  SDL_SensorGetDeviceInstanceID: function(device_index: Integer): SDL_SensorID; cdecl;
  SDL_SensorGetDeviceName: function(device_index: Integer): PUTF8Char; cdecl;
  SDL_SensorGetDeviceNonPortableType: function(device_index: Integer): Integer; cdecl;
  SDL_SensorGetDeviceType: function(device_index: Integer): SDL_SensorType; cdecl;
  SDL_SensorGetInstanceID: function(sensor: PSDL_Sensor): SDL_SensorID; cdecl;
  SDL_SensorGetName: function(sensor: PSDL_Sensor): PUTF8Char; cdecl;
  SDL_SensorGetNonPortableType: function(sensor: PSDL_Sensor): Integer; cdecl;
  SDL_SensorGetType: function(sensor: PSDL_Sensor): SDL_SensorType; cdecl;
  SDL_SensorOpen: function(device_index: Integer): PSDL_Sensor; cdecl;
  SDL_SensorUpdate: procedure(); cdecl;
  SDL_SetAssertionHandler: procedure(handler: SDL_AssertionHandler; userdata: Pointer); cdecl;
  SDL_SetClipboardText: function(const text: PUTF8Char): Integer; cdecl;
  SDL_SetClipRect: function(surface: PSDL_Surface; const rect: PSDL_Rect): SDL_bool; cdecl;
  SDL_SetColorKey: function(surface: PSDL_Surface; flag: Integer; key: Uint32): Integer; cdecl;
  SDL_SetCursor: procedure(cursor: PSDL_Cursor); cdecl;
  SDL_setenv: function(const name: PUTF8Char; const value: PUTF8Char; overwrite: Integer): Integer; cdecl;
  SDL_SetError: function(const fmt: PUTF8Char): Integer varargs; cdecl;
  SDL_SetEventFilter: procedure(filter: SDL_EventFilter; userdata: Pointer); cdecl;
  SDL_setFramerate: function(manager: PFPSmanager; rate: Uint32): Integer; cdecl;
  SDL_SetHint: function(const name: PUTF8Char; const value: PUTF8Char): SDL_bool; cdecl;
  SDL_SetHintWithPriority: function(const name: PUTF8Char; const value: PUTF8Char; priority: SDL_HintPriority): SDL_bool; cdecl;
  SDL_SetMainReady: procedure(); cdecl;
  SDL_SetMemoryFunctions: function(malloc_func: SDL_malloc_func; calloc_func: SDL_calloc_func; realloc_func: SDL_realloc_func; free_func: SDL_free_func): Integer; cdecl;
  SDL_SetModState: procedure(modstate: SDL_Keymod); cdecl;
  SDL_SetPaletteColors: function(palette: PSDL_Palette; const colors: PSDL_Color; firstcolor: Integer; ncolors: Integer): Integer; cdecl;
  SDL_SetPixelFormatPalette: function(format: PSDL_PixelFormat; palette: PSDL_Palette): Integer; cdecl;
  SDL_SetRelativeMouseMode: function(enabled: SDL_bool): Integer; cdecl;
  SDL_SetRenderDrawBlendMode: function(renderer: PSDL_Renderer; blendMode: SDL_BlendMode): Integer; cdecl;
  SDL_SetRenderDrawColor: function(renderer: PSDL_Renderer; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  SDL_SetRenderTarget: function(renderer: PSDL_Renderer; texture: PSDL_Texture): Integer; cdecl;
  SDL_SetSurfaceAlphaMod: function(surface: PSDL_Surface; alpha: Uint8): Integer; cdecl;
  SDL_SetSurfaceBlendMode: function(surface: PSDL_Surface; blendMode: SDL_BlendMode): Integer; cdecl;
  SDL_SetSurfaceColorMod: function(surface: PSDL_Surface; r: Uint8; g: Uint8; b: Uint8): Integer; cdecl;
  SDL_SetSurfacePalette: function(surface: PSDL_Surface; palette: PSDL_Palette): Integer; cdecl;
  SDL_SetSurfaceRLE: function(surface: PSDL_Surface; flag: Integer): Integer; cdecl;
  SDL_SetTextInputRect: procedure(rect: PSDL_Rect); cdecl;
  SDL_SetTextureAlphaMod: function(texture: PSDL_Texture; alpha: Uint8): Integer; cdecl;
  SDL_SetTextureBlendMode: function(texture: PSDL_Texture; blendMode: SDL_BlendMode): Integer; cdecl;
  SDL_SetTextureColorMod: function(texture: PSDL_Texture; r: Uint8; g: Uint8; b: Uint8): Integer; cdecl;
  SDL_SetTextureScaleMode: function(texture: PSDL_Texture; scaleMode: SDL_ScaleMode): Integer; cdecl;
  SDL_SetTextureUserData: function(texture: PSDL_Texture; userdata: Pointer): Integer; cdecl;
  SDL_SetThreadPriority: function(priority: SDL_ThreadPriority): Integer; cdecl;
  SDL_SetWindowAlwaysOnTop: procedure(window: PSDL_Window; on_top: SDL_bool); cdecl;
  SDL_SetWindowBordered: procedure(window: PSDL_Window; bordered: SDL_bool); cdecl;
  SDL_SetWindowBrightness: function(window: PSDL_Window; brightness: Single): Integer; cdecl;
  SDL_SetWindowData: function(window: PSDL_Window; const name: PUTF8Char; userdata: Pointer): Pointer; cdecl;
  SDL_SetWindowDisplayMode: function(window: PSDL_Window; const mode: PSDL_DisplayMode): Integer; cdecl;
  SDL_SetWindowFullscreen: function(window: PSDL_Window; flags: Uint32): Integer; cdecl;
  SDL_SetWindowGammaRamp: function(window: PSDL_Window; const red: PUint16; const green: PUint16; const blue: PUint16): Integer; cdecl;
  SDL_SetWindowGrab: procedure(window: PSDL_Window; grabbed: SDL_bool); cdecl;
  SDL_SetWindowHitTest: function(window: PSDL_Window; callback: SDL_HitTest; callback_data: Pointer): Integer; cdecl;
  SDL_SetWindowIcon: procedure(window: PSDL_Window; icon: PSDL_Surface); cdecl;
  SDL_SetWindowInputFocus: function(window: PSDL_Window): Integer; cdecl;
  SDL_SetWindowKeyboardGrab: procedure(window: PSDL_Window; grabbed: SDL_bool); cdecl;
  SDL_SetWindowMaximumSize: procedure(window: PSDL_Window; max_w: Integer; max_h: Integer); cdecl;
  SDL_SetWindowMinimumSize: procedure(window: PSDL_Window; min_w: Integer; min_h: Integer); cdecl;
  SDL_SetWindowModalFor: function(modal_window: PSDL_Window; parent_window: PSDL_Window): Integer; cdecl;
  SDL_SetWindowMouseGrab: procedure(window: PSDL_Window; grabbed: SDL_bool); cdecl;
  SDL_SetWindowMouseRect: function(window: PSDL_Window; const rect: PSDL_Rect): Integer; cdecl;
  SDL_SetWindowOpacity: function(window: PSDL_Window; opacity: Single): Integer; cdecl;
  SDL_SetWindowPosition: procedure(window: PSDL_Window; x: Integer; y: Integer); cdecl;
  SDL_SetWindowResizable: procedure(window: PSDL_Window; resizable: SDL_bool); cdecl;
  SDL_SetWindowShape: function(window: PSDL_Window; shape: PSDL_Surface; shape_mode: PSDL_WindowShapeMode): Integer; cdecl;
  SDL_SetWindowSize: procedure(window: PSDL_Window; w: Integer; h: Integer); cdecl;
  SDL_SetWindowsMessageHook: procedure(callback: SDL_WindowsMessageHook; userdata: Pointer); cdecl;
  SDL_SetWindowTitle: procedure(window: PSDL_Window; const title: PUTF8Char); cdecl;
  SDL_SetYUVConversionMode: procedure(mode: SDL_YUV_CONVERSION_MODE); cdecl;
  SDL_ShowCursor: function(toggle: Integer): Integer; cdecl;
  SDL_ShowMessageBox: function(const messageboxdata: PSDL_MessageBoxData; buttonid: PInteger): Integer; cdecl;
  SDL_ShowSimpleMessageBox: function(flags: Uint32; const title: PUTF8Char; const _message: PUTF8Char; window: PSDL_Window): Integer; cdecl;
  SDL_ShowWindow: procedure(window: PSDL_Window); cdecl;
  SDL_SIMDAlloc: function(const len: NativeUInt): Pointer; cdecl;
  SDL_SIMDFree: procedure(ptr: Pointer); cdecl;
  SDL_SIMDGetAlignment: function(): NativeUInt; cdecl;
  SDL_SIMDRealloc: function(mem: Pointer; const len: NativeUInt): Pointer; cdecl;
  SDL_sin: function(x: Double): Double; cdecl;
  SDL_sinf: function(x: Single): Single; cdecl;
  SDL_snprintf: function(text: PUTF8Char; maxlen: NativeUInt; const fmt: PUTF8Char): Integer varargs; cdecl;
  SDL_SoftStretch: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; const dstrect: PSDL_Rect): Integer; cdecl;
  SDL_SoftStretchLinear: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; const dstrect: PSDL_Rect): Integer; cdecl;
  SDL_sqrt: function(x: Double): Double; cdecl;
  SDL_sqrtf: function(x: Single): Single; cdecl;
  SDL_sscanf: function(const text: PUTF8Char; const fmt: PUTF8Char): Integer varargs; cdecl;
  SDL_StartTextInput: procedure(); cdecl;
  SDL_StopTextInput: procedure(); cdecl;
  SDL_strcasecmp: function(const str1: PUTF8Char; const str2: PUTF8Char): Integer; cdecl;
  SDL_strchr: function(const str: PUTF8Char; c: Integer): PUTF8Char; cdecl;
  SDL_strcmp: function(const str1: PUTF8Char; const str2: PUTF8Char): Integer; cdecl;
  SDL_strdup: function(const str: PUTF8Char): PUTF8Char; cdecl;
  SDL_strlcat: function(dst: PUTF8Char; const src: PUTF8Char; maxlen: NativeUInt): NativeUInt; cdecl;
  SDL_strlcpy: function(dst: PUTF8Char; const src: PUTF8Char; maxlen: NativeUInt): NativeUInt; cdecl;
  SDL_strlen: function(const str: PUTF8Char): NativeUInt; cdecl;
  SDL_strlwr: function(str: PUTF8Char): PUTF8Char; cdecl;
  SDL_strncasecmp: function(const str1: PUTF8Char; const str2: PUTF8Char; len: NativeUInt): Integer; cdecl;
  SDL_strncmp: function(const str1: PUTF8Char; const str2: PUTF8Char; maxlen: NativeUInt): Integer; cdecl;
  SDL_strrchr: function(const str: PUTF8Char; c: Integer): PUTF8Char; cdecl;
  SDL_strrev: function(str: PUTF8Char): PUTF8Char; cdecl;
  SDL_strstr: function(const haystack: PUTF8Char; const needle: PUTF8Char): PUTF8Char; cdecl;
  SDL_strtod: function(const str: PUTF8Char; endp: PPUTF8Char): Double; cdecl;
  SDL_strtokr: function(s1: PUTF8Char; const s2: PUTF8Char; saveptr: PPUTF8Char): PUTF8Char; cdecl;
  SDL_strtol: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): Integer; cdecl;
  SDL_strtoll: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): Sint64; cdecl;
  SDL_strtoul: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): Cardinal; cdecl;
  SDL_strtoull: function(const str: PUTF8Char; endp: PPUTF8Char; base: Integer): Uint64; cdecl;
  SDL_strupr: function(str: PUTF8Char): PUTF8Char; cdecl;
  SDL_tan: function(x: Double): Double; cdecl;
  SDL_tanf: function(x: Single): Single; cdecl;
  SDL_ThreadID: function(): SDL_threadID_; cdecl;
  SDL_TLSCleanup: procedure(); cdecl;
  SDL_TLSCreate: function(): SDL_TLSID; cdecl;
  SDL_TLSGet: function(id: SDL_TLSID): Pointer; cdecl;
  SDL_TLSSet: function(id: SDL_TLSID; const value: Pointer; _destructor: SDL_TLSSet_destructor): Integer; cdecl;
  SDL_tolower: function(x: Integer): Integer; cdecl;
  SDL_toupper: function(x: Integer): Integer; cdecl;
  SDL_trunc: function(x: Double): Double; cdecl;
  SDL_truncf: function(x: Single): Single; cdecl;
  SDL_TryLockMutex: function(mutex: PSDL_mutex): Integer; cdecl;
  SDL_uitoa: function(value: Cardinal; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_ulltoa: function(value: Uint64; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_ultoa: function(value: Cardinal; str: PUTF8Char; radix: Integer): PUTF8Char; cdecl;
  SDL_UnionRect: procedure(const A: PSDL_Rect; const B: PSDL_Rect; result: PSDL_Rect); cdecl;
  SDL_UnloadObject: procedure(handle: Pointer); cdecl;
  SDL_UnlockAudio: procedure(); cdecl;
  SDL_UnlockAudioDevice: procedure(dev: SDL_AudioDeviceID); cdecl;
  SDL_UnlockJoysticks: procedure(); cdecl;
  SDL_UnlockMutex: function(mutex: PSDL_mutex): Integer; cdecl;
  SDL_UnlockSensors: procedure(); cdecl;
  SDL_UnlockSurface: procedure(surface: PSDL_Surface); cdecl;
  SDL_UnlockTexture: procedure(texture: PSDL_Texture); cdecl;
  SDL_UnregisterApp: procedure(); cdecl;
  SDL_UpdateNVTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; const Yplane: PUint8; Ypitch: Integer; const UVplane: PUint8; UVpitch: Integer): Integer; cdecl;
  SDL_UpdateTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; const pixels: Pointer; pitch: Integer): Integer; cdecl;
  SDL_UpdateWindowSurface: function(window: PSDL_Window): Integer; cdecl;
  SDL_UpdateWindowSurfaceRects: function(window: PSDL_Window; const rects: PSDL_Rect; numrects: Integer): Integer; cdecl;
  SDL_UpdateYUVTexture: function(texture: PSDL_Texture; const rect: PSDL_Rect; const Yplane: PUint8; Ypitch: Integer; const Uplane: PUint8; Upitch: Integer; const Vplane: PUint8; Vpitch: Integer): Integer; cdecl;
  SDL_UpperBlit: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; dstrect: PSDL_Rect): Integer; cdecl;
  SDL_UpperBlitScaled: function(src: PSDL_Surface; const srcrect: PSDL_Rect; dst: PSDL_Surface; dstrect: PSDL_Rect): Integer; cdecl;
  SDL_utf8strlcpy: function(dst: PUTF8Char; const src: PUTF8Char; dst_bytes: NativeUInt): NativeUInt; cdecl;
  SDL_utf8strlen: function(const str: PUTF8Char): NativeUInt; cdecl;
  SDL_vasprintf: function(strp: PPUTF8Char; const fmt: PUTF8Char; ap: Pointer): Integer; cdecl;
  SDL_VideoInit: function(const driver_name: PUTF8Char): Integer; cdecl;
  SDL_VideoQuit: procedure(); cdecl;
  SDL_vsnprintf: function(text: PUTF8Char; maxlen: NativeUInt; const fmt: PUTF8Char; ap: Pointer): Integer; cdecl;
  SDL_vsscanf: function(const text: PUTF8Char; const fmt: PUTF8Char; ap: Pointer): Integer; cdecl;
  SDL_WaitEvent: function(event: PSDL_Event): Integer; cdecl;
  SDL_WaitEventTimeout: function(event: PSDL_Event; timeout: Integer): Integer; cdecl;
  SDL_WaitThread: procedure(thread: PSDL_Thread; status: PInteger); cdecl;
  SDL_WarpMouseGlobal: function(x: Integer; y: Integer): Integer; cdecl;
  SDL_WarpMouseInWindow: procedure(window: PSDL_Window; x: Integer; y: Integer); cdecl;
  SDL_WasInit: function(flags: Uint32): Uint32; cdecl;
  SDL_wcscasecmp: function(const str1: PWideChar; const str2: PWideChar): Integer; cdecl;
  SDL_wcscmp: function(const str1: PWideChar; const str2: PWideChar): Integer; cdecl;
  SDL_wcsdup: function(const wstr: PWideChar): PWideChar; cdecl;
  SDL_wcslcat: function(dst: PWideChar; const src: PWideChar; maxlen: NativeUInt): NativeUInt; cdecl;
  SDL_wcslcpy: function(dst: PWideChar; const src: PWideChar; maxlen: NativeUInt): NativeUInt; cdecl;
  SDL_wcslen: function(const wstr: PWideChar): NativeUInt; cdecl;
  SDL_wcsncasecmp: function(const str1: PWideChar; const str2: PWideChar; len: NativeUInt): Integer; cdecl;
  SDL_wcsncmp: function(const str1: PWideChar; const str2: PWideChar; maxlen: NativeUInt): Integer; cdecl;
  SDL_wcsstr: function(const haystack: PWideChar; const needle: PWideChar): PWideChar; cdecl;
  SDL_WriteBE16: function(dst: PSDL_RWops; value: Uint16): NativeUInt; cdecl;
  SDL_WriteBE32: function(dst: PSDL_RWops; value: Uint32): NativeUInt; cdecl;
  SDL_WriteBE64: function(dst: PSDL_RWops; value: Uint64): NativeUInt; cdecl;
  SDL_WriteLE16: function(dst: PSDL_RWops; value: Uint16): NativeUInt; cdecl;
  SDL_WriteLE32: function(dst: PSDL_RWops; value: Uint32): NativeUInt; cdecl;
  SDL_WriteLE64: function(dst: PSDL_RWops; value: Uint64): NativeUInt; cdecl;
  SDL_WriteU8: function(dst: PSDL_RWops; value: Uint8): NativeUInt; cdecl;
  shrinkSurface: function(src: PSDL_Surface; factorx: Integer; factory: Integer): PSDL_Surface; cdecl;
  stbi_convert_iphone_png_to_rgb: procedure(flag_true_if_should_convert: Integer); cdecl;
  stbi_convert_iphone_png_to_rgb_thread: procedure(flag_true_if_should_convert: Integer); cdecl;
  stbi_failure_reason: function(): PUTF8Char; cdecl;
  stbi_flip_vertically_on_write: procedure(flip_boolean: Integer); cdecl;
  stbi_hdr_to_ldr_gamma: procedure(gamma: Single); cdecl;
  stbi_hdr_to_ldr_scale: procedure(scale: Single); cdecl;
  stbi_image_free: procedure(retval_from_stbi_load: Pointer); cdecl;
  stbi_info: function(const filename: PUTF8Char; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  stbi_info_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  stbi_info_from_file: function(f: PPointer; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  stbi_info_from_memory: function(const buffer: Pstbi_uc; len: Integer; x: PInteger; y: PInteger; comp: PInteger): Integer; cdecl;
  stbi_is_16_bit: function(const filename: PUTF8Char): Integer; cdecl;
  stbi_is_16_bit_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer): Integer; cdecl;
  stbi_is_16_bit_from_file: function(f: PPointer): Integer; cdecl;
  stbi_is_16_bit_from_memory: function(const buffer: Pstbi_uc; len: Integer): Integer; cdecl;
  stbi_is_hdr: function(const filename: PUTF8Char): Integer; cdecl;
  stbi_is_hdr_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer): Integer; cdecl;
  stbi_is_hdr_from_file: function(f: PPointer): Integer; cdecl;
  stbi_is_hdr_from_memory: function(const buffer: Pstbi_uc; len: Integer): Integer; cdecl;
  stbi_ldr_to_hdr_gamma: procedure(gamma: Single); cdecl;
  stbi_ldr_to_hdr_scale: procedure(scale: Single); cdecl;
  stbi_load: function(const filename: PUTF8Char; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_uc; cdecl;
  stbi_load_16: function(const filename: PUTF8Char; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_us; cdecl;
  stbi_load_16_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_us; cdecl;
  stbi_load_16_from_memory: function(const buffer: Pstbi_uc; len: Integer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_us; cdecl;
  stbi_load_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_uc; cdecl;
  stbi_load_from_file: function(f: PPointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_uc; cdecl;
  stbi_load_from_file_16: function(f: PPointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_us; cdecl;
  stbi_load_from_memory: function(const buffer: Pstbi_uc; len: Integer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): Pstbi_uc; cdecl;
  stbi_load_gif_from_memory: function(const buffer: Pstbi_uc; len: Integer; delays: PPInteger; x: PInteger; y: PInteger; z: PInteger; comp: PInteger; req_comp: Integer): Pstbi_uc; cdecl;
  stbi_loadf: function(const filename: PUTF8Char; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  stbi_loadf_from_callbacks: function(const clbk: Pstbi_io_callbacks; user: Pointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  stbi_loadf_from_file: function(f: PPointer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  stbi_loadf_from_memory: function(const buffer: Pstbi_uc; len: Integer; x: PInteger; y: PInteger; channels_in_file: PInteger; desired_channels: Integer): PSingle; cdecl;
  stbi_set_flip_vertically_on_load: procedure(flag_true_if_should_flip: Integer); cdecl;
  stbi_set_flip_vertically_on_load_thread: procedure(flag_true_if_should_flip: Integer); cdecl;
  stbi_set_unpremultiply_on_load: procedure(flag_true_if_should_unpremultiply: Integer); cdecl;
  stbi_set_unpremultiply_on_load_thread: procedure(flag_true_if_should_unpremultiply: Integer); cdecl;
  stbi_write_bmp: function(const filename: PUTF8Char; w: Integer; h: Integer; comp: Integer; const data: Pointer): Integer; cdecl;
  stbi_write_bmp_to_func: function(func: Pstbi_write_func; context: Pointer; w: Integer; h: Integer; comp: Integer; const data: Pointer): Integer; cdecl;
  stbi_write_hdr: function(const filename: PUTF8Char; w: Integer; h: Integer; comp: Integer; const data: PSingle): Integer; cdecl;
  stbi_write_hdr_to_func: function(func: Pstbi_write_func; context: Pointer; w: Integer; h: Integer; comp: Integer; const data: PSingle): Integer; cdecl;
  stbi_write_jpg: function(const filename: PUTF8Char; x: Integer; y: Integer; comp: Integer; const data: Pointer; quality: Integer): Integer; cdecl;
  stbi_write_jpg_to_func: function(func: Pstbi_write_func; context: Pointer; x: Integer; y: Integer; comp: Integer; const data: Pointer; quality: Integer): Integer; cdecl;
  stbi_write_png: function(const filename: PUTF8Char; w: Integer; h: Integer; comp: Integer; const data: Pointer; stride_in_bytes: Integer): Integer; cdecl;
  stbi_write_png_to_func: function(func: Pstbi_write_func; context: Pointer; w: Integer; h: Integer; comp: Integer; const data: Pointer; stride_in_bytes: Integer): Integer; cdecl;
  stbi_write_tga: function(const filename: PUTF8Char; w: Integer; h: Integer; comp: Integer; const data: Pointer): Integer; cdecl;
  stbi_write_tga_to_func: function(func: Pstbi_write_func; context: Pointer; w: Integer; h: Integer; comp: Integer; const data: Pointer): Integer; cdecl;
  stbi_zlib_decode_buffer: function(obuffer: PUTF8Char; olen: Integer; const ibuffer: PUTF8Char; ilen: Integer): Integer; cdecl;
  stbi_zlib_decode_malloc: function(const buffer: PUTF8Char; len: Integer; outlen: PInteger): PUTF8Char; cdecl;
  stbi_zlib_decode_malloc_guesssize: function(const buffer: PUTF8Char; len: Integer; initial_size: Integer; outlen: PInteger): PUTF8Char; cdecl;
  stbi_zlib_decode_malloc_guesssize_headerflag: function(const buffer: PUTF8Char; len: Integer; initial_size: Integer; outlen: PInteger; parse_header: Integer): PUTF8Char; cdecl;
  stbi_zlib_decode_noheader_buffer: function(obuffer: PUTF8Char; olen: Integer; const ibuffer: PUTF8Char; ilen: Integer): Integer; cdecl;
  stbi_zlib_decode_noheader_malloc: function(const buffer: PUTF8Char; len: Integer; outlen: PInteger): PUTF8Char; cdecl;
  stbtt_BakeFontBitmap: function(const data: PByte; offset: Integer; pixel_height: Single; pixels: PByte; pw: Integer; ph: Integer; first_char: Integer; num_chars: Integer; chardata: Pstbtt_bakedchar): Integer; cdecl;
  stbtt_CompareUTF8toUTF16_bigendian: function(const s1: PUTF8Char; len1: Integer; const s2: PUTF8Char; len2: Integer): Integer; cdecl;
  stbtt_FindGlyphIndex: function(const info: Pstbtt_fontinfo; unicode_codepoint: Integer): Integer; cdecl;
  stbtt_FindMatchingFont: function(const fontdata: PByte; const name: PUTF8Char; flags: Integer): Integer; cdecl;
  stbtt_FindSVGDoc: function(const info: Pstbtt_fontinfo; gl: Integer): PByte; cdecl;
  stbtt_FreeBitmap: procedure(bitmap: PByte; userdata: Pointer); cdecl;
  stbtt_FreeSDF: procedure(bitmap: PByte; userdata: Pointer); cdecl;
  stbtt_FreeShape: procedure(const info: Pstbtt_fontinfo; vertices: Pstbtt_vertex); cdecl;
  stbtt_GetBakedQuad: procedure(const chardata: Pstbtt_bakedchar; pw: Integer; ph: Integer; char_index: Integer; xpos: PSingle; ypos: PSingle; q: Pstbtt_aligned_quad; opengl_fillrule: Integer); cdecl;
  stbtt_GetCodepointBitmap: function(const info: Pstbtt_fontinfo; scale_x: Single; scale_y: Single; codepoint: Integer; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_GetCodepointBitmapBox: procedure(const font: Pstbtt_fontinfo; codepoint: Integer; scale_x: Single; scale_y: Single; ix0: PInteger; iy0: PInteger; ix1: PInteger; iy1: PInteger); cdecl;
  stbtt_GetCodepointBitmapBoxSubpixel: procedure(const font: Pstbtt_fontinfo; codepoint: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; ix0: PInteger; iy0: PInteger; ix1: PInteger; iy1: PInteger); cdecl;
  stbtt_GetCodepointBitmapSubpixel: function(const info: Pstbtt_fontinfo; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; codepoint: Integer; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_GetCodepointBox: function(const info: Pstbtt_fontinfo; codepoint: Integer; x0: PInteger; y0: PInteger; x1: PInteger; y1: PInteger): Integer; cdecl;
  stbtt_GetCodepointHMetrics: procedure(const info: Pstbtt_fontinfo; codepoint: Integer; advanceWidth: PInteger; leftSideBearing: PInteger); cdecl;
  stbtt_GetCodepointKernAdvance: function(const info: Pstbtt_fontinfo; ch1: Integer; ch2: Integer): Integer; cdecl;
  stbtt_GetCodepointSDF: function(const info: Pstbtt_fontinfo; scale: Single; codepoint: Integer; padding: Integer; onedge_value: Byte; pixel_dist_scale: Single; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_GetCodepointShape: function(const info: Pstbtt_fontinfo; unicode_codepoint: Integer; vertices: PPstbtt_vertex): Integer; cdecl;
  stbtt_GetCodepointSVG: function(const info: Pstbtt_fontinfo; unicode_codepoint: Integer; svg: PPUTF8Char): Integer; cdecl;
  stbtt_GetFontBoundingBox: procedure(const info: Pstbtt_fontinfo; x0: PInteger; y0: PInteger; x1: PInteger; y1: PInteger); cdecl;
  stbtt_GetFontNameString: function(const font: Pstbtt_fontinfo; length: PInteger; platformID: Integer; encodingID: Integer; languageID: Integer; nameID: Integer): PUTF8Char; cdecl;
  stbtt_GetFontOffsetForIndex: function(const data: PByte; index: Integer): Integer; cdecl;
  stbtt_GetFontVMetrics: procedure(const info: Pstbtt_fontinfo; ascent: PInteger; descent: PInteger; lineGap: PInteger); cdecl;
  stbtt_GetFontVMetricsOS2: function(const info: Pstbtt_fontinfo; typoAscent: PInteger; typoDescent: PInteger; typoLineGap: PInteger): Integer; cdecl;
  stbtt_GetGlyphBitmap: function(const info: Pstbtt_fontinfo; scale_x: Single; scale_y: Single; glyph: Integer; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_GetGlyphBitmapBox: procedure(const font: Pstbtt_fontinfo; glyph: Integer; scale_x: Single; scale_y: Single; ix0: PInteger; iy0: PInteger; ix1: PInteger; iy1: PInteger); cdecl;
  stbtt_GetGlyphBitmapBoxSubpixel: procedure(const font: Pstbtt_fontinfo; glyph: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; ix0: PInteger; iy0: PInteger; ix1: PInteger; iy1: PInteger); cdecl;
  stbtt_GetGlyphBitmapSubpixel: function(const info: Pstbtt_fontinfo; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; glyph: Integer; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_GetGlyphBox: function(const info: Pstbtt_fontinfo; glyph_index: Integer; x0: PInteger; y0: PInteger; x1: PInteger; y1: PInteger): Integer; cdecl;
  stbtt_GetGlyphHMetrics: procedure(const info: Pstbtt_fontinfo; glyph_index: Integer; advanceWidth: PInteger; leftSideBearing: PInteger); cdecl;
  stbtt_GetGlyphKernAdvance: function(const info: Pstbtt_fontinfo; glyph1: Integer; glyph2: Integer): Integer; cdecl;
  stbtt_GetGlyphSDF: function(const info: Pstbtt_fontinfo; scale: Single; glyph: Integer; padding: Integer; onedge_value: Byte; pixel_dist_scale: Single; width: PInteger; height: PInteger; xoff: PInteger; yoff: PInteger): PByte; cdecl;
  stbtt_GetGlyphShape: function(const info: Pstbtt_fontinfo; glyph_index: Integer; vertices: PPstbtt_vertex): Integer; cdecl;
  stbtt_GetGlyphSVG: function(const info: Pstbtt_fontinfo; gl: Integer; svg: PPUTF8Char): Integer; cdecl;
  stbtt_GetKerningTable: function(const info: Pstbtt_fontinfo; table: Pstbtt_kerningentry; table_length: Integer): Integer; cdecl;
  stbtt_GetKerningTableLength: function(const info: Pstbtt_fontinfo): Integer; cdecl;
  stbtt_GetNumberOfFonts: function(const data: PByte): Integer; cdecl;
  stbtt_GetPackedQuad: procedure(const chardata: Pstbtt_packedchar; pw: Integer; ph: Integer; char_index: Integer; xpos: PSingle; ypos: PSingle; q: Pstbtt_aligned_quad; align_to_integer: Integer); cdecl;
  stbtt_GetScaledFontVMetrics: procedure(const fontdata: PByte; index: Integer; size: Single; ascent: PSingle; descent: PSingle; lineGap: PSingle); cdecl;
  stbtt_InitFont: function(info: Pstbtt_fontinfo; const data: PByte; offset: Integer): Integer; cdecl;
  stbtt_IsGlyphEmpty: function(const info: Pstbtt_fontinfo; glyph_index: Integer): Integer; cdecl;
  stbtt_MakeCodepointBitmap: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; codepoint: Integer); cdecl;
  stbtt_MakeCodepointBitmapSubpixel: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; codepoint: Integer); cdecl;
  stbtt_MakeCodepointBitmapSubpixelPrefilter: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; oversample_x: Integer; oversample_y: Integer; sub_x: PSingle; sub_y: PSingle; codepoint: Integer); cdecl;
  stbtt_MakeGlyphBitmap: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; glyph: Integer); cdecl;
  stbtt_MakeGlyphBitmapSubpixel: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; glyph: Integer); cdecl;
  stbtt_MakeGlyphBitmapSubpixelPrefilter: procedure(const info: Pstbtt_fontinfo; output: PByte; out_w: Integer; out_h: Integer; out_stride: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; oversample_x: Integer; oversample_y: Integer; sub_x: PSingle; sub_y: PSingle; glyph: Integer); cdecl;
  stbtt_PackBegin: function(spc: Pstbtt_pack_context; pixels: PByte; width: Integer; height: Integer; stride_in_bytes: Integer; padding: Integer; alloc_context: Pointer): Integer; cdecl;
  stbtt_PackEnd: procedure(spc: Pstbtt_pack_context); cdecl;
  stbtt_PackFontRange: function(spc: Pstbtt_pack_context; const fontdata: PByte; font_index: Integer; font_size: Single; first_unicode_char_in_range: Integer; num_chars_in_range: Integer; chardata_for_range: Pstbtt_packedchar): Integer; cdecl;
  stbtt_PackFontRanges: function(spc: Pstbtt_pack_context; const fontdata: PByte; font_index: Integer; ranges: Pstbtt_pack_range; num_ranges: Integer): Integer; cdecl;
  stbtt_PackFontRangesGatherRects: function(spc: Pstbtt_pack_context; const info: Pstbtt_fontinfo; ranges: Pstbtt_pack_range; num_ranges: Integer; rects: Pstbrp_rect): Integer; cdecl;
  stbtt_PackFontRangesPackRects: procedure(spc: Pstbtt_pack_context; rects: Pstbrp_rect; num_rects: Integer); cdecl;
  stbtt_PackFontRangesRenderIntoRects: function(spc: Pstbtt_pack_context; const info: Pstbtt_fontinfo; ranges: Pstbtt_pack_range; num_ranges: Integer; rects: Pstbrp_rect): Integer; cdecl;
  stbtt_PackSetOversampling: procedure(spc: Pstbtt_pack_context; h_oversample: Cardinal; v_oversample: Cardinal); cdecl;
  stbtt_PackSetSkipMissingCodepoints: procedure(spc: Pstbtt_pack_context; skip: Integer); cdecl;
  stbtt_Rasterize: procedure(result: Pstbtt__bitmap; flatness_in_pixels: Single; vertices: Pstbtt_vertex; num_verts: Integer; scale_x: Single; scale_y: Single; shift_x: Single; shift_y: Single; x_off: Integer; y_off: Integer; invert: Integer; userdata: Pointer); cdecl;
  stbtt_ScaleForMappingEmToPixels: function(const info: Pstbtt_fontinfo; pixels: Single): Single; cdecl;
  stbtt_ScaleForPixelHeight: function(const info: Pstbtt_fontinfo; pixels: Single): Single; cdecl;
  stringColor: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; const s: PUTF8Char; color: Uint32): Integer; cdecl;
  stringRGBA: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; const s: PUTF8Char; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  texturedPolygon: function(renderer: PSDL_Renderer; const vx: PSint16; const vy: PSint16; n: Integer; texture: PSDL_Surface; texture_dx: Integer; texture_dy: Integer): Integer; cdecl;
  thickArcRGBA: function(renderer: PSDL_Renderer; xc: Sint16; yc: Sint16; rad: Sint16; start: Sint16; _end: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8; thick: Uint8): Integer; cdecl;
  thickCircleRGBA: function(renderer: PSDL_Renderer; x: Sint16; y: Sint16; rad: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8; thick: Uint8): Integer; cdecl;
  thickEllipseRGBA: function(renderer: PSDL_Renderer; xc: Sint16; yc: Sint16; xr: Sint16; yr: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8; thick: Uint8): Integer; cdecl;
  thickLineColor: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; width: Uint8; color: Uint32): Integer; cdecl;
  thickLineRGBA: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; width: Uint8; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  trigonColor: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; x3: Sint16; y3: Sint16; color: Uint32): Integer; cdecl;
  trigonRGBA: function(renderer: PSDL_Renderer; x1: Sint16; y1: Sint16; x2: Sint16; y2: Sint16; x3: Sint16; y3: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  unzClose: function(_file: unzFile): Integer; cdecl;
  unzCloseCurrentFile: function(_file: unzFile): Integer; cdecl;
  unzeof: function(_file: unzFile): Integer; cdecl;
  unzGetCurrentFileInfo: function(_file: unzFile; pfile_info: Punz_file_info; szFileName: PUTF8Char; fileNameBufferSize: uLong; extraField: Pointer; extraFieldBufferSize: uLong; szComment: PUTF8Char; commentBufferSize: uLong): Integer; cdecl;
  unzGetCurrentFileInfo64: function(_file: unzFile; pfile_info: Punz_file_info64; szFileName: PUTF8Char; fileNameBufferSize: uLong; extraField: Pointer; extraFieldBufferSize: uLong; szComment: PUTF8Char; commentBufferSize: uLong): Integer; cdecl;
  unzGetCurrentFileZStreamPos64: function(_file: unzFile): ZPOS64_T; cdecl;
  unzGetFilePos: function(_file: unzFile; file_pos: Punz_file_pos): Integer; cdecl;
  unzGetFilePos64: function(_file: unzFile; file_pos: Punz64_file_pos): Integer; cdecl;
  unzGetGlobalComment: function(_file: unzFile; szComment: PUTF8Char; uSizeBuf: uLong): Integer; cdecl;
  unzGetGlobalInfo: function(_file: unzFile; pglobal_info: Punz_global_info): Integer; cdecl;
  unzGetGlobalInfo64: function(_file: unzFile; pglobal_info: Punz_global_info64): Integer; cdecl;
  unzGetLocalExtrafield: function(_file: unzFile; buf: voidp; len: Cardinal): Integer; cdecl;
  unzGetOffset: function(_file: unzFile): uLong; cdecl;
  unzGetOffset64: function(_file: unzFile): ZPOS64_T; cdecl;
  unzGoToFilePos: function(_file: unzFile; file_pos: Punz_file_pos): Integer; cdecl;
  unzGoToFilePos64: function(_file: unzFile; const file_pos: Punz64_file_pos): Integer; cdecl;
  unzGoToFirstFile: function(_file: unzFile): Integer; cdecl;
  unzGoToNextFile: function(_file: unzFile): Integer; cdecl;
  unzLocateFile: function(_file: unzFile; const szFileName: PUTF8Char; iCaseSensitivity: Integer): Integer; cdecl;
  unzOpen: function(const path: PUTF8Char): unzFile; cdecl;
  unzOpen2: function(const path: PUTF8Char; pzlib_filefunc_def: Pzlib_filefunc_def): unzFile; cdecl;
  unzOpen2_64: function(const path: Pointer; pzlib_filefunc_def: Pzlib_filefunc64_def): unzFile; cdecl;
  unzOpen64: function(const path: Pointer): unzFile; cdecl;
  unzOpenCurrentFile: function(_file: unzFile): Integer; cdecl;
  unzOpenCurrentFile2: function(_file: unzFile; method: PInteger; level: PInteger; raw: Integer): Integer; cdecl;
  unzOpenCurrentFile3: function(_file: unzFile; method: PInteger; level: PInteger; raw: Integer; const password: PUTF8Char): Integer; cdecl;
  unzOpenCurrentFilePassword: function(_file: unzFile; const password: PUTF8Char): Integer; cdecl;
  unzReadCurrentFile: function(_file: unzFile; buf: voidp; len: Cardinal): Integer; cdecl;
  unzSetOffset: function(_file: unzFile; pos: uLong): Integer; cdecl;
  unzSetOffset64: function(_file: unzFile; pos: ZPOS64_T): Integer; cdecl;
  unzStringFileNameCompare: function(const fileName1: PUTF8Char; const fileName2: PUTF8Char; iCaseSensitivity: Integer): Integer; cdecl;
  unztell: function(_file: unzFile): Integer; cdecl;
  unztell64: function(_file: unzFile): ZPOS64_T; cdecl;
  vlineColor: function(renderer: PSDL_Renderer; x: Sint16; y1: Sint16; y2: Sint16; color: Uint32): Integer; cdecl;
  vlineRGBA: function(renderer: PSDL_Renderer; x: Sint16; y1: Sint16; y2: Sint16; r: Uint8; g: Uint8; b: Uint8; a: Uint8): Integer; cdecl;
  zipClose: function(_file: zipFile; const global_comment: PUTF8Char): Integer; cdecl;
  zipCloseFileInZip: function(_file: zipFile): Integer; cdecl;
  zipCloseFileInZipRaw: function(_file: zipFile; uncompressed_size: uLong; crc32: uLong): Integer; cdecl;
  zipCloseFileInZipRaw64: function(_file: zipFile; uncompressed_size: ZPOS64_T; crc32: uLong): Integer; cdecl;
  zipOpen: function(const pathname: PUTF8Char; append: Integer): zipFile; cdecl;
  zipOpen2: function(const pathname: PUTF8Char; append: Integer; globalcomment: Pzipcharpc; pzlib_filefunc_def: Pzlib_filefunc_def): zipFile; cdecl;
  zipOpen2_64: function(const pathname: Pointer; append: Integer; globalcomment: Pzipcharpc; pzlib_filefunc_def: Pzlib_filefunc64_def): zipFile; cdecl;
  zipOpen64: function(const pathname: Pointer; append: Integer): zipFile; cdecl;
  zipOpenNewFileInZip: function(_file: zipFile; const filename: PUTF8Char; const zipfi: Pzip_fileinfo; const extrafield_local: Pointer; size_extrafield_local: uInt; const extrafield_global: Pointer; size_extrafield_global: uInt; const comment: PUTF8Char; method: Integer; level: Integer): Integer; cdecl;
  zipOpenNewFileInZip2: function(_file: zipFile; const filename: PUTF8Char; const zipfi: Pzip_fileinfo; const extrafield_local: Pointer; size_extrafield_local: uInt; const extrafield_global: Pointer; size_extrafield_global: uInt; const comment: PUTF8Char; method: Integer; level: Integer; raw: Integer): Integer; cdecl;
  zipOpenNewFileInZip2_64: function(_file: zipFile; const filename: PUTF8Char; const zipfi: Pzip_fileinfo; const extrafield_local: Pointer; size_extrafield_local: uInt; const extrafield_global: Pointer; size_extrafield_global: uInt; const comment: PUTF8Char; method: Integer; level: Integer; raw: Integer; zip64: Integer): Integer; cdecl;
  zipOpenNewFileInZip3: function(_file: zipFile; const filename: PUTF8Char; const zipfi: Pzip_fileinfo; const extrafield_local: Pointer; size_extrafield_local: uInt; const extrafield_global: Pointer; size_extrafield_global: uInt; const comment: PUTF8Char; method: Integer; level: Integer; raw: Integer; windowBits: Integer; memLevel: Integer; strategy: Integer; const password: PUTF8Char; crcForCrypting: uLong): Integer; cdecl;
  zipOpenNewFileInZip3_64: function(_file: zipFile; const filename: PUTF8Char; const zipfi: Pzip_fileinfo; const extrafield_local: Pointer; size_extrafield_local: uInt; const extrafield_global: Pointer; size_extrafield_global: uInt; const comment: PUTF8Char; method: Integer; level: Integer; raw: Integer; windowBits: Integer; memLevel: Integer; strategy: Integer; const password: PUTF8Char; crcForCrypting: uLong; zip64: Integer): Integer; cdecl;
  zipOpenNewFileInZip4: function(_file: zipFile; const filename: PUTF8Char; const zipfi: Pzip_fileinfo; const extrafield_local: Pointer; size_extrafield_local: uInt; const extrafield_global: Pointer; size_extrafield_global: uInt; const comment: PUTF8Char; method: Integer; level: Integer; raw: Integer; windowBits: Integer; memLevel: Integer; strategy: Integer; const password: PUTF8Char; crcForCrypting: uLong; versionMadeBy: uLong; flagBase: uLong): Integer; cdecl;
  zipOpenNewFileInZip4_64: function(_file: zipFile; const filename: PUTF8Char; const zipfi: Pzip_fileinfo; const extrafield_local: Pointer; size_extrafield_local: uInt; const extrafield_global: Pointer; size_extrafield_global: uInt; const comment: PUTF8Char; method: Integer; level: Integer; raw: Integer; windowBits: Integer; memLevel: Integer; strategy: Integer; const password: PUTF8Char; crcForCrypting: uLong; versionMadeBy: uLong; flagBase: uLong; zip64: Integer): Integer; cdecl;
  zipOpenNewFileInZip64: function(_file: zipFile; const filename: PUTF8Char; const zipfi: Pzip_fileinfo; const extrafield_local: Pointer; size_extrafield_local: uInt; const extrafield_global: Pointer; size_extrafield_global: uInt; const comment: PUTF8Char; method: Integer; level: Integer; zip64: Integer): Integer; cdecl;
  zipRemoveExtraInfoBlock: function(pData: PUTF8Char; dataLen: PInteger; sHeader: Smallint): Integer; cdecl;
  zipWriteInFileInZip: function(_file: zipFile; const buf: Pointer; len: Cardinal): Integer; cdecl;
  zoomSurface: function(src: PSDL_Surface; zoomx: Double; zoomy: Double; smooth: Integer): PSDL_Surface; cdecl;
  zoomSurfaceSize: procedure(width: Integer; height: Integer; zoomx: Double; zoomy: Double; dstwidth: PInteger; dstheight: PInteger); cdecl;

implementation

{$R SDL.res}

uses
  System.SysUtils,
  System.IOUtils,
  System.Classes,
  WinAPI.Windows;

var
  LDllHandle: THandle;
  LDllName: string;

procedure LoadDLL;
var
  LStream: TResourceStream;
begin
  LStream := TResourceStream.Create(HInstance, 'RESDATA', RT_RCDATA);
  LDllName := TPath.GetTempFileName;
  LStream.SaveToFile(LDllName);
  FreeAndNil(LStream);

  LDllHandle := SafeLoadLibrary(LDllName);

  aaArcRGBA := GetProcAddress(LDllHandle, 'aaArcRGBA');
  aaBezierRGBA := GetProcAddress(LDllHandle, 'aaBezierRGBA');
  aacircleColor := GetProcAddress(LDllHandle, 'aacircleColor');
  aacircleRGBA := GetProcAddress(LDllHandle, 'aacircleRGBA');
  aaellipseColor := GetProcAddress(LDllHandle, 'aaellipseColor');
  aaellipseRGBA := GetProcAddress(LDllHandle, 'aaellipseRGBA');
  aaFilledEllipseRGBA := GetProcAddress(LDllHandle, 'aaFilledEllipseRGBA');
  aaFilledPieRGBA := GetProcAddress(LDllHandle, 'aaFilledPieRGBA');
  aaFilledPolyBezierRGBA := GetProcAddress(LDllHandle, 'aaFilledPolyBezierRGBA');
  aaFilledPolygonRGBA := GetProcAddress(LDllHandle, 'aaFilledPolygonRGBA');
  aalineColor := GetProcAddress(LDllHandle, 'aalineColor');
  aalineRGBA := GetProcAddress(LDllHandle, 'aalineRGBA');
  aapolygonColor := GetProcAddress(LDllHandle, 'aapolygonColor');
  aapolygonRGBA := GetProcAddress(LDllHandle, 'aapolygonRGBA');
  aatrigonColor := GetProcAddress(LDllHandle, 'aatrigonColor');
  aatrigonRGBA := GetProcAddress(LDllHandle, 'aatrigonRGBA');
  arcColor := GetProcAddress(LDllHandle, 'arcColor');
  arcRGBA := GetProcAddress(LDllHandle, 'arcRGBA');
  bezierColor := GetProcAddress(LDllHandle, 'bezierColor');
  bezierRGBA := GetProcAddress(LDllHandle, 'bezierRGBA');
  boxColor := GetProcAddress(LDllHandle, 'boxColor');
  boxRGBA := GetProcAddress(LDllHandle, 'boxRGBA');
  characterColor := GetProcAddress(LDllHandle, 'characterColor');
  characterRGBA := GetProcAddress(LDllHandle, 'characterRGBA');
  circleColor := GetProcAddress(LDllHandle, 'circleColor');
  circleRGBA := GetProcAddress(LDllHandle, 'circleRGBA');
  ellipseColor := GetProcAddress(LDllHandle, 'ellipseColor');
  ellipseRGBA := GetProcAddress(LDllHandle, 'ellipseRGBA');
  enet_address_get_host := GetProcAddress(LDllHandle, 'enet_address_get_host');
  enet_address_get_host_ip := GetProcAddress(LDllHandle, 'enet_address_get_host_ip');
  enet_address_set_host := GetProcAddress(LDllHandle, 'enet_address_set_host');
  enet_address_set_host_ip := GetProcAddress(LDllHandle, 'enet_address_set_host_ip');
  enet_crc32 := GetProcAddress(LDllHandle, 'enet_crc32');
  enet_deinitialize := GetProcAddress(LDllHandle, 'enet_deinitialize');
  enet_free := GetProcAddress(LDllHandle, 'enet_free');
  enet_host_bandwidth_limit := GetProcAddress(LDllHandle, 'enet_host_bandwidth_limit');
  enet_host_bandwidth_throttle := GetProcAddress(LDllHandle, 'enet_host_bandwidth_throttle');
  enet_host_broadcast := GetProcAddress(LDllHandle, 'enet_host_broadcast');
  enet_host_channel_limit := GetProcAddress(LDllHandle, 'enet_host_channel_limit');
  enet_host_check_events := GetProcAddress(LDllHandle, 'enet_host_check_events');
  enet_host_compress := GetProcAddress(LDllHandle, 'enet_host_compress');
  enet_host_compress_with_range_coder := GetProcAddress(LDllHandle, 'enet_host_compress_with_range_coder');
  enet_host_connect := GetProcAddress(LDllHandle, 'enet_host_connect');
  enet_host_create := GetProcAddress(LDllHandle, 'enet_host_create');
  enet_host_destroy := GetProcAddress(LDllHandle, 'enet_host_destroy');
  enet_host_flush := GetProcAddress(LDllHandle, 'enet_host_flush');
  enet_host_random := GetProcAddress(LDllHandle, 'enet_host_random');
  enet_host_random_seed := GetProcAddress(LDllHandle, 'enet_host_random_seed');
  enet_host_service := GetProcAddress(LDllHandle, 'enet_host_service');
  enet_initialize := GetProcAddress(LDllHandle, 'enet_initialize');
  enet_initialize_with_callbacks := GetProcAddress(LDllHandle, 'enet_initialize_with_callbacks');
  enet_linked_version := GetProcAddress(LDllHandle, 'enet_linked_version');
  enet_list_clear := GetProcAddress(LDllHandle, 'enet_list_clear');
  enet_list_insert := GetProcAddress(LDllHandle, 'enet_list_insert');
  enet_list_move := GetProcAddress(LDllHandle, 'enet_list_move');
  enet_list_remove := GetProcAddress(LDllHandle, 'enet_list_remove');
  enet_list_size := GetProcAddress(LDllHandle, 'enet_list_size');
  enet_malloc := GetProcAddress(LDllHandle, 'enet_malloc');
  enet_packet_create := GetProcAddress(LDllHandle, 'enet_packet_create');
  enet_packet_destroy := GetProcAddress(LDllHandle, 'enet_packet_destroy');
  enet_packet_resize := GetProcAddress(LDllHandle, 'enet_packet_resize');
  enet_peer_disconnect := GetProcAddress(LDllHandle, 'enet_peer_disconnect');
  enet_peer_disconnect_later := GetProcAddress(LDllHandle, 'enet_peer_disconnect_later');
  enet_peer_disconnect_now := GetProcAddress(LDllHandle, 'enet_peer_disconnect_now');
  enet_peer_dispatch_incoming_reliable_commands := GetProcAddress(LDllHandle, 'enet_peer_dispatch_incoming_reliable_commands');
  enet_peer_dispatch_incoming_unreliable_commands := GetProcAddress(LDllHandle, 'enet_peer_dispatch_incoming_unreliable_commands');
  enet_peer_on_connect := GetProcAddress(LDllHandle, 'enet_peer_on_connect');
  enet_peer_on_disconnect := GetProcAddress(LDllHandle, 'enet_peer_on_disconnect');
  enet_peer_ping := GetProcAddress(LDllHandle, 'enet_peer_ping');
  enet_peer_ping_interval := GetProcAddress(LDllHandle, 'enet_peer_ping_interval');
  enet_peer_queue_acknowledgement := GetProcAddress(LDllHandle, 'enet_peer_queue_acknowledgement');
  enet_peer_queue_incoming_command := GetProcAddress(LDllHandle, 'enet_peer_queue_incoming_command');
  enet_peer_queue_outgoing_command := GetProcAddress(LDllHandle, 'enet_peer_queue_outgoing_command');
  enet_peer_receive := GetProcAddress(LDllHandle, 'enet_peer_receive');
  enet_peer_reset := GetProcAddress(LDllHandle, 'enet_peer_reset');
  enet_peer_reset_queues := GetProcAddress(LDllHandle, 'enet_peer_reset_queues');
  enet_peer_send := GetProcAddress(LDllHandle, 'enet_peer_send');
  enet_peer_setup_outgoing_command := GetProcAddress(LDllHandle, 'enet_peer_setup_outgoing_command');
  enet_peer_throttle := GetProcAddress(LDllHandle, 'enet_peer_throttle');
  enet_peer_throttle_configure := GetProcAddress(LDllHandle, 'enet_peer_throttle_configure');
  enet_peer_timeout := GetProcAddress(LDllHandle, 'enet_peer_timeout');
  enet_protocol_command_size := GetProcAddress(LDllHandle, 'enet_protocol_command_size');
  enet_range_coder_compress := GetProcAddress(LDllHandle, 'enet_range_coder_compress');
  enet_range_coder_create := GetProcAddress(LDllHandle, 'enet_range_coder_create');
  enet_range_coder_decompress := GetProcAddress(LDllHandle, 'enet_range_coder_decompress');
  enet_range_coder_destroy := GetProcAddress(LDllHandle, 'enet_range_coder_destroy');
  enet_socket_accept := GetProcAddress(LDllHandle, 'enet_socket_accept');
  enet_socket_bind := GetProcAddress(LDllHandle, 'enet_socket_bind');
  enet_socket_connect := GetProcAddress(LDllHandle, 'enet_socket_connect');
  enet_socket_create := GetProcAddress(LDllHandle, 'enet_socket_create');
  enet_socket_destroy := GetProcAddress(LDllHandle, 'enet_socket_destroy');
  enet_socket_get_address := GetProcAddress(LDllHandle, 'enet_socket_get_address');
  enet_socket_get_option := GetProcAddress(LDllHandle, 'enet_socket_get_option');
  enet_socket_listen := GetProcAddress(LDllHandle, 'enet_socket_listen');
  enet_socket_receive := GetProcAddress(LDllHandle, 'enet_socket_receive');
  enet_socket_send := GetProcAddress(LDllHandle, 'enet_socket_send');
  enet_socket_set_option := GetProcAddress(LDllHandle, 'enet_socket_set_option');
  enet_socket_shutdown := GetProcAddress(LDllHandle, 'enet_socket_shutdown');
  enet_socket_wait := GetProcAddress(LDllHandle, 'enet_socket_wait');
  enet_socketset_select := GetProcAddress(LDllHandle, 'enet_socketset_select');
  enet_time_get := GetProcAddress(LDllHandle, 'enet_time_get');
  enet_time_set := GetProcAddress(LDllHandle, 'enet_time_set');
  filledCircleColor := GetProcAddress(LDllHandle, 'filledCircleColor');
  filledCircleRGBA := GetProcAddress(LDllHandle, 'filledCircleRGBA');
  filledEllipseColor := GetProcAddress(LDllHandle, 'filledEllipseColor');
  filledEllipseRGBA := GetProcAddress(LDllHandle, 'filledEllipseRGBA');
  filledPieColor := GetProcAddress(LDllHandle, 'filledPieColor');
  filledPieRGBA := GetProcAddress(LDllHandle, 'filledPieRGBA');
  filledPolygonColor := GetProcAddress(LDllHandle, 'filledPolygonColor');
  filledPolygonRGBA := GetProcAddress(LDllHandle, 'filledPolygonRGBA');
  filledTrigonColor := GetProcAddress(LDllHandle, 'filledTrigonColor');
  filledTrigonRGBA := GetProcAddress(LDllHandle, 'filledTrigonRGBA');
  gfxPrimitivesSetFont := GetProcAddress(LDllHandle, 'gfxPrimitivesSetFont');
  gfxPrimitivesSetFontRotation := GetProcAddress(LDllHandle, 'gfxPrimitivesSetFontRotation');
  hlineColor := GetProcAddress(LDllHandle, 'hlineColor');
  hlineRGBA := GetProcAddress(LDllHandle, 'hlineRGBA');
  lineColor := GetProcAddress(LDllHandle, 'lineColor');
  lineRGBA := GetProcAddress(LDllHandle, 'lineRGBA');
  ma_aligned_free := GetProcAddress(LDllHandle, 'ma_aligned_free');
  ma_aligned_malloc := GetProcAddress(LDllHandle, 'ma_aligned_malloc');
  ma_apply_volume_factor_f32 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_f32');
  ma_apply_volume_factor_pcm_frames := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_pcm_frames');
  ma_apply_volume_factor_pcm_frames_f32 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_pcm_frames_f32');
  ma_apply_volume_factor_pcm_frames_s16 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_pcm_frames_s16');
  ma_apply_volume_factor_pcm_frames_s24 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_pcm_frames_s24');
  ma_apply_volume_factor_pcm_frames_s32 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_pcm_frames_s32');
  ma_apply_volume_factor_pcm_frames_u8 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_pcm_frames_u8');
  ma_apply_volume_factor_s16 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_s16');
  ma_apply_volume_factor_s24 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_s24');
  ma_apply_volume_factor_s32 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_s32');
  ma_apply_volume_factor_u8 := GetProcAddress(LDllHandle, 'ma_apply_volume_factor_u8');
  ma_async_notification_event_init := GetProcAddress(LDllHandle, 'ma_async_notification_event_init');
  ma_async_notification_event_signal := GetProcAddress(LDllHandle, 'ma_async_notification_event_signal');
  ma_async_notification_event_uninit := GetProcAddress(LDllHandle, 'ma_async_notification_event_uninit');
  ma_async_notification_event_wait := GetProcAddress(LDllHandle, 'ma_async_notification_event_wait');
  ma_async_notification_poll_init := GetProcAddress(LDllHandle, 'ma_async_notification_poll_init');
  ma_async_notification_poll_is_signalled := GetProcAddress(LDllHandle, 'ma_async_notification_poll_is_signalled');
  ma_async_notification_signal := GetProcAddress(LDllHandle, 'ma_async_notification_signal');
  ma_audio_buffer_alloc_and_init := GetProcAddress(LDllHandle, 'ma_audio_buffer_alloc_and_init');
  ma_audio_buffer_at_end := GetProcAddress(LDllHandle, 'ma_audio_buffer_at_end');
  ma_audio_buffer_config_init := GetProcAddress(LDllHandle, 'ma_audio_buffer_config_init');
  ma_audio_buffer_get_available_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_get_available_frames');
  ma_audio_buffer_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_get_cursor_in_pcm_frames');
  ma_audio_buffer_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_get_length_in_pcm_frames');
  ma_audio_buffer_init := GetProcAddress(LDllHandle, 'ma_audio_buffer_init');
  ma_audio_buffer_init_copy := GetProcAddress(LDllHandle, 'ma_audio_buffer_init_copy');
  ma_audio_buffer_map := GetProcAddress(LDllHandle, 'ma_audio_buffer_map');
  ma_audio_buffer_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_read_pcm_frames');
  ma_audio_buffer_ref_at_end := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_at_end');
  ma_audio_buffer_ref_get_available_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_get_available_frames');
  ma_audio_buffer_ref_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_get_cursor_in_pcm_frames');
  ma_audio_buffer_ref_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_get_length_in_pcm_frames');
  ma_audio_buffer_ref_init := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_init');
  ma_audio_buffer_ref_map := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_map');
  ma_audio_buffer_ref_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_read_pcm_frames');
  ma_audio_buffer_ref_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_seek_to_pcm_frame');
  ma_audio_buffer_ref_set_data := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_set_data');
  ma_audio_buffer_ref_uninit := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_uninit');
  ma_audio_buffer_ref_unmap := GetProcAddress(LDllHandle, 'ma_audio_buffer_ref_unmap');
  ma_audio_buffer_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_audio_buffer_seek_to_pcm_frame');
  ma_audio_buffer_uninit := GetProcAddress(LDllHandle, 'ma_audio_buffer_uninit');
  ma_audio_buffer_uninit_and_free := GetProcAddress(LDllHandle, 'ma_audio_buffer_uninit_and_free');
  ma_audio_buffer_unmap := GetProcAddress(LDllHandle, 'ma_audio_buffer_unmap');
  ma_biquad_config_init := GetProcAddress(LDllHandle, 'ma_biquad_config_init');
  ma_biquad_get_heap_size := GetProcAddress(LDllHandle, 'ma_biquad_get_heap_size');
  ma_biquad_get_latency := GetProcAddress(LDllHandle, 'ma_biquad_get_latency');
  ma_biquad_init := GetProcAddress(LDllHandle, 'ma_biquad_init');
  ma_biquad_init_preallocated := GetProcAddress(LDllHandle, 'ma_biquad_init_preallocated');
  ma_biquad_node_config_init := GetProcAddress(LDllHandle, 'ma_biquad_node_config_init');
  ma_biquad_node_init := GetProcAddress(LDllHandle, 'ma_biquad_node_init');
  ma_biquad_node_reinit := GetProcAddress(LDllHandle, 'ma_biquad_node_reinit');
  ma_biquad_node_uninit := GetProcAddress(LDllHandle, 'ma_biquad_node_uninit');
  ma_biquad_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_biquad_process_pcm_frames');
  ma_biquad_reinit := GetProcAddress(LDllHandle, 'ma_biquad_reinit');
  ma_biquad_uninit := GetProcAddress(LDllHandle, 'ma_biquad_uninit');
  ma_blend_f32 := GetProcAddress(LDllHandle, 'ma_blend_f32');
  ma_bpf_config_init := GetProcAddress(LDllHandle, 'ma_bpf_config_init');
  ma_bpf_get_heap_size := GetProcAddress(LDllHandle, 'ma_bpf_get_heap_size');
  ma_bpf_get_latency := GetProcAddress(LDllHandle, 'ma_bpf_get_latency');
  ma_bpf_init := GetProcAddress(LDllHandle, 'ma_bpf_init');
  ma_bpf_init_preallocated := GetProcAddress(LDllHandle, 'ma_bpf_init_preallocated');
  ma_bpf_node_config_init := GetProcAddress(LDllHandle, 'ma_bpf_node_config_init');
  ma_bpf_node_init := GetProcAddress(LDllHandle, 'ma_bpf_node_init');
  ma_bpf_node_reinit := GetProcAddress(LDllHandle, 'ma_bpf_node_reinit');
  ma_bpf_node_uninit := GetProcAddress(LDllHandle, 'ma_bpf_node_uninit');
  ma_bpf_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_bpf_process_pcm_frames');
  ma_bpf_reinit := GetProcAddress(LDllHandle, 'ma_bpf_reinit');
  ma_bpf_uninit := GetProcAddress(LDllHandle, 'ma_bpf_uninit');
  ma_bpf2_config_init := GetProcAddress(LDllHandle, 'ma_bpf2_config_init');
  ma_bpf2_get_heap_size := GetProcAddress(LDllHandle, 'ma_bpf2_get_heap_size');
  ma_bpf2_get_latency := GetProcAddress(LDllHandle, 'ma_bpf2_get_latency');
  ma_bpf2_init := GetProcAddress(LDllHandle, 'ma_bpf2_init');
  ma_bpf2_init_preallocated := GetProcAddress(LDllHandle, 'ma_bpf2_init_preallocated');
  ma_bpf2_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_bpf2_process_pcm_frames');
  ma_bpf2_reinit := GetProcAddress(LDllHandle, 'ma_bpf2_reinit');
  ma_bpf2_uninit := GetProcAddress(LDllHandle, 'ma_bpf2_uninit');
  ma_calculate_buffer_size_in_frames_from_descriptor := GetProcAddress(LDllHandle, 'ma_calculate_buffer_size_in_frames_from_descriptor');
  ma_calculate_buffer_size_in_frames_from_milliseconds := GetProcAddress(LDllHandle, 'ma_calculate_buffer_size_in_frames_from_milliseconds');
  ma_calculate_buffer_size_in_milliseconds_from_frames := GetProcAddress(LDllHandle, 'ma_calculate_buffer_size_in_milliseconds_from_frames');
  ma_calloc := GetProcAddress(LDllHandle, 'ma_calloc');
  ma_channel_converter_config_init := GetProcAddress(LDllHandle, 'ma_channel_converter_config_init');
  ma_channel_converter_get_heap_size := GetProcAddress(LDllHandle, 'ma_channel_converter_get_heap_size');
  ma_channel_converter_get_input_channel_map := GetProcAddress(LDllHandle, 'ma_channel_converter_get_input_channel_map');
  ma_channel_converter_get_output_channel_map := GetProcAddress(LDllHandle, 'ma_channel_converter_get_output_channel_map');
  ma_channel_converter_init := GetProcAddress(LDllHandle, 'ma_channel_converter_init');
  ma_channel_converter_init_preallocated := GetProcAddress(LDllHandle, 'ma_channel_converter_init_preallocated');
  ma_channel_converter_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_channel_converter_process_pcm_frames');
  ma_channel_converter_uninit := GetProcAddress(LDllHandle, 'ma_channel_converter_uninit');
  ma_channel_map_contains_channel_position := GetProcAddress(LDllHandle, 'ma_channel_map_contains_channel_position');
  ma_channel_map_copy := GetProcAddress(LDllHandle, 'ma_channel_map_copy');
  ma_channel_map_copy_or_default := GetProcAddress(LDllHandle, 'ma_channel_map_copy_or_default');
  ma_channel_map_get_channel := GetProcAddress(LDllHandle, 'ma_channel_map_get_channel');
  ma_channel_map_init_blank := GetProcAddress(LDllHandle, 'ma_channel_map_init_blank');
  ma_channel_map_init_standard := GetProcAddress(LDllHandle, 'ma_channel_map_init_standard');
  ma_channel_map_is_blank := GetProcAddress(LDllHandle, 'ma_channel_map_is_blank');
  ma_channel_map_is_equal := GetProcAddress(LDllHandle, 'ma_channel_map_is_equal');
  ma_channel_map_is_valid := GetProcAddress(LDllHandle, 'ma_channel_map_is_valid');
  ma_clip_pcm_frames := GetProcAddress(LDllHandle, 'ma_clip_pcm_frames');
  ma_clip_samples_f32 := GetProcAddress(LDllHandle, 'ma_clip_samples_f32');
  ma_clip_samples_s16 := GetProcAddress(LDllHandle, 'ma_clip_samples_s16');
  ma_clip_samples_s24 := GetProcAddress(LDllHandle, 'ma_clip_samples_s24');
  ma_clip_samples_s32 := GetProcAddress(LDllHandle, 'ma_clip_samples_s32');
  ma_clip_samples_u8 := GetProcAddress(LDllHandle, 'ma_clip_samples_u8');
  ma_context_config_init := GetProcAddress(LDllHandle, 'ma_context_config_init');
  ma_context_enumerate_devices := GetProcAddress(LDllHandle, 'ma_context_enumerate_devices');
  ma_context_get_device_info := GetProcAddress(LDllHandle, 'ma_context_get_device_info');
  ma_context_get_devices := GetProcAddress(LDllHandle, 'ma_context_get_devices');
  ma_context_get_log := GetProcAddress(LDllHandle, 'ma_context_get_log');
  ma_context_init := GetProcAddress(LDllHandle, 'ma_context_init');
  ma_context_is_loopback_supported := GetProcAddress(LDllHandle, 'ma_context_is_loopback_supported');
  ma_context_sizeof := GetProcAddress(LDllHandle, 'ma_context_sizeof');
  ma_context_uninit := GetProcAddress(LDllHandle, 'ma_context_uninit');
  ma_convert_frames := GetProcAddress(LDllHandle, 'ma_convert_frames');
  ma_convert_frames_ex := GetProcAddress(LDllHandle, 'ma_convert_frames_ex');
  ma_convert_pcm_frames_format := GetProcAddress(LDllHandle, 'ma_convert_pcm_frames_format');
  ma_copy_and_apply_volume_and_clip_pcm_frames := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_and_clip_pcm_frames');
  ma_copy_and_apply_volume_and_clip_samples_f32 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_and_clip_samples_f32');
  ma_copy_and_apply_volume_and_clip_samples_s16 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_and_clip_samples_s16');
  ma_copy_and_apply_volume_and_clip_samples_s24 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_and_clip_samples_s24');
  ma_copy_and_apply_volume_and_clip_samples_s32 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_and_clip_samples_s32');
  ma_copy_and_apply_volume_and_clip_samples_u8 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_and_clip_samples_u8');
  ma_copy_and_apply_volume_factor_f32 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_f32');
  ma_copy_and_apply_volume_factor_pcm_frames := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_pcm_frames');
  ma_copy_and_apply_volume_factor_pcm_frames_f32 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_pcm_frames_f32');
  ma_copy_and_apply_volume_factor_pcm_frames_s16 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_pcm_frames_s16');
  ma_copy_and_apply_volume_factor_pcm_frames_s24 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_pcm_frames_s24');
  ma_copy_and_apply_volume_factor_pcm_frames_s32 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_pcm_frames_s32');
  ma_copy_and_apply_volume_factor_pcm_frames_u8 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_pcm_frames_u8');
  ma_copy_and_apply_volume_factor_per_channel_f32 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_per_channel_f32');
  ma_copy_and_apply_volume_factor_s16 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_s16');
  ma_copy_and_apply_volume_factor_s24 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_s24');
  ma_copy_and_apply_volume_factor_s32 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_s32');
  ma_copy_and_apply_volume_factor_u8 := GetProcAddress(LDllHandle, 'ma_copy_and_apply_volume_factor_u8');
  ma_copy_pcm_frames := GetProcAddress(LDllHandle, 'ma_copy_pcm_frames');
  ma_data_converter_config_init := GetProcAddress(LDllHandle, 'ma_data_converter_config_init');
  ma_data_converter_config_init_default := GetProcAddress(LDllHandle, 'ma_data_converter_config_init_default');
  ma_data_converter_get_expected_output_frame_count := GetProcAddress(LDllHandle, 'ma_data_converter_get_expected_output_frame_count');
  ma_data_converter_get_heap_size := GetProcAddress(LDllHandle, 'ma_data_converter_get_heap_size');
  ma_data_converter_get_input_channel_map := GetProcAddress(LDllHandle, 'ma_data_converter_get_input_channel_map');
  ma_data_converter_get_input_latency := GetProcAddress(LDllHandle, 'ma_data_converter_get_input_latency');
  ma_data_converter_get_output_channel_map := GetProcAddress(LDllHandle, 'ma_data_converter_get_output_channel_map');
  ma_data_converter_get_output_latency := GetProcAddress(LDllHandle, 'ma_data_converter_get_output_latency');
  ma_data_converter_get_required_input_frame_count := GetProcAddress(LDllHandle, 'ma_data_converter_get_required_input_frame_count');
  ma_data_converter_init := GetProcAddress(LDllHandle, 'ma_data_converter_init');
  ma_data_converter_init_preallocated := GetProcAddress(LDllHandle, 'ma_data_converter_init_preallocated');
  ma_data_converter_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_converter_process_pcm_frames');
  ma_data_converter_set_rate := GetProcAddress(LDllHandle, 'ma_data_converter_set_rate');
  ma_data_converter_set_rate_ratio := GetProcAddress(LDllHandle, 'ma_data_converter_set_rate_ratio');
  ma_data_converter_uninit := GetProcAddress(LDllHandle, 'ma_data_converter_uninit');
  ma_data_source_config_init := GetProcAddress(LDllHandle, 'ma_data_source_config_init');
  ma_data_source_get_current := GetProcAddress(LDllHandle, 'ma_data_source_get_current');
  ma_data_source_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_get_cursor_in_pcm_frames');
  ma_data_source_get_data_format := GetProcAddress(LDllHandle, 'ma_data_source_get_data_format');
  ma_data_source_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_get_length_in_pcm_frames');
  ma_data_source_get_loop_point_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_get_loop_point_in_pcm_frames');
  ma_data_source_get_next := GetProcAddress(LDllHandle, 'ma_data_source_get_next');
  ma_data_source_get_next_callback := GetProcAddress(LDllHandle, 'ma_data_source_get_next_callback');
  ma_data_source_get_range_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_get_range_in_pcm_frames');
  ma_data_source_init := GetProcAddress(LDllHandle, 'ma_data_source_init');
  ma_data_source_is_looping := GetProcAddress(LDllHandle, 'ma_data_source_is_looping');
  ma_data_source_node_config_init := GetProcAddress(LDllHandle, 'ma_data_source_node_config_init');
  ma_data_source_node_init := GetProcAddress(LDllHandle, 'ma_data_source_node_init');
  ma_data_source_node_is_looping := GetProcAddress(LDllHandle, 'ma_data_source_node_is_looping');
  ma_data_source_node_set_looping := GetProcAddress(LDllHandle, 'ma_data_source_node_set_looping');
  ma_data_source_node_uninit := GetProcAddress(LDllHandle, 'ma_data_source_node_uninit');
  ma_data_source_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_read_pcm_frames');
  ma_data_source_seek_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_seek_pcm_frames');
  ma_data_source_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_data_source_seek_to_pcm_frame');
  ma_data_source_set_current := GetProcAddress(LDllHandle, 'ma_data_source_set_current');
  ma_data_source_set_loop_point_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_set_loop_point_in_pcm_frames');
  ma_data_source_set_looping := GetProcAddress(LDllHandle, 'ma_data_source_set_looping');
  ma_data_source_set_next := GetProcAddress(LDllHandle, 'ma_data_source_set_next');
  ma_data_source_set_next_callback := GetProcAddress(LDllHandle, 'ma_data_source_set_next_callback');
  ma_data_source_set_range_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_data_source_set_range_in_pcm_frames');
  ma_data_source_uninit := GetProcAddress(LDllHandle, 'ma_data_source_uninit');
  ma_decode_file := GetProcAddress(LDllHandle, 'ma_decode_file');
  ma_decode_from_vfs := GetProcAddress(LDllHandle, 'ma_decode_from_vfs');
  ma_decode_memory := GetProcAddress(LDllHandle, 'ma_decode_memory');
  ma_decoder_config_init := GetProcAddress(LDllHandle, 'ma_decoder_config_init');
  ma_decoder_config_init_default := GetProcAddress(LDllHandle, 'ma_decoder_config_init_default');
  ma_decoder_get_available_frames := GetProcAddress(LDllHandle, 'ma_decoder_get_available_frames');
  ma_decoder_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_decoder_get_cursor_in_pcm_frames');
  ma_decoder_get_data_format := GetProcAddress(LDllHandle, 'ma_decoder_get_data_format');
  ma_decoder_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_decoder_get_length_in_pcm_frames');
  ma_decoder_init := GetProcAddress(LDllHandle, 'ma_decoder_init');
  ma_decoder_init_file := GetProcAddress(LDllHandle, 'ma_decoder_init_file');
  ma_decoder_init_file_w := GetProcAddress(LDllHandle, 'ma_decoder_init_file_w');
  ma_decoder_init_memory := GetProcAddress(LDllHandle, 'ma_decoder_init_memory');
  ma_decoder_init_vfs := GetProcAddress(LDllHandle, 'ma_decoder_init_vfs');
  ma_decoder_init_vfs_w := GetProcAddress(LDllHandle, 'ma_decoder_init_vfs_w');
  ma_decoder_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_decoder_read_pcm_frames');
  ma_decoder_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_decoder_seek_to_pcm_frame');
  ma_decoder_uninit := GetProcAddress(LDllHandle, 'ma_decoder_uninit');
  ma_decoding_backend_config_init := GetProcAddress(LDllHandle, 'ma_decoding_backend_config_init');
  ma_default_vfs_init := GetProcAddress(LDllHandle, 'ma_default_vfs_init');
  ma_deinterleave_pcm_frames := GetProcAddress(LDllHandle, 'ma_deinterleave_pcm_frames');
  ma_delay_config_init := GetProcAddress(LDllHandle, 'ma_delay_config_init');
  ma_delay_get_decay := GetProcAddress(LDllHandle, 'ma_delay_get_decay');
  ma_delay_get_dry := GetProcAddress(LDllHandle, 'ma_delay_get_dry');
  ma_delay_get_wet := GetProcAddress(LDllHandle, 'ma_delay_get_wet');
  ma_delay_init := GetProcAddress(LDllHandle, 'ma_delay_init');
  ma_delay_node_config_init := GetProcAddress(LDllHandle, 'ma_delay_node_config_init');
  ma_delay_node_get_decay := GetProcAddress(LDllHandle, 'ma_delay_node_get_decay');
  ma_delay_node_get_dry := GetProcAddress(LDllHandle, 'ma_delay_node_get_dry');
  ma_delay_node_get_wet := GetProcAddress(LDllHandle, 'ma_delay_node_get_wet');
  ma_delay_node_init := GetProcAddress(LDllHandle, 'ma_delay_node_init');
  ma_delay_node_set_decay := GetProcAddress(LDllHandle, 'ma_delay_node_set_decay');
  ma_delay_node_set_dry := GetProcAddress(LDllHandle, 'ma_delay_node_set_dry');
  ma_delay_node_set_wet := GetProcAddress(LDllHandle, 'ma_delay_node_set_wet');
  ma_delay_node_uninit := GetProcAddress(LDllHandle, 'ma_delay_node_uninit');
  ma_delay_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_delay_process_pcm_frames');
  ma_delay_set_decay := GetProcAddress(LDllHandle, 'ma_delay_set_decay');
  ma_delay_set_dry := GetProcAddress(LDllHandle, 'ma_delay_set_dry');
  ma_delay_set_wet := GetProcAddress(LDllHandle, 'ma_delay_set_wet');
  ma_delay_uninit := GetProcAddress(LDllHandle, 'ma_delay_uninit');
  ma_device_config_init := GetProcAddress(LDllHandle, 'ma_device_config_init');
  ma_device_get_context := GetProcAddress(LDllHandle, 'ma_device_get_context');
  ma_device_get_info := GetProcAddress(LDllHandle, 'ma_device_get_info');
  ma_device_get_log := GetProcAddress(LDllHandle, 'ma_device_get_log');
  ma_device_get_master_volume := GetProcAddress(LDllHandle, 'ma_device_get_master_volume');
  ma_device_get_master_volume_db := GetProcAddress(LDllHandle, 'ma_device_get_master_volume_db');
  ma_device_get_name := GetProcAddress(LDllHandle, 'ma_device_get_name');
  ma_device_get_state := GetProcAddress(LDllHandle, 'ma_device_get_state');
  ma_device_handle_backend_data_callback := GetProcAddress(LDllHandle, 'ma_device_handle_backend_data_callback');
  ma_device_init := GetProcAddress(LDllHandle, 'ma_device_init');
  ma_device_init_ex := GetProcAddress(LDllHandle, 'ma_device_init_ex');
  ma_device_is_started := GetProcAddress(LDllHandle, 'ma_device_is_started');
  ma_device_set_master_volume := GetProcAddress(LDllHandle, 'ma_device_set_master_volume');
  ma_device_set_master_volume_db := GetProcAddress(LDllHandle, 'ma_device_set_master_volume_db');
  ma_device_start := GetProcAddress(LDllHandle, 'ma_device_start');
  ma_device_stop := GetProcAddress(LDllHandle, 'ma_device_stop');
  ma_device_uninit := GetProcAddress(LDllHandle, 'ma_device_uninit');
  ma_duplex_rb_init := GetProcAddress(LDllHandle, 'ma_duplex_rb_init');
  ma_duplex_rb_uninit := GetProcAddress(LDllHandle, 'ma_duplex_rb_uninit');
  ma_encoder_config_init := GetProcAddress(LDllHandle, 'ma_encoder_config_init');
  ma_encoder_init := GetProcAddress(LDllHandle, 'ma_encoder_init');
  ma_encoder_init_file := GetProcAddress(LDllHandle, 'ma_encoder_init_file');
  ma_encoder_init_file_w := GetProcAddress(LDllHandle, 'ma_encoder_init_file_w');
  ma_encoder_uninit := GetProcAddress(LDllHandle, 'ma_encoder_uninit');
  ma_encoder_write_pcm_frames := GetProcAddress(LDllHandle, 'ma_encoder_write_pcm_frames');
  ma_engine_config_init := GetProcAddress(LDllHandle, 'ma_engine_config_init');
  ma_engine_find_closest_listener := GetProcAddress(LDllHandle, 'ma_engine_find_closest_listener');
  ma_engine_get_channels := GetProcAddress(LDllHandle, 'ma_engine_get_channels');
  ma_engine_get_device := GetProcAddress(LDllHandle, 'ma_engine_get_device');
  ma_engine_get_endpoint := GetProcAddress(LDllHandle, 'ma_engine_get_endpoint');
  ma_engine_get_listener_count := GetProcAddress(LDllHandle, 'ma_engine_get_listener_count');
  ma_engine_get_log := GetProcAddress(LDllHandle, 'ma_engine_get_log');
  ma_engine_get_node_graph := GetProcAddress(LDllHandle, 'ma_engine_get_node_graph');
  ma_engine_get_resource_manager := GetProcAddress(LDllHandle, 'ma_engine_get_resource_manager');
  ma_engine_get_sample_rate := GetProcAddress(LDllHandle, 'ma_engine_get_sample_rate');
  ma_engine_get_time := GetProcAddress(LDllHandle, 'ma_engine_get_time');
  ma_engine_init := GetProcAddress(LDllHandle, 'ma_engine_init');
  ma_engine_listener_get_cone := GetProcAddress(LDllHandle, 'ma_engine_listener_get_cone');
  ma_engine_listener_get_direction := GetProcAddress(LDllHandle, 'ma_engine_listener_get_direction');
  ma_engine_listener_get_position := GetProcAddress(LDllHandle, 'ma_engine_listener_get_position');
  ma_engine_listener_get_velocity := GetProcAddress(LDllHandle, 'ma_engine_listener_get_velocity');
  ma_engine_listener_get_world_up := GetProcAddress(LDllHandle, 'ma_engine_listener_get_world_up');
  ma_engine_listener_is_enabled := GetProcAddress(LDllHandle, 'ma_engine_listener_is_enabled');
  ma_engine_listener_set_cone := GetProcAddress(LDllHandle, 'ma_engine_listener_set_cone');
  ma_engine_listener_set_direction := GetProcAddress(LDllHandle, 'ma_engine_listener_set_direction');
  ma_engine_listener_set_enabled := GetProcAddress(LDllHandle, 'ma_engine_listener_set_enabled');
  ma_engine_listener_set_position := GetProcAddress(LDllHandle, 'ma_engine_listener_set_position');
  ma_engine_listener_set_velocity := GetProcAddress(LDllHandle, 'ma_engine_listener_set_velocity');
  ma_engine_listener_set_world_up := GetProcAddress(LDllHandle, 'ma_engine_listener_set_world_up');
  ma_engine_node_config_init := GetProcAddress(LDllHandle, 'ma_engine_node_config_init');
  ma_engine_node_get_heap_size := GetProcAddress(LDllHandle, 'ma_engine_node_get_heap_size');
  ma_engine_node_init := GetProcAddress(LDllHandle, 'ma_engine_node_init');
  ma_engine_node_init_preallocated := GetProcAddress(LDllHandle, 'ma_engine_node_init_preallocated');
  ma_engine_node_uninit := GetProcAddress(LDllHandle, 'ma_engine_node_uninit');
  ma_engine_play_sound := GetProcAddress(LDllHandle, 'ma_engine_play_sound');
  ma_engine_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_engine_read_pcm_frames');
  ma_engine_set_gain_db := GetProcAddress(LDllHandle, 'ma_engine_set_gain_db');
  ma_engine_set_time := GetProcAddress(LDllHandle, 'ma_engine_set_time');
  ma_engine_set_volume := GetProcAddress(LDllHandle, 'ma_engine_set_volume');
  ma_engine_start := GetProcAddress(LDllHandle, 'ma_engine_start');
  ma_engine_stop := GetProcAddress(LDllHandle, 'ma_engine_stop');
  ma_engine_uninit := GetProcAddress(LDllHandle, 'ma_engine_uninit');
  ma_event_init := GetProcAddress(LDllHandle, 'ma_event_init');
  ma_event_signal := GetProcAddress(LDllHandle, 'ma_event_signal');
  ma_event_uninit := GetProcAddress(LDllHandle, 'ma_event_uninit');
  ma_event_wait := GetProcAddress(LDllHandle, 'ma_event_wait');
  ma_fader_config_init := GetProcAddress(LDllHandle, 'ma_fader_config_init');
  ma_fader_get_current_volume := GetProcAddress(LDllHandle, 'ma_fader_get_current_volume');
  ma_fader_get_data_format := GetProcAddress(LDllHandle, 'ma_fader_get_data_format');
  ma_fader_init := GetProcAddress(LDllHandle, 'ma_fader_init');
  ma_fader_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_fader_process_pcm_frames');
  ma_fader_set_fade := GetProcAddress(LDllHandle, 'ma_fader_set_fade');
  ma_fence_acquire := GetProcAddress(LDllHandle, 'ma_fence_acquire');
  ma_fence_init := GetProcAddress(LDllHandle, 'ma_fence_init');
  ma_fence_release := GetProcAddress(LDllHandle, 'ma_fence_release');
  ma_fence_uninit := GetProcAddress(LDllHandle, 'ma_fence_uninit');
  ma_fence_wait := GetProcAddress(LDllHandle, 'ma_fence_wait');
  ma_free := GetProcAddress(LDllHandle, 'ma_free');
  ma_gainer_config_init := GetProcAddress(LDllHandle, 'ma_gainer_config_init');
  ma_gainer_get_heap_size := GetProcAddress(LDllHandle, 'ma_gainer_get_heap_size');
  ma_gainer_init := GetProcAddress(LDllHandle, 'ma_gainer_init');
  ma_gainer_init_preallocated := GetProcAddress(LDllHandle, 'ma_gainer_init_preallocated');
  ma_gainer_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_gainer_process_pcm_frames');
  ma_gainer_set_gain := GetProcAddress(LDllHandle, 'ma_gainer_set_gain');
  ma_gainer_set_gains := GetProcAddress(LDllHandle, 'ma_gainer_set_gains');
  ma_gainer_uninit := GetProcAddress(LDllHandle, 'ma_gainer_uninit');
  ma_get_backend_name := GetProcAddress(LDllHandle, 'ma_get_backend_name');
  ma_get_bytes_per_sample := GetProcAddress(LDllHandle, 'ma_get_bytes_per_sample');
  ma_get_enabled_backends := GetProcAddress(LDllHandle, 'ma_get_enabled_backends');
  ma_get_format_name := GetProcAddress(LDllHandle, 'ma_get_format_name');
  ma_hishelf_node_config_init := GetProcAddress(LDllHandle, 'ma_hishelf_node_config_init');
  ma_hishelf_node_init := GetProcAddress(LDllHandle, 'ma_hishelf_node_init');
  ma_hishelf_node_reinit := GetProcAddress(LDllHandle, 'ma_hishelf_node_reinit');
  ma_hishelf_node_uninit := GetProcAddress(LDllHandle, 'ma_hishelf_node_uninit');
  ma_hishelf2_config_init := GetProcAddress(LDllHandle, 'ma_hishelf2_config_init');
  ma_hishelf2_get_heap_size := GetProcAddress(LDllHandle, 'ma_hishelf2_get_heap_size');
  ma_hishelf2_get_latency := GetProcAddress(LDllHandle, 'ma_hishelf2_get_latency');
  ma_hishelf2_init := GetProcAddress(LDllHandle, 'ma_hishelf2_init');
  ma_hishelf2_init_preallocated := GetProcAddress(LDllHandle, 'ma_hishelf2_init_preallocated');
  ma_hishelf2_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_hishelf2_process_pcm_frames');
  ma_hishelf2_reinit := GetProcAddress(LDllHandle, 'ma_hishelf2_reinit');
  ma_hishelf2_uninit := GetProcAddress(LDllHandle, 'ma_hishelf2_uninit');
  ma_hpf_config_init := GetProcAddress(LDllHandle, 'ma_hpf_config_init');
  ma_hpf_get_heap_size := GetProcAddress(LDllHandle, 'ma_hpf_get_heap_size');
  ma_hpf_get_latency := GetProcAddress(LDllHandle, 'ma_hpf_get_latency');
  ma_hpf_init := GetProcAddress(LDllHandle, 'ma_hpf_init');
  ma_hpf_init_preallocated := GetProcAddress(LDllHandle, 'ma_hpf_init_preallocated');
  ma_hpf_node_config_init := GetProcAddress(LDllHandle, 'ma_hpf_node_config_init');
  ma_hpf_node_init := GetProcAddress(LDllHandle, 'ma_hpf_node_init');
  ma_hpf_node_reinit := GetProcAddress(LDllHandle, 'ma_hpf_node_reinit');
  ma_hpf_node_uninit := GetProcAddress(LDllHandle, 'ma_hpf_node_uninit');
  ma_hpf_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_hpf_process_pcm_frames');
  ma_hpf_reinit := GetProcAddress(LDllHandle, 'ma_hpf_reinit');
  ma_hpf_uninit := GetProcAddress(LDllHandle, 'ma_hpf_uninit');
  ma_hpf1_config_init := GetProcAddress(LDllHandle, 'ma_hpf1_config_init');
  ma_hpf1_get_heap_size := GetProcAddress(LDllHandle, 'ma_hpf1_get_heap_size');
  ma_hpf1_get_latency := GetProcAddress(LDllHandle, 'ma_hpf1_get_latency');
  ma_hpf1_init := GetProcAddress(LDllHandle, 'ma_hpf1_init');
  ma_hpf1_init_preallocated := GetProcAddress(LDllHandle, 'ma_hpf1_init_preallocated');
  ma_hpf1_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_hpf1_process_pcm_frames');
  ma_hpf1_reinit := GetProcAddress(LDllHandle, 'ma_hpf1_reinit');
  ma_hpf1_uninit := GetProcAddress(LDllHandle, 'ma_hpf1_uninit');
  ma_hpf2_config_init := GetProcAddress(LDllHandle, 'ma_hpf2_config_init');
  ma_hpf2_get_heap_size := GetProcAddress(LDllHandle, 'ma_hpf2_get_heap_size');
  ma_hpf2_get_latency := GetProcAddress(LDllHandle, 'ma_hpf2_get_latency');
  ma_hpf2_init := GetProcAddress(LDllHandle, 'ma_hpf2_init');
  ma_hpf2_init_preallocated := GetProcAddress(LDllHandle, 'ma_hpf2_init_preallocated');
  ma_hpf2_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_hpf2_process_pcm_frames');
  ma_hpf2_reinit := GetProcAddress(LDllHandle, 'ma_hpf2_reinit');
  ma_hpf2_uninit := GetProcAddress(LDllHandle, 'ma_hpf2_uninit');
  ma_interleave_pcm_frames := GetProcAddress(LDllHandle, 'ma_interleave_pcm_frames');
  ma_is_backend_enabled := GetProcAddress(LDllHandle, 'ma_is_backend_enabled');
  ma_is_loopback_supported := GetProcAddress(LDllHandle, 'ma_is_loopback_supported');
  ma_linear_resampler_config_init := GetProcAddress(LDllHandle, 'ma_linear_resampler_config_init');
  ma_linear_resampler_get_expected_output_frame_count := GetProcAddress(LDllHandle, 'ma_linear_resampler_get_expected_output_frame_count');
  ma_linear_resampler_get_heap_size := GetProcAddress(LDllHandle, 'ma_linear_resampler_get_heap_size');
  ma_linear_resampler_get_input_latency := GetProcAddress(LDllHandle, 'ma_linear_resampler_get_input_latency');
  ma_linear_resampler_get_output_latency := GetProcAddress(LDllHandle, 'ma_linear_resampler_get_output_latency');
  ma_linear_resampler_get_required_input_frame_count := GetProcAddress(LDllHandle, 'ma_linear_resampler_get_required_input_frame_count');
  ma_linear_resampler_init := GetProcAddress(LDllHandle, 'ma_linear_resampler_init');
  ma_linear_resampler_init_preallocated := GetProcAddress(LDllHandle, 'ma_linear_resampler_init_preallocated');
  ma_linear_resampler_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_linear_resampler_process_pcm_frames');
  ma_linear_resampler_set_rate := GetProcAddress(LDllHandle, 'ma_linear_resampler_set_rate');
  ma_linear_resampler_set_rate_ratio := GetProcAddress(LDllHandle, 'ma_linear_resampler_set_rate_ratio');
  ma_linear_resampler_uninit := GetProcAddress(LDllHandle, 'ma_linear_resampler_uninit');
  ma_log_callback_init := GetProcAddress(LDllHandle, 'ma_log_callback_init');
  ma_log_init := GetProcAddress(LDllHandle, 'ma_log_init');
  ma_log_level_to_string := GetProcAddress(LDllHandle, 'ma_log_level_to_string');
  ma_log_post := GetProcAddress(LDllHandle, 'ma_log_post');
  ma_log_postf := GetProcAddress(LDllHandle, 'ma_log_postf');
  ma_log_postv := GetProcAddress(LDllHandle, 'ma_log_postv');
  ma_log_register_callback := GetProcAddress(LDllHandle, 'ma_log_register_callback');
  ma_log_uninit := GetProcAddress(LDllHandle, 'ma_log_uninit');
  ma_log_unregister_callback := GetProcAddress(LDllHandle, 'ma_log_unregister_callback');
  ma_loshelf_node_config_init := GetProcAddress(LDllHandle, 'ma_loshelf_node_config_init');
  ma_loshelf_node_init := GetProcAddress(LDllHandle, 'ma_loshelf_node_init');
  ma_loshelf_node_reinit := GetProcAddress(LDllHandle, 'ma_loshelf_node_reinit');
  ma_loshelf_node_uninit := GetProcAddress(LDllHandle, 'ma_loshelf_node_uninit');
  ma_loshelf2_config_init := GetProcAddress(LDllHandle, 'ma_loshelf2_config_init');
  ma_loshelf2_get_heap_size := GetProcAddress(LDllHandle, 'ma_loshelf2_get_heap_size');
  ma_loshelf2_get_latency := GetProcAddress(LDllHandle, 'ma_loshelf2_get_latency');
  ma_loshelf2_init := GetProcAddress(LDllHandle, 'ma_loshelf2_init');
  ma_loshelf2_init_preallocated := GetProcAddress(LDllHandle, 'ma_loshelf2_init_preallocated');
  ma_loshelf2_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_loshelf2_process_pcm_frames');
  ma_loshelf2_reinit := GetProcAddress(LDllHandle, 'ma_loshelf2_reinit');
  ma_loshelf2_uninit := GetProcAddress(LDllHandle, 'ma_loshelf2_uninit');
  ma_lpf_config_init := GetProcAddress(LDllHandle, 'ma_lpf_config_init');
  ma_lpf_get_heap_size := GetProcAddress(LDllHandle, 'ma_lpf_get_heap_size');
  ma_lpf_get_latency := GetProcAddress(LDllHandle, 'ma_lpf_get_latency');
  ma_lpf_init := GetProcAddress(LDllHandle, 'ma_lpf_init');
  ma_lpf_init_preallocated := GetProcAddress(LDllHandle, 'ma_lpf_init_preallocated');
  ma_lpf_node_config_init := GetProcAddress(LDllHandle, 'ma_lpf_node_config_init');
  ma_lpf_node_init := GetProcAddress(LDllHandle, 'ma_lpf_node_init');
  ma_lpf_node_reinit := GetProcAddress(LDllHandle, 'ma_lpf_node_reinit');
  ma_lpf_node_uninit := GetProcAddress(LDllHandle, 'ma_lpf_node_uninit');
  ma_lpf_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_lpf_process_pcm_frames');
  ma_lpf_reinit := GetProcAddress(LDllHandle, 'ma_lpf_reinit');
  ma_lpf_uninit := GetProcAddress(LDllHandle, 'ma_lpf_uninit');
  ma_lpf1_config_init := GetProcAddress(LDllHandle, 'ma_lpf1_config_init');
  ma_lpf1_get_heap_size := GetProcAddress(LDllHandle, 'ma_lpf1_get_heap_size');
  ma_lpf1_get_latency := GetProcAddress(LDllHandle, 'ma_lpf1_get_latency');
  ma_lpf1_init := GetProcAddress(LDllHandle, 'ma_lpf1_init');
  ma_lpf1_init_preallocated := GetProcAddress(LDllHandle, 'ma_lpf1_init_preallocated');
  ma_lpf1_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_lpf1_process_pcm_frames');
  ma_lpf1_reinit := GetProcAddress(LDllHandle, 'ma_lpf1_reinit');
  ma_lpf1_uninit := GetProcAddress(LDllHandle, 'ma_lpf1_uninit');
  ma_lpf2_config_init := GetProcAddress(LDllHandle, 'ma_lpf2_config_init');
  ma_lpf2_get_heap_size := GetProcAddress(LDllHandle, 'ma_lpf2_get_heap_size');
  ma_lpf2_get_latency := GetProcAddress(LDllHandle, 'ma_lpf2_get_latency');
  ma_lpf2_init := GetProcAddress(LDllHandle, 'ma_lpf2_init');
  ma_lpf2_init_preallocated := GetProcAddress(LDllHandle, 'ma_lpf2_init_preallocated');
  ma_lpf2_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_lpf2_process_pcm_frames');
  ma_lpf2_reinit := GetProcAddress(LDllHandle, 'ma_lpf2_reinit');
  ma_lpf2_uninit := GetProcAddress(LDllHandle, 'ma_lpf2_uninit');
  ma_malloc := GetProcAddress(LDllHandle, 'ma_malloc');
  ma_mutex_init := GetProcAddress(LDllHandle, 'ma_mutex_init');
  ma_mutex_lock := GetProcAddress(LDllHandle, 'ma_mutex_lock');
  ma_mutex_uninit := GetProcAddress(LDllHandle, 'ma_mutex_uninit');
  ma_mutex_unlock := GetProcAddress(LDllHandle, 'ma_mutex_unlock');
  ma_node_attach_output_bus := GetProcAddress(LDllHandle, 'ma_node_attach_output_bus');
  ma_node_config_init := GetProcAddress(LDllHandle, 'ma_node_config_init');
  ma_node_detach_all_output_buses := GetProcAddress(LDllHandle, 'ma_node_detach_all_output_buses');
  ma_node_detach_output_bus := GetProcAddress(LDllHandle, 'ma_node_detach_output_bus');
  ma_node_get_heap_size := GetProcAddress(LDllHandle, 'ma_node_get_heap_size');
  ma_node_get_input_bus_count := GetProcAddress(LDllHandle, 'ma_node_get_input_bus_count');
  ma_node_get_input_channels := GetProcAddress(LDllHandle, 'ma_node_get_input_channels');
  ma_node_get_node_graph := GetProcAddress(LDllHandle, 'ma_node_get_node_graph');
  ma_node_get_output_bus_count := GetProcAddress(LDllHandle, 'ma_node_get_output_bus_count');
  ma_node_get_output_bus_volume := GetProcAddress(LDllHandle, 'ma_node_get_output_bus_volume');
  ma_node_get_output_channels := GetProcAddress(LDllHandle, 'ma_node_get_output_channels');
  ma_node_get_state := GetProcAddress(LDllHandle, 'ma_node_get_state');
  ma_node_get_state_by_time := GetProcAddress(LDllHandle, 'ma_node_get_state_by_time');
  ma_node_get_state_by_time_range := GetProcAddress(LDllHandle, 'ma_node_get_state_by_time_range');
  ma_node_get_state_time := GetProcAddress(LDllHandle, 'ma_node_get_state_time');
  ma_node_get_time := GetProcAddress(LDllHandle, 'ma_node_get_time');
  ma_node_graph_config_init := GetProcAddress(LDllHandle, 'ma_node_graph_config_init');
  ma_node_graph_get_channels := GetProcAddress(LDllHandle, 'ma_node_graph_get_channels');
  ma_node_graph_get_endpoint := GetProcAddress(LDllHandle, 'ma_node_graph_get_endpoint');
  ma_node_graph_get_time := GetProcAddress(LDllHandle, 'ma_node_graph_get_time');
  ma_node_graph_init := GetProcAddress(LDllHandle, 'ma_node_graph_init');
  ma_node_graph_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_node_graph_read_pcm_frames');
  ma_node_graph_set_time := GetProcAddress(LDllHandle, 'ma_node_graph_set_time');
  ma_node_graph_uninit := GetProcAddress(LDllHandle, 'ma_node_graph_uninit');
  ma_node_init := GetProcAddress(LDllHandle, 'ma_node_init');
  ma_node_init_preallocated := GetProcAddress(LDllHandle, 'ma_node_init_preallocated');
  ma_node_set_output_bus_volume := GetProcAddress(LDllHandle, 'ma_node_set_output_bus_volume');
  ma_node_set_state := GetProcAddress(LDllHandle, 'ma_node_set_state');
  ma_node_set_state_time := GetProcAddress(LDllHandle, 'ma_node_set_state_time');
  ma_node_set_time := GetProcAddress(LDllHandle, 'ma_node_set_time');
  ma_node_uninit := GetProcAddress(LDllHandle, 'ma_node_uninit');
  ma_noise_config_init := GetProcAddress(LDllHandle, 'ma_noise_config_init');
  ma_noise_get_heap_size := GetProcAddress(LDllHandle, 'ma_noise_get_heap_size');
  ma_noise_init := GetProcAddress(LDllHandle, 'ma_noise_init');
  ma_noise_init_preallocated := GetProcAddress(LDllHandle, 'ma_noise_init_preallocated');
  ma_noise_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_noise_read_pcm_frames');
  ma_noise_set_amplitude := GetProcAddress(LDllHandle, 'ma_noise_set_amplitude');
  ma_noise_set_seed := GetProcAddress(LDllHandle, 'ma_noise_set_seed');
  ma_noise_set_type := GetProcAddress(LDllHandle, 'ma_noise_set_type');
  ma_noise_uninit := GetProcAddress(LDllHandle, 'ma_noise_uninit');
  ma_notch_node_config_init := GetProcAddress(LDllHandle, 'ma_notch_node_config_init');
  ma_notch_node_init := GetProcAddress(LDllHandle, 'ma_notch_node_init');
  ma_notch_node_reinit := GetProcAddress(LDllHandle, 'ma_notch_node_reinit');
  ma_notch_node_uninit := GetProcAddress(LDllHandle, 'ma_notch_node_uninit');
  ma_notch2_config_init := GetProcAddress(LDllHandle, 'ma_notch2_config_init');
  ma_notch2_get_heap_size := GetProcAddress(LDllHandle, 'ma_notch2_get_heap_size');
  ma_notch2_get_latency := GetProcAddress(LDllHandle, 'ma_notch2_get_latency');
  ma_notch2_init := GetProcAddress(LDllHandle, 'ma_notch2_init');
  ma_notch2_init_preallocated := GetProcAddress(LDllHandle, 'ma_notch2_init_preallocated');
  ma_notch2_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_notch2_process_pcm_frames');
  ma_notch2_reinit := GetProcAddress(LDllHandle, 'ma_notch2_reinit');
  ma_notch2_uninit := GetProcAddress(LDllHandle, 'ma_notch2_uninit');
  ma_offset_pcm_frames_const_ptr := GetProcAddress(LDllHandle, 'ma_offset_pcm_frames_const_ptr');
  ma_offset_pcm_frames_ptr := GetProcAddress(LDllHandle, 'ma_offset_pcm_frames_ptr');
  ma_paged_audio_buffer_config_init := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_config_init');
  ma_paged_audio_buffer_data_allocate_and_append_page := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_allocate_and_append_page');
  ma_paged_audio_buffer_data_allocate_page := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_allocate_page');
  ma_paged_audio_buffer_data_append_page := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_append_page');
  ma_paged_audio_buffer_data_free_page := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_free_page');
  ma_paged_audio_buffer_data_get_head := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_get_head');
  ma_paged_audio_buffer_data_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_get_length_in_pcm_frames');
  ma_paged_audio_buffer_data_get_tail := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_get_tail');
  ma_paged_audio_buffer_data_init := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_init');
  ma_paged_audio_buffer_data_uninit := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_data_uninit');
  ma_paged_audio_buffer_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_get_cursor_in_pcm_frames');
  ma_paged_audio_buffer_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_get_length_in_pcm_frames');
  ma_paged_audio_buffer_init := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_init');
  ma_paged_audio_buffer_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_read_pcm_frames');
  ma_paged_audio_buffer_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_seek_to_pcm_frame');
  ma_paged_audio_buffer_uninit := GetProcAddress(LDllHandle, 'ma_paged_audio_buffer_uninit');
  ma_panner_config_init := GetProcAddress(LDllHandle, 'ma_panner_config_init');
  ma_panner_get_mode := GetProcAddress(LDllHandle, 'ma_panner_get_mode');
  ma_panner_get_pan := GetProcAddress(LDllHandle, 'ma_panner_get_pan');
  ma_panner_init := GetProcAddress(LDllHandle, 'ma_panner_init');
  ma_panner_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_panner_process_pcm_frames');
  ma_panner_set_mode := GetProcAddress(LDllHandle, 'ma_panner_set_mode');
  ma_panner_set_pan := GetProcAddress(LDllHandle, 'ma_panner_set_pan');
  ma_pcm_convert := GetProcAddress(LDllHandle, 'ma_pcm_convert');
  ma_pcm_f32_to_s16 := GetProcAddress(LDllHandle, 'ma_pcm_f32_to_s16');
  ma_pcm_f32_to_s24 := GetProcAddress(LDllHandle, 'ma_pcm_f32_to_s24');
  ma_pcm_f32_to_s32 := GetProcAddress(LDllHandle, 'ma_pcm_f32_to_s32');
  ma_pcm_f32_to_u8 := GetProcAddress(LDllHandle, 'ma_pcm_f32_to_u8');
  ma_pcm_rb_acquire_read := GetProcAddress(LDllHandle, 'ma_pcm_rb_acquire_read');
  ma_pcm_rb_acquire_write := GetProcAddress(LDllHandle, 'ma_pcm_rb_acquire_write');
  ma_pcm_rb_available_read := GetProcAddress(LDllHandle, 'ma_pcm_rb_available_read');
  ma_pcm_rb_available_write := GetProcAddress(LDllHandle, 'ma_pcm_rb_available_write');
  ma_pcm_rb_commit_read := GetProcAddress(LDllHandle, 'ma_pcm_rb_commit_read');
  ma_pcm_rb_commit_write := GetProcAddress(LDllHandle, 'ma_pcm_rb_commit_write');
  ma_pcm_rb_get_subbuffer_offset := GetProcAddress(LDllHandle, 'ma_pcm_rb_get_subbuffer_offset');
  ma_pcm_rb_get_subbuffer_ptr := GetProcAddress(LDllHandle, 'ma_pcm_rb_get_subbuffer_ptr');
  ma_pcm_rb_get_subbuffer_size := GetProcAddress(LDllHandle, 'ma_pcm_rb_get_subbuffer_size');
  ma_pcm_rb_get_subbuffer_stride := GetProcAddress(LDllHandle, 'ma_pcm_rb_get_subbuffer_stride');
  ma_pcm_rb_init := GetProcAddress(LDllHandle, 'ma_pcm_rb_init');
  ma_pcm_rb_init_ex := GetProcAddress(LDllHandle, 'ma_pcm_rb_init_ex');
  ma_pcm_rb_pointer_distance := GetProcAddress(LDllHandle, 'ma_pcm_rb_pointer_distance');
  ma_pcm_rb_reset := GetProcAddress(LDllHandle, 'ma_pcm_rb_reset');
  ma_pcm_rb_seek_read := GetProcAddress(LDllHandle, 'ma_pcm_rb_seek_read');
  ma_pcm_rb_seek_write := GetProcAddress(LDllHandle, 'ma_pcm_rb_seek_write');
  ma_pcm_rb_uninit := GetProcAddress(LDllHandle, 'ma_pcm_rb_uninit');
  ma_pcm_s16_to_f32 := GetProcAddress(LDllHandle, 'ma_pcm_s16_to_f32');
  ma_pcm_s16_to_s24 := GetProcAddress(LDllHandle, 'ma_pcm_s16_to_s24');
  ma_pcm_s16_to_s32 := GetProcAddress(LDllHandle, 'ma_pcm_s16_to_s32');
  ma_pcm_s16_to_u8 := GetProcAddress(LDllHandle, 'ma_pcm_s16_to_u8');
  ma_pcm_s24_to_f32 := GetProcAddress(LDllHandle, 'ma_pcm_s24_to_f32');
  ma_pcm_s24_to_s16 := GetProcAddress(LDllHandle, 'ma_pcm_s24_to_s16');
  ma_pcm_s24_to_s32 := GetProcAddress(LDllHandle, 'ma_pcm_s24_to_s32');
  ma_pcm_s24_to_u8 := GetProcAddress(LDllHandle, 'ma_pcm_s24_to_u8');
  ma_pcm_s32_to_f32 := GetProcAddress(LDllHandle, 'ma_pcm_s32_to_f32');
  ma_pcm_s32_to_s16 := GetProcAddress(LDllHandle, 'ma_pcm_s32_to_s16');
  ma_pcm_s32_to_s24 := GetProcAddress(LDllHandle, 'ma_pcm_s32_to_s24');
  ma_pcm_s32_to_u8 := GetProcAddress(LDllHandle, 'ma_pcm_s32_to_u8');
  ma_pcm_u8_to_f32 := GetProcAddress(LDllHandle, 'ma_pcm_u8_to_f32');
  ma_pcm_u8_to_s16 := GetProcAddress(LDllHandle, 'ma_pcm_u8_to_s16');
  ma_pcm_u8_to_s24 := GetProcAddress(LDllHandle, 'ma_pcm_u8_to_s24');
  ma_pcm_u8_to_s32 := GetProcAddress(LDllHandle, 'ma_pcm_u8_to_s32');
  ma_peak_node_config_init := GetProcAddress(LDllHandle, 'ma_peak_node_config_init');
  ma_peak_node_init := GetProcAddress(LDllHandle, 'ma_peak_node_init');
  ma_peak_node_reinit := GetProcAddress(LDllHandle, 'ma_peak_node_reinit');
  ma_peak_node_uninit := GetProcAddress(LDllHandle, 'ma_peak_node_uninit');
  ma_peak2_config_init := GetProcAddress(LDllHandle, 'ma_peak2_config_init');
  ma_peak2_get_heap_size := GetProcAddress(LDllHandle, 'ma_peak2_get_heap_size');
  ma_peak2_get_latency := GetProcAddress(LDllHandle, 'ma_peak2_get_latency');
  ma_peak2_init := GetProcAddress(LDllHandle, 'ma_peak2_init');
  ma_peak2_init_preallocated := GetProcAddress(LDllHandle, 'ma_peak2_init_preallocated');
  ma_peak2_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_peak2_process_pcm_frames');
  ma_peak2_reinit := GetProcAddress(LDllHandle, 'ma_peak2_reinit');
  ma_peak2_uninit := GetProcAddress(LDllHandle, 'ma_peak2_uninit');
  ma_rb_acquire_read := GetProcAddress(LDllHandle, 'ma_rb_acquire_read');
  ma_rb_acquire_write := GetProcAddress(LDllHandle, 'ma_rb_acquire_write');
  ma_rb_available_read := GetProcAddress(LDllHandle, 'ma_rb_available_read');
  ma_rb_available_write := GetProcAddress(LDllHandle, 'ma_rb_available_write');
  ma_rb_commit_read := GetProcAddress(LDllHandle, 'ma_rb_commit_read');
  ma_rb_commit_write := GetProcAddress(LDllHandle, 'ma_rb_commit_write');
  ma_rb_get_subbuffer_offset := GetProcAddress(LDllHandle, 'ma_rb_get_subbuffer_offset');
  ma_rb_get_subbuffer_ptr := GetProcAddress(LDllHandle, 'ma_rb_get_subbuffer_ptr');
  ma_rb_get_subbuffer_size := GetProcAddress(LDllHandle, 'ma_rb_get_subbuffer_size');
  ma_rb_get_subbuffer_stride := GetProcAddress(LDllHandle, 'ma_rb_get_subbuffer_stride');
  ma_rb_init := GetProcAddress(LDllHandle, 'ma_rb_init');
  ma_rb_init_ex := GetProcAddress(LDllHandle, 'ma_rb_init_ex');
  ma_rb_pointer_distance := GetProcAddress(LDllHandle, 'ma_rb_pointer_distance');
  ma_rb_reset := GetProcAddress(LDllHandle, 'ma_rb_reset');
  ma_rb_seek_read := GetProcAddress(LDllHandle, 'ma_rb_seek_read');
  ma_rb_seek_write := GetProcAddress(LDllHandle, 'ma_rb_seek_write');
  ma_rb_uninit := GetProcAddress(LDllHandle, 'ma_rb_uninit');
  ma_realloc := GetProcAddress(LDllHandle, 'ma_realloc');
  ma_resampler_config_init := GetProcAddress(LDllHandle, 'ma_resampler_config_init');
  ma_resampler_get_expected_output_frame_count := GetProcAddress(LDllHandle, 'ma_resampler_get_expected_output_frame_count');
  ma_resampler_get_heap_size := GetProcAddress(LDllHandle, 'ma_resampler_get_heap_size');
  ma_resampler_get_input_latency := GetProcAddress(LDllHandle, 'ma_resampler_get_input_latency');
  ma_resampler_get_output_latency := GetProcAddress(LDllHandle, 'ma_resampler_get_output_latency');
  ma_resampler_get_required_input_frame_count := GetProcAddress(LDllHandle, 'ma_resampler_get_required_input_frame_count');
  ma_resampler_init := GetProcAddress(LDllHandle, 'ma_resampler_init');
  ma_resampler_init_preallocated := GetProcAddress(LDllHandle, 'ma_resampler_init_preallocated');
  ma_resampler_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_resampler_process_pcm_frames');
  ma_resampler_set_rate := GetProcAddress(LDllHandle, 'ma_resampler_set_rate');
  ma_resampler_set_rate_ratio := GetProcAddress(LDllHandle, 'ma_resampler_set_rate_ratio');
  ma_resampler_uninit := GetProcAddress(LDllHandle, 'ma_resampler_uninit');
  ma_resource_manager_config_init := GetProcAddress(LDllHandle, 'ma_resource_manager_config_init');
  ma_resource_manager_data_buffer_get_available_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_get_available_frames');
  ma_resource_manager_data_buffer_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_get_cursor_in_pcm_frames');
  ma_resource_manager_data_buffer_get_data_format := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_get_data_format');
  ma_resource_manager_data_buffer_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_get_length_in_pcm_frames');
  ma_resource_manager_data_buffer_init := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_init');
  ma_resource_manager_data_buffer_init_copy := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_init_copy');
  ma_resource_manager_data_buffer_init_ex := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_init_ex');
  ma_resource_manager_data_buffer_init_w := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_init_w');
  ma_resource_manager_data_buffer_is_looping := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_is_looping');
  ma_resource_manager_data_buffer_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_read_pcm_frames');
  ma_resource_manager_data_buffer_result := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_result');
  ma_resource_manager_data_buffer_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_seek_to_pcm_frame');
  ma_resource_manager_data_buffer_set_looping := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_set_looping');
  ma_resource_manager_data_buffer_uninit := GetProcAddress(LDllHandle, 'ma_resource_manager_data_buffer_uninit');
  ma_resource_manager_data_source_config_init := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_config_init');
  ma_resource_manager_data_source_get_available_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_get_available_frames');
  ma_resource_manager_data_source_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_get_cursor_in_pcm_frames');
  ma_resource_manager_data_source_get_data_format := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_get_data_format');
  ma_resource_manager_data_source_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_get_length_in_pcm_frames');
  ma_resource_manager_data_source_init := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_init');
  ma_resource_manager_data_source_init_copy := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_init_copy');
  ma_resource_manager_data_source_init_ex := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_init_ex');
  ma_resource_manager_data_source_init_w := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_init_w');
  ma_resource_manager_data_source_is_looping := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_is_looping');
  ma_resource_manager_data_source_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_read_pcm_frames');
  ma_resource_manager_data_source_result := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_result');
  ma_resource_manager_data_source_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_seek_to_pcm_frame');
  ma_resource_manager_data_source_set_looping := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_set_looping');
  ma_resource_manager_data_source_uninit := GetProcAddress(LDllHandle, 'ma_resource_manager_data_source_uninit');
  ma_resource_manager_data_stream_get_available_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_get_available_frames');
  ma_resource_manager_data_stream_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_get_cursor_in_pcm_frames');
  ma_resource_manager_data_stream_get_data_format := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_get_data_format');
  ma_resource_manager_data_stream_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_get_length_in_pcm_frames');
  ma_resource_manager_data_stream_init := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_init');
  ma_resource_manager_data_stream_init_ex := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_init_ex');
  ma_resource_manager_data_stream_init_w := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_init_w');
  ma_resource_manager_data_stream_is_looping := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_is_looping');
  ma_resource_manager_data_stream_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_read_pcm_frames');
  ma_resource_manager_data_stream_result := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_result');
  ma_resource_manager_data_stream_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_seek_to_pcm_frame');
  ma_resource_manager_data_stream_set_looping := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_set_looping');
  ma_resource_manager_data_stream_uninit := GetProcAddress(LDllHandle, 'ma_resource_manager_data_stream_uninit');
  ma_resource_manager_get_log := GetProcAddress(LDllHandle, 'ma_resource_manager_get_log');
  ma_resource_manager_init := GetProcAddress(LDllHandle, 'ma_resource_manager_init');
  ma_resource_manager_job_init := GetProcAddress(LDllHandle, 'ma_resource_manager_job_init');
  ma_resource_manager_job_queue_config_init := GetProcAddress(LDllHandle, 'ma_resource_manager_job_queue_config_init');
  ma_resource_manager_job_queue_get_heap_size := GetProcAddress(LDllHandle, 'ma_resource_manager_job_queue_get_heap_size');
  ma_resource_manager_job_queue_init := GetProcAddress(LDllHandle, 'ma_resource_manager_job_queue_init');
  ma_resource_manager_job_queue_init_preallocated := GetProcAddress(LDllHandle, 'ma_resource_manager_job_queue_init_preallocated');
  ma_resource_manager_job_queue_next := GetProcAddress(LDllHandle, 'ma_resource_manager_job_queue_next');
  ma_resource_manager_job_queue_post := GetProcAddress(LDllHandle, 'ma_resource_manager_job_queue_post');
  ma_resource_manager_job_queue_uninit := GetProcAddress(LDllHandle, 'ma_resource_manager_job_queue_uninit');
  ma_resource_manager_next_job := GetProcAddress(LDllHandle, 'ma_resource_manager_next_job');
  ma_resource_manager_pipeline_notifications_init := GetProcAddress(LDllHandle, 'ma_resource_manager_pipeline_notifications_init');
  ma_resource_manager_post_job := GetProcAddress(LDllHandle, 'ma_resource_manager_post_job');
  ma_resource_manager_post_job_quit := GetProcAddress(LDllHandle, 'ma_resource_manager_post_job_quit');
  ma_resource_manager_process_job := GetProcAddress(LDllHandle, 'ma_resource_manager_process_job');
  ma_resource_manager_process_next_job := GetProcAddress(LDllHandle, 'ma_resource_manager_process_next_job');
  ma_resource_manager_register_decoded_data := GetProcAddress(LDllHandle, 'ma_resource_manager_register_decoded_data');
  ma_resource_manager_register_decoded_data_w := GetProcAddress(LDllHandle, 'ma_resource_manager_register_decoded_data_w');
  ma_resource_manager_register_encoded_data := GetProcAddress(LDllHandle, 'ma_resource_manager_register_encoded_data');
  ma_resource_manager_register_encoded_data_w := GetProcAddress(LDllHandle, 'ma_resource_manager_register_encoded_data_w');
  ma_resource_manager_register_file := GetProcAddress(LDllHandle, 'ma_resource_manager_register_file');
  ma_resource_manager_register_file_w := GetProcAddress(LDllHandle, 'ma_resource_manager_register_file_w');
  ma_resource_manager_uninit := GetProcAddress(LDllHandle, 'ma_resource_manager_uninit');
  ma_resource_manager_unregister_data := GetProcAddress(LDllHandle, 'ma_resource_manager_unregister_data');
  ma_resource_manager_unregister_data_w := GetProcAddress(LDllHandle, 'ma_resource_manager_unregister_data_w');
  ma_resource_manager_unregister_file := GetProcAddress(LDllHandle, 'ma_resource_manager_unregister_file');
  ma_resource_manager_unregister_file_w := GetProcAddress(LDllHandle, 'ma_resource_manager_unregister_file_w');
  ma_result_description := GetProcAddress(LDllHandle, 'ma_result_description');
  ma_silence_pcm_frames := GetProcAddress(LDllHandle, 'ma_silence_pcm_frames');
  ma_slot_allocator_alloc := GetProcAddress(LDllHandle, 'ma_slot_allocator_alloc');
  ma_slot_allocator_config_init := GetProcAddress(LDllHandle, 'ma_slot_allocator_config_init');
  ma_slot_allocator_free := GetProcAddress(LDllHandle, 'ma_slot_allocator_free');
  ma_slot_allocator_get_heap_size := GetProcAddress(LDllHandle, 'ma_slot_allocator_get_heap_size');
  ma_slot_allocator_init := GetProcAddress(LDllHandle, 'ma_slot_allocator_init');
  ma_slot_allocator_init_preallocated := GetProcAddress(LDllHandle, 'ma_slot_allocator_init_preallocated');
  ma_slot_allocator_uninit := GetProcAddress(LDllHandle, 'ma_slot_allocator_uninit');
  ma_sound_at_end := GetProcAddress(LDllHandle, 'ma_sound_at_end');
  ma_sound_config_init := GetProcAddress(LDllHandle, 'ma_sound_config_init');
  ma_sound_get_attenuation_model := GetProcAddress(LDllHandle, 'ma_sound_get_attenuation_model');
  ma_sound_get_cone := GetProcAddress(LDllHandle, 'ma_sound_get_cone');
  ma_sound_get_current_fade_volume := GetProcAddress(LDllHandle, 'ma_sound_get_current_fade_volume');
  ma_sound_get_cursor_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_get_cursor_in_pcm_frames');
  ma_sound_get_data_format := GetProcAddress(LDllHandle, 'ma_sound_get_data_format');
  ma_sound_get_data_source := GetProcAddress(LDllHandle, 'ma_sound_get_data_source');
  ma_sound_get_direction := GetProcAddress(LDllHandle, 'ma_sound_get_direction');
  ma_sound_get_direction_to_listener := GetProcAddress(LDllHandle, 'ma_sound_get_direction_to_listener');
  ma_sound_get_directional_attenuation_factor := GetProcAddress(LDllHandle, 'ma_sound_get_directional_attenuation_factor');
  ma_sound_get_doppler_factor := GetProcAddress(LDllHandle, 'ma_sound_get_doppler_factor');
  ma_sound_get_engine := GetProcAddress(LDllHandle, 'ma_sound_get_engine');
  ma_sound_get_length_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_get_length_in_pcm_frames');
  ma_sound_get_listener_index := GetProcAddress(LDllHandle, 'ma_sound_get_listener_index');
  ma_sound_get_max_distance := GetProcAddress(LDllHandle, 'ma_sound_get_max_distance');
  ma_sound_get_max_gain := GetProcAddress(LDllHandle, 'ma_sound_get_max_gain');
  ma_sound_get_min_distance := GetProcAddress(LDllHandle, 'ma_sound_get_min_distance');
  ma_sound_get_min_gain := GetProcAddress(LDllHandle, 'ma_sound_get_min_gain');
  ma_sound_get_pan := GetProcAddress(LDllHandle, 'ma_sound_get_pan');
  ma_sound_get_pan_mode := GetProcAddress(LDllHandle, 'ma_sound_get_pan_mode');
  ma_sound_get_pinned_listener_index := GetProcAddress(LDllHandle, 'ma_sound_get_pinned_listener_index');
  ma_sound_get_pitch := GetProcAddress(LDllHandle, 'ma_sound_get_pitch');
  ma_sound_get_position := GetProcAddress(LDllHandle, 'ma_sound_get_position');
  ma_sound_get_positioning := GetProcAddress(LDllHandle, 'ma_sound_get_positioning');
  ma_sound_get_rolloff := GetProcAddress(LDllHandle, 'ma_sound_get_rolloff');
  ma_sound_get_time_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_get_time_in_pcm_frames');
  ma_sound_get_velocity := GetProcAddress(LDllHandle, 'ma_sound_get_velocity');
  ma_sound_get_volume := GetProcAddress(LDllHandle, 'ma_sound_get_volume');
  ma_sound_group_config_init := GetProcAddress(LDllHandle, 'ma_sound_group_config_init');
  ma_sound_group_get_attenuation_model := GetProcAddress(LDllHandle, 'ma_sound_group_get_attenuation_model');
  ma_sound_group_get_cone := GetProcAddress(LDllHandle, 'ma_sound_group_get_cone');
  ma_sound_group_get_current_fade_volume := GetProcAddress(LDllHandle, 'ma_sound_group_get_current_fade_volume');
  ma_sound_group_get_direction := GetProcAddress(LDllHandle, 'ma_sound_group_get_direction');
  ma_sound_group_get_direction_to_listener := GetProcAddress(LDllHandle, 'ma_sound_group_get_direction_to_listener');
  ma_sound_group_get_directional_attenuation_factor := GetProcAddress(LDllHandle, 'ma_sound_group_get_directional_attenuation_factor');
  ma_sound_group_get_doppler_factor := GetProcAddress(LDllHandle, 'ma_sound_group_get_doppler_factor');
  ma_sound_group_get_engine := GetProcAddress(LDllHandle, 'ma_sound_group_get_engine');
  ma_sound_group_get_listener_index := GetProcAddress(LDllHandle, 'ma_sound_group_get_listener_index');
  ma_sound_group_get_max_distance := GetProcAddress(LDllHandle, 'ma_sound_group_get_max_distance');
  ma_sound_group_get_max_gain := GetProcAddress(LDllHandle, 'ma_sound_group_get_max_gain');
  ma_sound_group_get_min_distance := GetProcAddress(LDllHandle, 'ma_sound_group_get_min_distance');
  ma_sound_group_get_min_gain := GetProcAddress(LDllHandle, 'ma_sound_group_get_min_gain');
  ma_sound_group_get_pan := GetProcAddress(LDllHandle, 'ma_sound_group_get_pan');
  ma_sound_group_get_pan_mode := GetProcAddress(LDllHandle, 'ma_sound_group_get_pan_mode');
  ma_sound_group_get_pinned_listener_index := GetProcAddress(LDllHandle, 'ma_sound_group_get_pinned_listener_index');
  ma_sound_group_get_pitch := GetProcAddress(LDllHandle, 'ma_sound_group_get_pitch');
  ma_sound_group_get_position := GetProcAddress(LDllHandle, 'ma_sound_group_get_position');
  ma_sound_group_get_positioning := GetProcAddress(LDllHandle, 'ma_sound_group_get_positioning');
  ma_sound_group_get_rolloff := GetProcAddress(LDllHandle, 'ma_sound_group_get_rolloff');
  ma_sound_group_get_time_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_group_get_time_in_pcm_frames');
  ma_sound_group_get_velocity := GetProcAddress(LDllHandle, 'ma_sound_group_get_velocity');
  ma_sound_group_get_volume := GetProcAddress(LDllHandle, 'ma_sound_group_get_volume');
  ma_sound_group_init := GetProcAddress(LDllHandle, 'ma_sound_group_init');
  ma_sound_group_init_ex := GetProcAddress(LDllHandle, 'ma_sound_group_init_ex');
  ma_sound_group_is_playing := GetProcAddress(LDllHandle, 'ma_sound_group_is_playing');
  ma_sound_group_is_spatialization_enabled := GetProcAddress(LDllHandle, 'ma_sound_group_is_spatialization_enabled');
  ma_sound_group_set_attenuation_model := GetProcAddress(LDllHandle, 'ma_sound_group_set_attenuation_model');
  ma_sound_group_set_cone := GetProcAddress(LDllHandle, 'ma_sound_group_set_cone');
  ma_sound_group_set_direction := GetProcAddress(LDllHandle, 'ma_sound_group_set_direction');
  ma_sound_group_set_directional_attenuation_factor := GetProcAddress(LDllHandle, 'ma_sound_group_set_directional_attenuation_factor');
  ma_sound_group_set_doppler_factor := GetProcAddress(LDllHandle, 'ma_sound_group_set_doppler_factor');
  ma_sound_group_set_fade_in_milliseconds := GetProcAddress(LDllHandle, 'ma_sound_group_set_fade_in_milliseconds');
  ma_sound_group_set_fade_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_group_set_fade_in_pcm_frames');
  ma_sound_group_set_max_distance := GetProcAddress(LDllHandle, 'ma_sound_group_set_max_distance');
  ma_sound_group_set_max_gain := GetProcAddress(LDllHandle, 'ma_sound_group_set_max_gain');
  ma_sound_group_set_min_distance := GetProcAddress(LDllHandle, 'ma_sound_group_set_min_distance');
  ma_sound_group_set_min_gain := GetProcAddress(LDllHandle, 'ma_sound_group_set_min_gain');
  ma_sound_group_set_pan := GetProcAddress(LDllHandle, 'ma_sound_group_set_pan');
  ma_sound_group_set_pan_mode := GetProcAddress(LDllHandle, 'ma_sound_group_set_pan_mode');
  ma_sound_group_set_pinned_listener_index := GetProcAddress(LDllHandle, 'ma_sound_group_set_pinned_listener_index');
  ma_sound_group_set_pitch := GetProcAddress(LDllHandle, 'ma_sound_group_set_pitch');
  ma_sound_group_set_position := GetProcAddress(LDllHandle, 'ma_sound_group_set_position');
  ma_sound_group_set_positioning := GetProcAddress(LDllHandle, 'ma_sound_group_set_positioning');
  ma_sound_group_set_rolloff := GetProcAddress(LDllHandle, 'ma_sound_group_set_rolloff');
  ma_sound_group_set_spatialization_enabled := GetProcAddress(LDllHandle, 'ma_sound_group_set_spatialization_enabled');
  ma_sound_group_set_start_time_in_milliseconds := GetProcAddress(LDllHandle, 'ma_sound_group_set_start_time_in_milliseconds');
  ma_sound_group_set_start_time_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_group_set_start_time_in_pcm_frames');
  ma_sound_group_set_stop_time_in_milliseconds := GetProcAddress(LDllHandle, 'ma_sound_group_set_stop_time_in_milliseconds');
  ma_sound_group_set_stop_time_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_group_set_stop_time_in_pcm_frames');
  ma_sound_group_set_velocity := GetProcAddress(LDllHandle, 'ma_sound_group_set_velocity');
  ma_sound_group_set_volume := GetProcAddress(LDllHandle, 'ma_sound_group_set_volume');
  ma_sound_group_start := GetProcAddress(LDllHandle, 'ma_sound_group_start');
  ma_sound_group_stop := GetProcAddress(LDllHandle, 'ma_sound_group_stop');
  ma_sound_group_uninit := GetProcAddress(LDllHandle, 'ma_sound_group_uninit');
  ma_sound_init_copy := GetProcAddress(LDllHandle, 'ma_sound_init_copy');
  ma_sound_init_ex := GetProcAddress(LDllHandle, 'ma_sound_init_ex');
  ma_sound_init_from_data_source := GetProcAddress(LDllHandle, 'ma_sound_init_from_data_source');
  ma_sound_init_from_file := GetProcAddress(LDllHandle, 'ma_sound_init_from_file');
  ma_sound_init_from_file_w := GetProcAddress(LDllHandle, 'ma_sound_init_from_file_w');
  ma_sound_is_looping := GetProcAddress(LDllHandle, 'ma_sound_is_looping');
  ma_sound_is_playing := GetProcAddress(LDllHandle, 'ma_sound_is_playing');
  ma_sound_is_spatialization_enabled := GetProcAddress(LDllHandle, 'ma_sound_is_spatialization_enabled');
  ma_sound_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_sound_seek_to_pcm_frame');
  ma_sound_set_attenuation_model := GetProcAddress(LDllHandle, 'ma_sound_set_attenuation_model');
  ma_sound_set_cone := GetProcAddress(LDllHandle, 'ma_sound_set_cone');
  ma_sound_set_direction := GetProcAddress(LDllHandle, 'ma_sound_set_direction');
  ma_sound_set_directional_attenuation_factor := GetProcAddress(LDllHandle, 'ma_sound_set_directional_attenuation_factor');
  ma_sound_set_doppler_factor := GetProcAddress(LDllHandle, 'ma_sound_set_doppler_factor');
  ma_sound_set_fade_in_milliseconds := GetProcAddress(LDllHandle, 'ma_sound_set_fade_in_milliseconds');
  ma_sound_set_fade_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_set_fade_in_pcm_frames');
  ma_sound_set_looping := GetProcAddress(LDllHandle, 'ma_sound_set_looping');
  ma_sound_set_max_distance := GetProcAddress(LDllHandle, 'ma_sound_set_max_distance');
  ma_sound_set_max_gain := GetProcAddress(LDllHandle, 'ma_sound_set_max_gain');
  ma_sound_set_min_distance := GetProcAddress(LDllHandle, 'ma_sound_set_min_distance');
  ma_sound_set_min_gain := GetProcAddress(LDllHandle, 'ma_sound_set_min_gain');
  ma_sound_set_pan := GetProcAddress(LDllHandle, 'ma_sound_set_pan');
  ma_sound_set_pan_mode := GetProcAddress(LDllHandle, 'ma_sound_set_pan_mode');
  ma_sound_set_pinned_listener_index := GetProcAddress(LDllHandle, 'ma_sound_set_pinned_listener_index');
  ma_sound_set_pitch := GetProcAddress(LDllHandle, 'ma_sound_set_pitch');
  ma_sound_set_position := GetProcAddress(LDllHandle, 'ma_sound_set_position');
  ma_sound_set_positioning := GetProcAddress(LDllHandle, 'ma_sound_set_positioning');
  ma_sound_set_rolloff := GetProcAddress(LDllHandle, 'ma_sound_set_rolloff');
  ma_sound_set_spatialization_enabled := GetProcAddress(LDllHandle, 'ma_sound_set_spatialization_enabled');
  ma_sound_set_start_time_in_milliseconds := GetProcAddress(LDllHandle, 'ma_sound_set_start_time_in_milliseconds');
  ma_sound_set_start_time_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_set_start_time_in_pcm_frames');
  ma_sound_set_stop_time_in_milliseconds := GetProcAddress(LDllHandle, 'ma_sound_set_stop_time_in_milliseconds');
  ma_sound_set_stop_time_in_pcm_frames := GetProcAddress(LDllHandle, 'ma_sound_set_stop_time_in_pcm_frames');
  ma_sound_set_velocity := GetProcAddress(LDllHandle, 'ma_sound_set_velocity');
  ma_sound_set_volume := GetProcAddress(LDllHandle, 'ma_sound_set_volume');
  ma_sound_start := GetProcAddress(LDllHandle, 'ma_sound_start');
  ma_sound_stop := GetProcAddress(LDllHandle, 'ma_sound_stop');
  ma_sound_uninit := GetProcAddress(LDllHandle, 'ma_sound_uninit');
  ma_spatializer_config_init := GetProcAddress(LDllHandle, 'ma_spatializer_config_init');
  ma_spatializer_get_attenuation_model := GetProcAddress(LDllHandle, 'ma_spatializer_get_attenuation_model');
  ma_spatializer_get_cone := GetProcAddress(LDllHandle, 'ma_spatializer_get_cone');
  ma_spatializer_get_direction := GetProcAddress(LDllHandle, 'ma_spatializer_get_direction');
  ma_spatializer_get_directional_attenuation_factor := GetProcAddress(LDllHandle, 'ma_spatializer_get_directional_attenuation_factor');
  ma_spatializer_get_doppler_factor := GetProcAddress(LDllHandle, 'ma_spatializer_get_doppler_factor');
  ma_spatializer_get_heap_size := GetProcAddress(LDllHandle, 'ma_spatializer_get_heap_size');
  ma_spatializer_get_input_channels := GetProcAddress(LDllHandle, 'ma_spatializer_get_input_channels');
  ma_spatializer_get_max_distance := GetProcAddress(LDllHandle, 'ma_spatializer_get_max_distance');
  ma_spatializer_get_max_gain := GetProcAddress(LDllHandle, 'ma_spatializer_get_max_gain');
  ma_spatializer_get_min_distance := GetProcAddress(LDllHandle, 'ma_spatializer_get_min_distance');
  ma_spatializer_get_min_gain := GetProcAddress(LDllHandle, 'ma_spatializer_get_min_gain');
  ma_spatializer_get_output_channels := GetProcAddress(LDllHandle, 'ma_spatializer_get_output_channels');
  ma_spatializer_get_position := GetProcAddress(LDllHandle, 'ma_spatializer_get_position');
  ma_spatializer_get_positioning := GetProcAddress(LDllHandle, 'ma_spatializer_get_positioning');
  ma_spatializer_get_relative_position_and_direction := GetProcAddress(LDllHandle, 'ma_spatializer_get_relative_position_and_direction');
  ma_spatializer_get_rolloff := GetProcAddress(LDllHandle, 'ma_spatializer_get_rolloff');
  ma_spatializer_get_velocity := GetProcAddress(LDllHandle, 'ma_spatializer_get_velocity');
  ma_spatializer_init := GetProcAddress(LDllHandle, 'ma_spatializer_init');
  ma_spatializer_init_preallocated := GetProcAddress(LDllHandle, 'ma_spatializer_init_preallocated');
  ma_spatializer_listener_config_init := GetProcAddress(LDllHandle, 'ma_spatializer_listener_config_init');
  ma_spatializer_listener_get_channel_map := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_channel_map');
  ma_spatializer_listener_get_cone := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_cone');
  ma_spatializer_listener_get_direction := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_direction');
  ma_spatializer_listener_get_heap_size := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_heap_size');
  ma_spatializer_listener_get_position := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_position');
  ma_spatializer_listener_get_speed_of_sound := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_speed_of_sound');
  ma_spatializer_listener_get_velocity := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_velocity');
  ma_spatializer_listener_get_world_up := GetProcAddress(LDllHandle, 'ma_spatializer_listener_get_world_up');
  ma_spatializer_listener_init := GetProcAddress(LDllHandle, 'ma_spatializer_listener_init');
  ma_spatializer_listener_init_preallocated := GetProcAddress(LDllHandle, 'ma_spatializer_listener_init_preallocated');
  ma_spatializer_listener_is_enabled := GetProcAddress(LDllHandle, 'ma_spatializer_listener_is_enabled');
  ma_spatializer_listener_set_cone := GetProcAddress(LDllHandle, 'ma_spatializer_listener_set_cone');
  ma_spatializer_listener_set_direction := GetProcAddress(LDllHandle, 'ma_spatializer_listener_set_direction');
  ma_spatializer_listener_set_enabled := GetProcAddress(LDllHandle, 'ma_spatializer_listener_set_enabled');
  ma_spatializer_listener_set_position := GetProcAddress(LDllHandle, 'ma_spatializer_listener_set_position');
  ma_spatializer_listener_set_speed_of_sound := GetProcAddress(LDllHandle, 'ma_spatializer_listener_set_speed_of_sound');
  ma_spatializer_listener_set_velocity := GetProcAddress(LDllHandle, 'ma_spatializer_listener_set_velocity');
  ma_spatializer_listener_set_world_up := GetProcAddress(LDllHandle, 'ma_spatializer_listener_set_world_up');
  ma_spatializer_listener_uninit := GetProcAddress(LDllHandle, 'ma_spatializer_listener_uninit');
  ma_spatializer_process_pcm_frames := GetProcAddress(LDllHandle, 'ma_spatializer_process_pcm_frames');
  ma_spatializer_set_attenuation_model := GetProcAddress(LDllHandle, 'ma_spatializer_set_attenuation_model');
  ma_spatializer_set_cone := GetProcAddress(LDllHandle, 'ma_spatializer_set_cone');
  ma_spatializer_set_direction := GetProcAddress(LDllHandle, 'ma_spatializer_set_direction');
  ma_spatializer_set_directional_attenuation_factor := GetProcAddress(LDllHandle, 'ma_spatializer_set_directional_attenuation_factor');
  ma_spatializer_set_doppler_factor := GetProcAddress(LDllHandle, 'ma_spatializer_set_doppler_factor');
  ma_spatializer_set_max_distance := GetProcAddress(LDllHandle, 'ma_spatializer_set_max_distance');
  ma_spatializer_set_max_gain := GetProcAddress(LDllHandle, 'ma_spatializer_set_max_gain');
  ma_spatializer_set_min_distance := GetProcAddress(LDllHandle, 'ma_spatializer_set_min_distance');
  ma_spatializer_set_min_gain := GetProcAddress(LDllHandle, 'ma_spatializer_set_min_gain');
  ma_spatializer_set_position := GetProcAddress(LDllHandle, 'ma_spatializer_set_position');
  ma_spatializer_set_positioning := GetProcAddress(LDllHandle, 'ma_spatializer_set_positioning');
  ma_spatializer_set_rolloff := GetProcAddress(LDllHandle, 'ma_spatializer_set_rolloff');
  ma_spatializer_set_velocity := GetProcAddress(LDllHandle, 'ma_spatializer_set_velocity');
  ma_spatializer_uninit := GetProcAddress(LDllHandle, 'ma_spatializer_uninit');
  ma_spinlock_lock := GetProcAddress(LDllHandle, 'ma_spinlock_lock');
  ma_spinlock_lock_noyield := GetProcAddress(LDllHandle, 'ma_spinlock_lock_noyield');
  ma_spinlock_unlock := GetProcAddress(LDllHandle, 'ma_spinlock_unlock');
  ma_splitter_node_config_init := GetProcAddress(LDllHandle, 'ma_splitter_node_config_init');
  ma_splitter_node_init := GetProcAddress(LDllHandle, 'ma_splitter_node_init');
  ma_splitter_node_uninit := GetProcAddress(LDllHandle, 'ma_splitter_node_uninit');
  ma_version := GetProcAddress(LDllHandle, 'ma_version');
  ma_version_string := GetProcAddress(LDllHandle, 'ma_version_string');
  ma_vfs_close := GetProcAddress(LDllHandle, 'ma_vfs_close');
  ma_vfs_info := GetProcAddress(LDllHandle, 'ma_vfs_info');
  ma_vfs_open := GetProcAddress(LDllHandle, 'ma_vfs_open');
  ma_vfs_open_and_read_file := GetProcAddress(LDllHandle, 'ma_vfs_open_and_read_file');
  ma_vfs_open_w := GetProcAddress(LDllHandle, 'ma_vfs_open_w');
  ma_vfs_read := GetProcAddress(LDllHandle, 'ma_vfs_read');
  ma_vfs_seek := GetProcAddress(LDllHandle, 'ma_vfs_seek');
  ma_vfs_tell := GetProcAddress(LDllHandle, 'ma_vfs_tell');
  ma_vfs_write := GetProcAddress(LDllHandle, 'ma_vfs_write');
  ma_volume_db_to_linear := GetProcAddress(LDllHandle, 'ma_volume_db_to_linear');
  ma_volume_linear_to_db := GetProcAddress(LDllHandle, 'ma_volume_linear_to_db');
  ma_waveform_config_init := GetProcAddress(LDllHandle, 'ma_waveform_config_init');
  ma_waveform_init := GetProcAddress(LDllHandle, 'ma_waveform_init');
  ma_waveform_read_pcm_frames := GetProcAddress(LDllHandle, 'ma_waveform_read_pcm_frames');
  ma_waveform_seek_to_pcm_frame := GetProcAddress(LDllHandle, 'ma_waveform_seek_to_pcm_frame');
  ma_waveform_set_amplitude := GetProcAddress(LDllHandle, 'ma_waveform_set_amplitude');
  ma_waveform_set_frequency := GetProcAddress(LDllHandle, 'ma_waveform_set_frequency');
  ma_waveform_set_sample_rate := GetProcAddress(LDllHandle, 'ma_waveform_set_sample_rate');
  ma_waveform_set_type := GetProcAddress(LDllHandle, 'ma_waveform_set_type');
  ma_waveform_uninit := GetProcAddress(LDllHandle, 'ma_waveform_uninit');
  nk__begin := GetProcAddress(LDllHandle, 'nk__begin');
  nk__next := GetProcAddress(LDllHandle, 'nk__next');
  nk_begin := GetProcAddress(LDllHandle, 'nk_begin');
  nk_begin_titled := GetProcAddress(LDllHandle, 'nk_begin_titled');
  nk_buffer_clear := GetProcAddress(LDllHandle, 'nk_buffer_clear');
  nk_buffer_free := GetProcAddress(LDllHandle, 'nk_buffer_free');
  nk_buffer_info := GetProcAddress(LDllHandle, 'nk_buffer_info');
  nk_buffer_init := GetProcAddress(LDllHandle, 'nk_buffer_init');
  nk_buffer_init_default := GetProcAddress(LDllHandle, 'nk_buffer_init_default');
  nk_buffer_init_fixed := GetProcAddress(LDllHandle, 'nk_buffer_init_fixed');
  nk_buffer_mark := GetProcAddress(LDllHandle, 'nk_buffer_mark');
  nk_buffer_memory := GetProcAddress(LDllHandle, 'nk_buffer_memory');
  nk_buffer_memory_const := GetProcAddress(LDllHandle, 'nk_buffer_memory_const');
  nk_buffer_push := GetProcAddress(LDllHandle, 'nk_buffer_push');
  nk_buffer_reset := GetProcAddress(LDllHandle, 'nk_buffer_reset');
  nk_buffer_total := GetProcAddress(LDllHandle, 'nk_buffer_total');
  nk_button_color := GetProcAddress(LDllHandle, 'nk_button_color');
  nk_button_image := GetProcAddress(LDllHandle, 'nk_button_image');
  nk_button_image_label := GetProcAddress(LDllHandle, 'nk_button_image_label');
  nk_button_image_label_styled := GetProcAddress(LDllHandle, 'nk_button_image_label_styled');
  nk_button_image_styled := GetProcAddress(LDllHandle, 'nk_button_image_styled');
  nk_button_image_text := GetProcAddress(LDllHandle, 'nk_button_image_text');
  nk_button_image_text_styled := GetProcAddress(LDllHandle, 'nk_button_image_text_styled');
  nk_button_label := GetProcAddress(LDllHandle, 'nk_button_label');
  nk_button_label_styled := GetProcAddress(LDllHandle, 'nk_button_label_styled');
  nk_button_pop_behavior := GetProcAddress(LDllHandle, 'nk_button_pop_behavior');
  nk_button_push_behavior := GetProcAddress(LDllHandle, 'nk_button_push_behavior');
  nk_button_set_behavior := GetProcAddress(LDllHandle, 'nk_button_set_behavior');
  nk_button_symbol := GetProcAddress(LDllHandle, 'nk_button_symbol');
  nk_button_symbol_label := GetProcAddress(LDllHandle, 'nk_button_symbol_label');
  nk_button_symbol_label_styled := GetProcAddress(LDllHandle, 'nk_button_symbol_label_styled');
  nk_button_symbol_styled := GetProcAddress(LDllHandle, 'nk_button_symbol_styled');
  nk_button_symbol_text := GetProcAddress(LDllHandle, 'nk_button_symbol_text');
  nk_button_symbol_text_styled := GetProcAddress(LDllHandle, 'nk_button_symbol_text_styled');
  nk_button_text := GetProcAddress(LDllHandle, 'nk_button_text');
  nk_button_text_styled := GetProcAddress(LDllHandle, 'nk_button_text_styled');
  nk_chart_add_slot := GetProcAddress(LDllHandle, 'nk_chart_add_slot');
  nk_chart_add_slot_colored := GetProcAddress(LDllHandle, 'nk_chart_add_slot_colored');
  nk_chart_begin := GetProcAddress(LDllHandle, 'nk_chart_begin');
  nk_chart_begin_colored := GetProcAddress(LDllHandle, 'nk_chart_begin_colored');
  nk_chart_end := GetProcAddress(LDllHandle, 'nk_chart_end');
  nk_chart_push := GetProcAddress(LDllHandle, 'nk_chart_push');
  nk_chart_push_slot := GetProcAddress(LDllHandle, 'nk_chart_push_slot');
  nk_check_flags_label := GetProcAddress(LDllHandle, 'nk_check_flags_label');
  nk_check_flags_text := GetProcAddress(LDllHandle, 'nk_check_flags_text');
  nk_check_label := GetProcAddress(LDllHandle, 'nk_check_label');
  nk_check_text := GetProcAddress(LDllHandle, 'nk_check_text');
  nk_checkbox_flags_label := GetProcAddress(LDllHandle, 'nk_checkbox_flags_label');
  nk_checkbox_flags_text := GetProcAddress(LDllHandle, 'nk_checkbox_flags_text');
  nk_checkbox_label := GetProcAddress(LDllHandle, 'nk_checkbox_label');
  nk_checkbox_text := GetProcAddress(LDllHandle, 'nk_checkbox_text');
  nk_clear := GetProcAddress(LDllHandle, 'nk_clear');
  nk_color_cf := GetProcAddress(LDllHandle, 'nk_color_cf');
  nk_color_d := GetProcAddress(LDllHandle, 'nk_color_d');
  nk_color_dv := GetProcAddress(LDllHandle, 'nk_color_dv');
  nk_color_f := GetProcAddress(LDllHandle, 'nk_color_f');
  nk_color_fv := GetProcAddress(LDllHandle, 'nk_color_fv');
  nk_color_hex_rgb := GetProcAddress(LDllHandle, 'nk_color_hex_rgb');
  nk_color_hex_rgba := GetProcAddress(LDllHandle, 'nk_color_hex_rgba');
  nk_color_hsv_b := GetProcAddress(LDllHandle, 'nk_color_hsv_b');
  nk_color_hsv_bv := GetProcAddress(LDllHandle, 'nk_color_hsv_bv');
  nk_color_hsv_f := GetProcAddress(LDllHandle, 'nk_color_hsv_f');
  nk_color_hsv_fv := GetProcAddress(LDllHandle, 'nk_color_hsv_fv');
  nk_color_hsv_i := GetProcAddress(LDllHandle, 'nk_color_hsv_i');
  nk_color_hsv_iv := GetProcAddress(LDllHandle, 'nk_color_hsv_iv');
  nk_color_hsva_b := GetProcAddress(LDllHandle, 'nk_color_hsva_b');
  nk_color_hsva_bv := GetProcAddress(LDllHandle, 'nk_color_hsva_bv');
  nk_color_hsva_f := GetProcAddress(LDllHandle, 'nk_color_hsva_f');
  nk_color_hsva_fv := GetProcAddress(LDllHandle, 'nk_color_hsva_fv');
  nk_color_hsva_i := GetProcAddress(LDllHandle, 'nk_color_hsva_i');
  nk_color_hsva_iv := GetProcAddress(LDllHandle, 'nk_color_hsva_iv');
  nk_color_pick := GetProcAddress(LDllHandle, 'nk_color_pick');
  nk_color_picker := GetProcAddress(LDllHandle, 'nk_color_picker');
  nk_color_u32 := GetProcAddress(LDllHandle, 'nk_color_u32');
  nk_colorf_hsva_f := GetProcAddress(LDllHandle, 'nk_colorf_hsva_f');
  nk_colorf_hsva_fv := GetProcAddress(LDllHandle, 'nk_colorf_hsva_fv');
  nk_combo := GetProcAddress(LDllHandle, 'nk_combo');
  nk_combo_begin_color := GetProcAddress(LDllHandle, 'nk_combo_begin_color');
  nk_combo_begin_image := GetProcAddress(LDllHandle, 'nk_combo_begin_image');
  nk_combo_begin_image_label := GetProcAddress(LDllHandle, 'nk_combo_begin_image_label');
  nk_combo_begin_image_text := GetProcAddress(LDllHandle, 'nk_combo_begin_image_text');
  nk_combo_begin_label := GetProcAddress(LDllHandle, 'nk_combo_begin_label');
  nk_combo_begin_symbol := GetProcAddress(LDllHandle, 'nk_combo_begin_symbol');
  nk_combo_begin_symbol_label := GetProcAddress(LDllHandle, 'nk_combo_begin_symbol_label');
  nk_combo_begin_symbol_text := GetProcAddress(LDllHandle, 'nk_combo_begin_symbol_text');
  nk_combo_begin_text := GetProcAddress(LDllHandle, 'nk_combo_begin_text');
  nk_combo_callback := GetProcAddress(LDllHandle, 'nk_combo_callback');
  nk_combo_close := GetProcAddress(LDllHandle, 'nk_combo_close');
  nk_combo_end := GetProcAddress(LDllHandle, 'nk_combo_end');
  nk_combo_item_image_label := GetProcAddress(LDllHandle, 'nk_combo_item_image_label');
  nk_combo_item_image_text := GetProcAddress(LDllHandle, 'nk_combo_item_image_text');
  nk_combo_item_label := GetProcAddress(LDllHandle, 'nk_combo_item_label');
  nk_combo_item_symbol_label := GetProcAddress(LDllHandle, 'nk_combo_item_symbol_label');
  nk_combo_item_symbol_text := GetProcAddress(LDllHandle, 'nk_combo_item_symbol_text');
  nk_combo_item_text := GetProcAddress(LDllHandle, 'nk_combo_item_text');
  nk_combo_separator := GetProcAddress(LDllHandle, 'nk_combo_separator');
  nk_combo_string := GetProcAddress(LDllHandle, 'nk_combo_string');
  nk_combobox := GetProcAddress(LDllHandle, 'nk_combobox');
  nk_combobox_callback := GetProcAddress(LDllHandle, 'nk_combobox_callback');
  nk_combobox_separator := GetProcAddress(LDllHandle, 'nk_combobox_separator');
  nk_combobox_string := GetProcAddress(LDllHandle, 'nk_combobox_string');
  nk_contextual_begin := GetProcAddress(LDllHandle, 'nk_contextual_begin');
  nk_contextual_close := GetProcAddress(LDllHandle, 'nk_contextual_close');
  nk_contextual_end := GetProcAddress(LDllHandle, 'nk_contextual_end');
  nk_contextual_item_image_label := GetProcAddress(LDllHandle, 'nk_contextual_item_image_label');
  nk_contextual_item_image_text := GetProcAddress(LDllHandle, 'nk_contextual_item_image_text');
  nk_contextual_item_label := GetProcAddress(LDllHandle, 'nk_contextual_item_label');
  nk_contextual_item_symbol_label := GetProcAddress(LDllHandle, 'nk_contextual_item_symbol_label');
  nk_contextual_item_symbol_text := GetProcAddress(LDllHandle, 'nk_contextual_item_symbol_text');
  nk_contextual_item_text := GetProcAddress(LDllHandle, 'nk_contextual_item_text');
  nk_draw_image := GetProcAddress(LDllHandle, 'nk_draw_image');
  nk_draw_nine_slice := GetProcAddress(LDllHandle, 'nk_draw_nine_slice');
  nk_draw_text := GetProcAddress(LDllHandle, 'nk_draw_text');
  nk_edit_buffer := GetProcAddress(LDllHandle, 'nk_edit_buffer');
  nk_edit_focus := GetProcAddress(LDllHandle, 'nk_edit_focus');
  nk_edit_string := GetProcAddress(LDllHandle, 'nk_edit_string');
  nk_edit_string_zero_terminated := GetProcAddress(LDllHandle, 'nk_edit_string_zero_terminated');
  nk_edit_unfocus := GetProcAddress(LDllHandle, 'nk_edit_unfocus');
  nk_end := GetProcAddress(LDllHandle, 'nk_end');
  nk_fill_arc := GetProcAddress(LDllHandle, 'nk_fill_arc');
  nk_fill_circle := GetProcAddress(LDllHandle, 'nk_fill_circle');
  nk_fill_polygon := GetProcAddress(LDllHandle, 'nk_fill_polygon');
  nk_fill_rect := GetProcAddress(LDllHandle, 'nk_fill_rect');
  nk_fill_rect_multi_color := GetProcAddress(LDllHandle, 'nk_fill_rect_multi_color');
  nk_fill_triangle := GetProcAddress(LDllHandle, 'nk_fill_triangle');
  nk_filter_ascii := GetProcAddress(LDllHandle, 'nk_filter_ascii');
  nk_filter_binary := GetProcAddress(LDllHandle, 'nk_filter_binary');
  nk_filter_decimal := GetProcAddress(LDllHandle, 'nk_filter_decimal');
  nk_filter_default := GetProcAddress(LDllHandle, 'nk_filter_default');
  nk_filter_float := GetProcAddress(LDllHandle, 'nk_filter_float');
  nk_filter_hex := GetProcAddress(LDllHandle, 'nk_filter_hex');
  nk_filter_oct := GetProcAddress(LDllHandle, 'nk_filter_oct');
  nk_font_atlas_add := GetProcAddress(LDllHandle, 'nk_font_atlas_add');
  nk_font_atlas_add_compressed := GetProcAddress(LDllHandle, 'nk_font_atlas_add_compressed');
  nk_font_atlas_add_compressed_base85 := GetProcAddress(LDllHandle, 'nk_font_atlas_add_compressed_base85');
  nk_font_atlas_add_default := GetProcAddress(LDllHandle, 'nk_font_atlas_add_default');
  nk_font_atlas_add_from_file := GetProcAddress(LDllHandle, 'nk_font_atlas_add_from_file');
  nk_font_atlas_add_from_memory := GetProcAddress(LDllHandle, 'nk_font_atlas_add_from_memory');
  nk_font_atlas_bake := GetProcAddress(LDllHandle, 'nk_font_atlas_bake');
  nk_font_atlas_begin := GetProcAddress(LDllHandle, 'nk_font_atlas_begin');
  nk_font_atlas_cleanup := GetProcAddress(LDllHandle, 'nk_font_atlas_cleanup');
  nk_font_atlas_clear := GetProcAddress(LDllHandle, 'nk_font_atlas_clear');
  nk_font_atlas_end := GetProcAddress(LDllHandle, 'nk_font_atlas_end');
  nk_font_atlas_init := GetProcAddress(LDllHandle, 'nk_font_atlas_init');
  nk_font_atlas_init_custom := GetProcAddress(LDllHandle, 'nk_font_atlas_init_custom');
  nk_font_atlas_init_default := GetProcAddress(LDllHandle, 'nk_font_atlas_init_default');
  nk_font_chinese_glyph_ranges := GetProcAddress(LDllHandle, 'nk_font_chinese_glyph_ranges');
  nk_font_config_ := GetProcAddress(LDllHandle, 'nk_font_config');
  nk_font_cyrillic_glyph_ranges := GetProcAddress(LDllHandle, 'nk_font_cyrillic_glyph_ranges');
  nk_font_default_glyph_ranges := GetProcAddress(LDllHandle, 'nk_font_default_glyph_ranges');
  nk_font_find_glyph := GetProcAddress(LDllHandle, 'nk_font_find_glyph');
  nk_font_korean_glyph_ranges := GetProcAddress(LDllHandle, 'nk_font_korean_glyph_ranges');
  nk_free := GetProcAddress(LDllHandle, 'nk_free');
  nk_get_null_rect := GetProcAddress(LDllHandle, 'nk_get_null_rect');
  nk_group_begin := GetProcAddress(LDllHandle, 'nk_group_begin');
  nk_group_begin_titled := GetProcAddress(LDllHandle, 'nk_group_begin_titled');
  nk_group_end := GetProcAddress(LDllHandle, 'nk_group_end');
  nk_group_get_scroll := GetProcAddress(LDllHandle, 'nk_group_get_scroll');
  nk_group_scrolled_begin := GetProcAddress(LDllHandle, 'nk_group_scrolled_begin');
  nk_group_scrolled_end := GetProcAddress(LDllHandle, 'nk_group_scrolled_end');
  nk_group_scrolled_offset_begin := GetProcAddress(LDllHandle, 'nk_group_scrolled_offset_begin');
  nk_group_set_scroll := GetProcAddress(LDllHandle, 'nk_group_set_scroll');
  nk_handle_id := GetProcAddress(LDllHandle, 'nk_handle_id');
  nk_handle_ptr := GetProcAddress(LDllHandle, 'nk_handle_ptr');
  nk_hsv := GetProcAddress(LDllHandle, 'nk_hsv');
  nk_hsv_bv := GetProcAddress(LDllHandle, 'nk_hsv_bv');
  nk_hsv_f := GetProcAddress(LDllHandle, 'nk_hsv_f');
  nk_hsv_fv := GetProcAddress(LDllHandle, 'nk_hsv_fv');
  nk_hsv_iv := GetProcAddress(LDllHandle, 'nk_hsv_iv');
  nk_hsva := GetProcAddress(LDllHandle, 'nk_hsva');
  nk_hsva_bv := GetProcAddress(LDllHandle, 'nk_hsva_bv');
  nk_hsva_colorf := GetProcAddress(LDllHandle, 'nk_hsva_colorf');
  nk_hsva_colorfv := GetProcAddress(LDllHandle, 'nk_hsva_colorfv');
  nk_hsva_f := GetProcAddress(LDllHandle, 'nk_hsva_f');
  nk_hsva_fv := GetProcAddress(LDllHandle, 'nk_hsva_fv');
  nk_hsva_iv := GetProcAddress(LDllHandle, 'nk_hsva_iv');
  nk_image_ := GetProcAddress(LDllHandle, 'nk_image');
  nk_image_color_ := GetProcAddress(LDllHandle, 'nk_image_color');
  nk_image_handle_ := GetProcAddress(LDllHandle, 'nk_image_handle');
  nk_image_id := GetProcAddress(LDllHandle, 'nk_image_id');
  nk_image_is_subimage := GetProcAddress(LDllHandle, 'nk_image_is_subimage');
  nk_image_ptr := GetProcAddress(LDllHandle, 'nk_image_ptr');
  nk_init := GetProcAddress(LDllHandle, 'nk_init');
  nk_init_custom := GetProcAddress(LDllHandle, 'nk_init_custom');
  nk_init_default := GetProcAddress(LDllHandle, 'nk_init_default');
  nk_init_fixed := GetProcAddress(LDllHandle, 'nk_init_fixed');
  nk_input_any_mouse_click_in_rect := GetProcAddress(LDllHandle, 'nk_input_any_mouse_click_in_rect');
  nk_input_begin := GetProcAddress(LDllHandle, 'nk_input_begin');
  nk_input_button := GetProcAddress(LDllHandle, 'nk_input_button');
  nk_input_char := GetProcAddress(LDllHandle, 'nk_input_char');
  nk_input_end := GetProcAddress(LDllHandle, 'nk_input_end');
  nk_input_glyph := GetProcAddress(LDllHandle, 'nk_input_glyph');
  nk_input_has_mouse_click := GetProcAddress(LDllHandle, 'nk_input_has_mouse_click');
  nk_input_has_mouse_click_down_in_rect := GetProcAddress(LDllHandle, 'nk_input_has_mouse_click_down_in_rect');
  nk_input_has_mouse_click_in_rect := GetProcAddress(LDllHandle, 'nk_input_has_mouse_click_in_rect');
  nk_input_is_key_down := GetProcAddress(LDllHandle, 'nk_input_is_key_down');
  nk_input_is_key_pressed := GetProcAddress(LDllHandle, 'nk_input_is_key_pressed');
  nk_input_is_key_released := GetProcAddress(LDllHandle, 'nk_input_is_key_released');
  nk_input_is_mouse_click_down_in_rect := GetProcAddress(LDllHandle, 'nk_input_is_mouse_click_down_in_rect');
  nk_input_is_mouse_click_in_rect := GetProcAddress(LDllHandle, 'nk_input_is_mouse_click_in_rect');
  nk_input_is_mouse_down := GetProcAddress(LDllHandle, 'nk_input_is_mouse_down');
  nk_input_is_mouse_hovering_rect := GetProcAddress(LDllHandle, 'nk_input_is_mouse_hovering_rect');
  nk_input_is_mouse_pressed := GetProcAddress(LDllHandle, 'nk_input_is_mouse_pressed');
  nk_input_is_mouse_prev_hovering_rect := GetProcAddress(LDllHandle, 'nk_input_is_mouse_prev_hovering_rect');
  nk_input_is_mouse_released := GetProcAddress(LDllHandle, 'nk_input_is_mouse_released');
  nk_input_key := GetProcAddress(LDllHandle, 'nk_input_key');
  nk_input_motion := GetProcAddress(LDllHandle, 'nk_input_motion');
  nk_input_mouse_clicked := GetProcAddress(LDllHandle, 'nk_input_mouse_clicked');
  nk_input_scroll := GetProcAddress(LDllHandle, 'nk_input_scroll');
  nk_input_unicode := GetProcAddress(LDllHandle, 'nk_input_unicode');
  nk_item_is_any_active := GetProcAddress(LDllHandle, 'nk_item_is_any_active');
  nk_label := GetProcAddress(LDllHandle, 'nk_label');
  nk_label_colored := GetProcAddress(LDllHandle, 'nk_label_colored');
  nk_label_colored_wrap := GetProcAddress(LDllHandle, 'nk_label_colored_wrap');
  nk_label_wrap := GetProcAddress(LDllHandle, 'nk_label_wrap');
  nk_labelf := GetProcAddress(LDllHandle, 'nk_labelf');
  nk_labelf_colored := GetProcAddress(LDllHandle, 'nk_labelf_colored');
  nk_labelf_colored_wrap := GetProcAddress(LDllHandle, 'nk_labelf_colored_wrap');
  nk_labelf_wrap := GetProcAddress(LDllHandle, 'nk_labelf_wrap');
  nk_labelfv := GetProcAddress(LDllHandle, 'nk_labelfv');
  nk_labelfv_colored := GetProcAddress(LDllHandle, 'nk_labelfv_colored');
  nk_labelfv_colored_wrap := GetProcAddress(LDllHandle, 'nk_labelfv_colored_wrap');
  nk_labelfv_wrap := GetProcAddress(LDllHandle, 'nk_labelfv_wrap');
  nk_layout_ratio_from_pixel := GetProcAddress(LDllHandle, 'nk_layout_ratio_from_pixel');
  nk_layout_reset_min_row_height := GetProcAddress(LDllHandle, 'nk_layout_reset_min_row_height');
  nk_layout_row := GetProcAddress(LDllHandle, 'nk_layout_row');
  nk_layout_row_begin := GetProcAddress(LDllHandle, 'nk_layout_row_begin');
  nk_layout_row_dynamic := GetProcAddress(LDllHandle, 'nk_layout_row_dynamic');
  nk_layout_row_end := GetProcAddress(LDllHandle, 'nk_layout_row_end');
  nk_layout_row_push := GetProcAddress(LDllHandle, 'nk_layout_row_push');
  nk_layout_row_static := GetProcAddress(LDllHandle, 'nk_layout_row_static');
  nk_layout_row_template_begin := GetProcAddress(LDllHandle, 'nk_layout_row_template_begin');
  nk_layout_row_template_end := GetProcAddress(LDllHandle, 'nk_layout_row_template_end');
  nk_layout_row_template_push_dynamic := GetProcAddress(LDllHandle, 'nk_layout_row_template_push_dynamic');
  nk_layout_row_template_push_static := GetProcAddress(LDllHandle, 'nk_layout_row_template_push_static');
  nk_layout_row_template_push_variable := GetProcAddress(LDllHandle, 'nk_layout_row_template_push_variable');
  nk_layout_set_min_row_height := GetProcAddress(LDllHandle, 'nk_layout_set_min_row_height');
  nk_layout_space_begin := GetProcAddress(LDllHandle, 'nk_layout_space_begin');
  nk_layout_space_bounds := GetProcAddress(LDllHandle, 'nk_layout_space_bounds');
  nk_layout_space_end := GetProcAddress(LDllHandle, 'nk_layout_space_end');
  nk_layout_space_push := GetProcAddress(LDllHandle, 'nk_layout_space_push');
  nk_layout_space_rect_to_local := GetProcAddress(LDllHandle, 'nk_layout_space_rect_to_local');
  nk_layout_space_rect_to_screen := GetProcAddress(LDllHandle, 'nk_layout_space_rect_to_screen');
  nk_layout_space_to_local := GetProcAddress(LDllHandle, 'nk_layout_space_to_local');
  nk_layout_space_to_screen := GetProcAddress(LDllHandle, 'nk_layout_space_to_screen');
  nk_layout_widget_bounds := GetProcAddress(LDllHandle, 'nk_layout_widget_bounds');
  nk_list_view_begin := GetProcAddress(LDllHandle, 'nk_list_view_begin');
  nk_list_view_end := GetProcAddress(LDllHandle, 'nk_list_view_end');
  nk_menu_begin_image := GetProcAddress(LDllHandle, 'nk_menu_begin_image');
  nk_menu_begin_image_label := GetProcAddress(LDllHandle, 'nk_menu_begin_image_label');
  nk_menu_begin_image_text := GetProcAddress(LDllHandle, 'nk_menu_begin_image_text');
  nk_menu_begin_label := GetProcAddress(LDllHandle, 'nk_menu_begin_label');
  nk_menu_begin_symbol := GetProcAddress(LDllHandle, 'nk_menu_begin_symbol');
  nk_menu_begin_symbol_label := GetProcAddress(LDllHandle, 'nk_menu_begin_symbol_label');
  nk_menu_begin_symbol_text := GetProcAddress(LDllHandle, 'nk_menu_begin_symbol_text');
  nk_menu_begin_text := GetProcAddress(LDllHandle, 'nk_menu_begin_text');
  nk_menu_close := GetProcAddress(LDllHandle, 'nk_menu_close');
  nk_menu_end := GetProcAddress(LDllHandle, 'nk_menu_end');
  nk_menu_item_image_label := GetProcAddress(LDllHandle, 'nk_menu_item_image_label');
  nk_menu_item_image_text := GetProcAddress(LDllHandle, 'nk_menu_item_image_text');
  nk_menu_item_label := GetProcAddress(LDllHandle, 'nk_menu_item_label');
  nk_menu_item_symbol_label := GetProcAddress(LDllHandle, 'nk_menu_item_symbol_label');
  nk_menu_item_symbol_text := GetProcAddress(LDllHandle, 'nk_menu_item_symbol_text');
  nk_menu_item_text := GetProcAddress(LDllHandle, 'nk_menu_item_text');
  nk_menubar_begin := GetProcAddress(LDllHandle, 'nk_menubar_begin');
  nk_menubar_end := GetProcAddress(LDllHandle, 'nk_menubar_end');
  nk_murmur_hash := GetProcAddress(LDllHandle, 'nk_murmur_hash');
  nk_nine_slice_handle := GetProcAddress(LDllHandle, 'nk_nine_slice_handle');
  nk_nine_slice_id := GetProcAddress(LDllHandle, 'nk_nine_slice_id');
  nk_nine_slice_is_sub9slice := GetProcAddress(LDllHandle, 'nk_nine_slice_is_sub9slice');
  nk_nine_slice_ptr := GetProcAddress(LDllHandle, 'nk_nine_slice_ptr');
  nk_option_label := GetProcAddress(LDllHandle, 'nk_option_label');
  nk_option_text := GetProcAddress(LDllHandle, 'nk_option_text');
  nk_plot := GetProcAddress(LDllHandle, 'nk_plot');
  nk_plot_function := GetProcAddress(LDllHandle, 'nk_plot_function');
  nk_popup_begin := GetProcAddress(LDllHandle, 'nk_popup_begin');
  nk_popup_close := GetProcAddress(LDllHandle, 'nk_popup_close');
  nk_popup_end := GetProcAddress(LDllHandle, 'nk_popup_end');
  nk_popup_get_scroll := GetProcAddress(LDllHandle, 'nk_popup_get_scroll');
  nk_popup_set_scroll := GetProcAddress(LDllHandle, 'nk_popup_set_scroll');
  nk_prog := GetProcAddress(LDllHandle, 'nk_prog');
  nk_progress := GetProcAddress(LDllHandle, 'nk_progress');
  nk_property_double := GetProcAddress(LDllHandle, 'nk_property_double');
  nk_property_float := GetProcAddress(LDllHandle, 'nk_property_float');
  nk_property_int := GetProcAddress(LDllHandle, 'nk_property_int');
  nk_propertyd := GetProcAddress(LDllHandle, 'nk_propertyd');
  nk_propertyf := GetProcAddress(LDllHandle, 'nk_propertyf');
  nk_propertyi := GetProcAddress(LDllHandle, 'nk_propertyi');
  nk_push_custom := GetProcAddress(LDllHandle, 'nk_push_custom');
  nk_push_scissor := GetProcAddress(LDllHandle, 'nk_push_scissor');
  nk_radio_label := GetProcAddress(LDllHandle, 'nk_radio_label');
  nk_radio_text := GetProcAddress(LDllHandle, 'nk_radio_text');
  nk_rect_ := GetProcAddress(LDllHandle, 'nk_rect');
  nk_rect_pos := GetProcAddress(LDllHandle, 'nk_rect_pos');
  nk_rect_size := GetProcAddress(LDllHandle, 'nk_rect_size');
  nk_recta := GetProcAddress(LDllHandle, 'nk_recta');
  nk_recti_ := GetProcAddress(LDllHandle, 'nk_recti');
  nk_rectiv := GetProcAddress(LDllHandle, 'nk_rectiv');
  nk_rectv := GetProcAddress(LDllHandle, 'nk_rectv');
  nk_rgb_ := GetProcAddress(LDllHandle, 'nk_rgb');
  nk_rgb_bv := GetProcAddress(LDllHandle, 'nk_rgb_bv');
  nk_rgb_cf := GetProcAddress(LDllHandle, 'nk_rgb_cf');
  nk_rgb_f := GetProcAddress(LDllHandle, 'nk_rgb_f');
  nk_rgb_fv := GetProcAddress(LDllHandle, 'nk_rgb_fv');
  nk_rgb_hex := GetProcAddress(LDllHandle, 'nk_rgb_hex');
  nk_rgb_iv := GetProcAddress(LDllHandle, 'nk_rgb_iv');
  nk_rgba_ := GetProcAddress(LDllHandle, 'nk_rgba');
  nk_rgba_bv := GetProcAddress(LDllHandle, 'nk_rgba_bv');
  nk_rgba_cf := GetProcAddress(LDllHandle, 'nk_rgba_cf');
  nk_rgba_f := GetProcAddress(LDllHandle, 'nk_rgba_f');
  nk_rgba_fv := GetProcAddress(LDllHandle, 'nk_rgba_fv');
  nk_rgba_hex := GetProcAddress(LDllHandle, 'nk_rgba_hex');
  nk_rgba_iv := GetProcAddress(LDllHandle, 'nk_rgba_iv');
  nk_rgba_u32 := GetProcAddress(LDllHandle, 'nk_rgba_u32');
  nk_sdl_handle_event := GetProcAddress(LDllHandle, 'nk_sdl_handle_event');
  nk_sdlsurface_init := GetProcAddress(LDllHandle, 'nk_sdlsurface_init');
  nk_sdlsurface_render := GetProcAddress(LDllHandle, 'nk_sdlsurface_render');
  nk_sdlsurface_shutdown := GetProcAddress(LDllHandle, 'nk_sdlsurface_shutdown');
  nk_select_image_label := GetProcAddress(LDllHandle, 'nk_select_image_label');
  nk_select_image_text := GetProcAddress(LDllHandle, 'nk_select_image_text');
  nk_select_label := GetProcAddress(LDllHandle, 'nk_select_label');
  nk_select_symbol_label := GetProcAddress(LDllHandle, 'nk_select_symbol_label');
  nk_select_symbol_text := GetProcAddress(LDllHandle, 'nk_select_symbol_text');
  nk_select_text := GetProcAddress(LDllHandle, 'nk_select_text');
  nk_selectable_image_label := GetProcAddress(LDllHandle, 'nk_selectable_image_label');
  nk_selectable_image_text := GetProcAddress(LDllHandle, 'nk_selectable_image_text');
  nk_selectable_label := GetProcAddress(LDllHandle, 'nk_selectable_label');
  nk_selectable_symbol_label := GetProcAddress(LDllHandle, 'nk_selectable_symbol_label');
  nk_selectable_symbol_text := GetProcAddress(LDllHandle, 'nk_selectable_symbol_text');
  nk_selectable_text := GetProcAddress(LDllHandle, 'nk_selectable_text');
  nk_slide_float := GetProcAddress(LDllHandle, 'nk_slide_float');
  nk_slide_int := GetProcAddress(LDllHandle, 'nk_slide_int');
  nk_slider_float := GetProcAddress(LDllHandle, 'nk_slider_float');
  nk_slider_int := GetProcAddress(LDllHandle, 'nk_slider_int');
  nk_spacer := GetProcAddress(LDllHandle, 'nk_spacer');
  nk_spacing := GetProcAddress(LDllHandle, 'nk_spacing');
  nk_str_append_str_char := GetProcAddress(LDllHandle, 'nk_str_append_str_char');
  nk_str_append_str_runes := GetProcAddress(LDllHandle, 'nk_str_append_str_runes');
  nk_str_append_str_utf8 := GetProcAddress(LDllHandle, 'nk_str_append_str_utf8');
  nk_str_append_text_char := GetProcAddress(LDllHandle, 'nk_str_append_text_char');
  nk_str_append_text_runes := GetProcAddress(LDllHandle, 'nk_str_append_text_runes');
  nk_str_append_text_utf8 := GetProcAddress(LDllHandle, 'nk_str_append_text_utf8');
  nk_str_at_char := GetProcAddress(LDllHandle, 'nk_str_at_char');
  nk_str_at_char_const := GetProcAddress(LDllHandle, 'nk_str_at_char_const');
  nk_str_at_const := GetProcAddress(LDllHandle, 'nk_str_at_const');
  nk_str_at_rune := GetProcAddress(LDllHandle, 'nk_str_at_rune');
  nk_str_clear := GetProcAddress(LDllHandle, 'nk_str_clear');
  nk_str_delete_chars := GetProcAddress(LDllHandle, 'nk_str_delete_chars');
  nk_str_delete_runes := GetProcAddress(LDllHandle, 'nk_str_delete_runes');
  nk_str_free := GetProcAddress(LDllHandle, 'nk_str_free');
  nk_str_get := GetProcAddress(LDllHandle, 'nk_str_get');
  nk_str_get_const := GetProcAddress(LDllHandle, 'nk_str_get_const');
  nk_str_init := GetProcAddress(LDllHandle, 'nk_str_init');
  nk_str_init_default := GetProcAddress(LDllHandle, 'nk_str_init_default');
  nk_str_init_fixed := GetProcAddress(LDllHandle, 'nk_str_init_fixed');
  nk_str_insert_at_char := GetProcAddress(LDllHandle, 'nk_str_insert_at_char');
  nk_str_insert_at_rune := GetProcAddress(LDllHandle, 'nk_str_insert_at_rune');
  nk_str_insert_str_char := GetProcAddress(LDllHandle, 'nk_str_insert_str_char');
  nk_str_insert_str_runes := GetProcAddress(LDllHandle, 'nk_str_insert_str_runes');
  nk_str_insert_str_utf8 := GetProcAddress(LDllHandle, 'nk_str_insert_str_utf8');
  nk_str_insert_text_char := GetProcAddress(LDllHandle, 'nk_str_insert_text_char');
  nk_str_insert_text_runes := GetProcAddress(LDllHandle, 'nk_str_insert_text_runes');
  nk_str_insert_text_utf8 := GetProcAddress(LDllHandle, 'nk_str_insert_text_utf8');
  nk_str_len := GetProcAddress(LDllHandle, 'nk_str_len');
  nk_str_len_char := GetProcAddress(LDllHandle, 'nk_str_len_char');
  nk_str_remove_chars := GetProcAddress(LDllHandle, 'nk_str_remove_chars');
  nk_str_remove_runes := GetProcAddress(LDllHandle, 'nk_str_remove_runes');
  nk_str_rune_at := GetProcAddress(LDllHandle, 'nk_str_rune_at');
  nk_strfilter := GetProcAddress(LDllHandle, 'nk_strfilter');
  nk_stricmp := GetProcAddress(LDllHandle, 'nk_stricmp');
  nk_stricmpn := GetProcAddress(LDllHandle, 'nk_stricmpn');
  nk_strlen := GetProcAddress(LDllHandle, 'nk_strlen');
  nk_strmatch_fuzzy_string := GetProcAddress(LDllHandle, 'nk_strmatch_fuzzy_string');
  nk_strmatch_fuzzy_text := GetProcAddress(LDllHandle, 'nk_strmatch_fuzzy_text');
  nk_stroke_arc := GetProcAddress(LDllHandle, 'nk_stroke_arc');
  nk_stroke_circle := GetProcAddress(LDllHandle, 'nk_stroke_circle');
  nk_stroke_curve := GetProcAddress(LDllHandle, 'nk_stroke_curve');
  nk_stroke_line := GetProcAddress(LDllHandle, 'nk_stroke_line');
  nk_stroke_polygon := GetProcAddress(LDllHandle, 'nk_stroke_polygon');
  nk_stroke_polyline := GetProcAddress(LDllHandle, 'nk_stroke_polyline');
  nk_stroke_rect := GetProcAddress(LDllHandle, 'nk_stroke_rect');
  nk_stroke_triangle := GetProcAddress(LDllHandle, 'nk_stroke_triangle');
  nk_strtod := GetProcAddress(LDllHandle, 'nk_strtod');
  nk_strtof := GetProcAddress(LDllHandle, 'nk_strtof');
  nk_strtoi := GetProcAddress(LDllHandle, 'nk_strtoi');
  nk_style_default := GetProcAddress(LDllHandle, 'nk_style_default');
  nk_style_from_table := GetProcAddress(LDllHandle, 'nk_style_from_table');
  nk_style_get_color_by_name := GetProcAddress(LDllHandle, 'nk_style_get_color_by_name');
  nk_style_hide_cursor := GetProcAddress(LDllHandle, 'nk_style_hide_cursor');
  nk_style_item_color_ := GetProcAddress(LDllHandle, 'nk_style_item_color');
  nk_style_item_hide := GetProcAddress(LDllHandle, 'nk_style_item_hide');
  nk_style_item_image_ := GetProcAddress(LDllHandle, 'nk_style_item_image');
  nk_style_item_nine_slice_ := GetProcAddress(LDllHandle, 'nk_style_item_nine_slice');
  nk_style_load_all_cursors := GetProcAddress(LDllHandle, 'nk_style_load_all_cursors');
  nk_style_load_cursor := GetProcAddress(LDllHandle, 'nk_style_load_cursor');
  nk_style_pop_color := GetProcAddress(LDllHandle, 'nk_style_pop_color');
  nk_style_pop_flags := GetProcAddress(LDllHandle, 'nk_style_pop_flags');
  nk_style_pop_float := GetProcAddress(LDllHandle, 'nk_style_pop_float');
  nk_style_pop_font := GetProcAddress(LDllHandle, 'nk_style_pop_font');
  nk_style_pop_style_item := GetProcAddress(LDllHandle, 'nk_style_pop_style_item');
  nk_style_pop_vec2 := GetProcAddress(LDllHandle, 'nk_style_pop_vec2');
  nk_style_push_color := GetProcAddress(LDllHandle, 'nk_style_push_color');
  nk_style_push_flags := GetProcAddress(LDllHandle, 'nk_style_push_flags');
  nk_style_push_float := GetProcAddress(LDllHandle, 'nk_style_push_float');
  nk_style_push_font := GetProcAddress(LDllHandle, 'nk_style_push_font');
  nk_style_push_style_item := GetProcAddress(LDllHandle, 'nk_style_push_style_item');
  nk_style_push_vec2 := GetProcAddress(LDllHandle, 'nk_style_push_vec2');
  nk_style_set_cursor := GetProcAddress(LDllHandle, 'nk_style_set_cursor');
  nk_style_set_font := GetProcAddress(LDllHandle, 'nk_style_set_font');
  nk_style_show_cursor := GetProcAddress(LDllHandle, 'nk_style_show_cursor');
  nk_sub9slice_handle := GetProcAddress(LDllHandle, 'nk_sub9slice_handle');
  nk_sub9slice_id := GetProcAddress(LDllHandle, 'nk_sub9slice_id');
  nk_sub9slice_ptr := GetProcAddress(LDllHandle, 'nk_sub9slice_ptr');
  nk_subimage_handle := GetProcAddress(LDllHandle, 'nk_subimage_handle');
  nk_subimage_id := GetProcAddress(LDllHandle, 'nk_subimage_id');
  nk_subimage_ptr := GetProcAddress(LDllHandle, 'nk_subimage_ptr');
  nk_text := GetProcAddress(LDllHandle, 'nk_text');
  nk_text_colored := GetProcAddress(LDllHandle, 'nk_text_colored');
  nk_text_wrap := GetProcAddress(LDllHandle, 'nk_text_wrap');
  nk_text_wrap_colored := GetProcAddress(LDllHandle, 'nk_text_wrap_colored');
  nk_textedit_cut := GetProcAddress(LDllHandle, 'nk_textedit_cut');
  nk_textedit_delete := GetProcAddress(LDllHandle, 'nk_textedit_delete');
  nk_textedit_delete_selection := GetProcAddress(LDllHandle, 'nk_textedit_delete_selection');
  nk_textedit_free := GetProcAddress(LDllHandle, 'nk_textedit_free');
  nk_textedit_init := GetProcAddress(LDllHandle, 'nk_textedit_init');
  nk_textedit_init_default := GetProcAddress(LDllHandle, 'nk_textedit_init_default');
  nk_textedit_init_fixed := GetProcAddress(LDllHandle, 'nk_textedit_init_fixed');
  nk_textedit_paste := GetProcAddress(LDllHandle, 'nk_textedit_paste');
  nk_textedit_redo := GetProcAddress(LDllHandle, 'nk_textedit_redo');
  nk_textedit_select_all := GetProcAddress(LDllHandle, 'nk_textedit_select_all');
  nk_textedit_text := GetProcAddress(LDllHandle, 'nk_textedit_text');
  nk_textedit_undo := GetProcAddress(LDllHandle, 'nk_textedit_undo');
  nk_tooltip := GetProcAddress(LDllHandle, 'nk_tooltip');
  nk_tooltip_begin := GetProcAddress(LDllHandle, 'nk_tooltip_begin');
  nk_tooltip_end := GetProcAddress(LDllHandle, 'nk_tooltip_end');
  nk_tooltipf := GetProcAddress(LDllHandle, 'nk_tooltipf');
  nk_tooltipfv := GetProcAddress(LDllHandle, 'nk_tooltipfv');
  nk_tree_element_image_push_hashed := GetProcAddress(LDllHandle, 'nk_tree_element_image_push_hashed');
  nk_tree_element_pop := GetProcAddress(LDllHandle, 'nk_tree_element_pop');
  nk_tree_element_push_hashed := GetProcAddress(LDllHandle, 'nk_tree_element_push_hashed');
  nk_tree_image_push_hashed := GetProcAddress(LDllHandle, 'nk_tree_image_push_hashed');
  nk_tree_pop := GetProcAddress(LDllHandle, 'nk_tree_pop');
  nk_tree_push_hashed := GetProcAddress(LDllHandle, 'nk_tree_push_hashed');
  nk_tree_state_image_push := GetProcAddress(LDllHandle, 'nk_tree_state_image_push');
  nk_tree_state_pop := GetProcAddress(LDllHandle, 'nk_tree_state_pop');
  nk_tree_state_push := GetProcAddress(LDllHandle, 'nk_tree_state_push');
  nk_triangle_from_direction := GetProcAddress(LDllHandle, 'nk_triangle_from_direction');
  nk_utf_at := GetProcAddress(LDllHandle, 'nk_utf_at');
  nk_utf_decode := GetProcAddress(LDllHandle, 'nk_utf_decode');
  nk_utf_encode := GetProcAddress(LDllHandle, 'nk_utf_encode');
  nk_utf_len := GetProcAddress(LDllHandle, 'nk_utf_len');
  nk_value_bool := GetProcAddress(LDllHandle, 'nk_value_bool');
  nk_value_color_byte := GetProcAddress(LDllHandle, 'nk_value_color_byte');
  nk_value_color_float := GetProcAddress(LDllHandle, 'nk_value_color_float');
  nk_value_color_hex := GetProcAddress(LDllHandle, 'nk_value_color_hex');
  nk_value_float := GetProcAddress(LDllHandle, 'nk_value_float');
  nk_value_int := GetProcAddress(LDllHandle, 'nk_value_int');
  nk_value_uint := GetProcAddress(LDllHandle, 'nk_value_uint');
  nk_vec2_ := GetProcAddress(LDllHandle, 'nk_vec2');
  nk_vec2i_ := GetProcAddress(LDllHandle, 'nk_vec2i');
  nk_vec2iv := GetProcAddress(LDllHandle, 'nk_vec2iv');
  nk_vec2v := GetProcAddress(LDllHandle, 'nk_vec2v');
  nk_widget := GetProcAddress(LDllHandle, 'nk_widget');
  nk_widget_bounds := GetProcAddress(LDllHandle, 'nk_widget_bounds');
  nk_widget_fitting := GetProcAddress(LDllHandle, 'nk_widget_fitting');
  nk_widget_has_mouse_click_down := GetProcAddress(LDllHandle, 'nk_widget_has_mouse_click_down');
  nk_widget_height := GetProcAddress(LDllHandle, 'nk_widget_height');
  nk_widget_is_hovered := GetProcAddress(LDllHandle, 'nk_widget_is_hovered');
  nk_widget_is_mouse_clicked := GetProcAddress(LDllHandle, 'nk_widget_is_mouse_clicked');
  nk_widget_position := GetProcAddress(LDllHandle, 'nk_widget_position');
  nk_widget_size := GetProcAddress(LDllHandle, 'nk_widget_size');
  nk_widget_width := GetProcAddress(LDllHandle, 'nk_widget_width');
  nk_window_close := GetProcAddress(LDllHandle, 'nk_window_close');
  nk_window_collapse := GetProcAddress(LDllHandle, 'nk_window_collapse');
  nk_window_collapse_if := GetProcAddress(LDllHandle, 'nk_window_collapse_if');
  nk_window_find := GetProcAddress(LDllHandle, 'nk_window_find');
  nk_window_get_bounds := GetProcAddress(LDllHandle, 'nk_window_get_bounds');
  nk_window_get_canvas := GetProcAddress(LDllHandle, 'nk_window_get_canvas');
  nk_window_get_content_region := GetProcAddress(LDllHandle, 'nk_window_get_content_region');
  nk_window_get_content_region_max := GetProcAddress(LDllHandle, 'nk_window_get_content_region_max');
  nk_window_get_content_region_min := GetProcAddress(LDllHandle, 'nk_window_get_content_region_min');
  nk_window_get_content_region_size := GetProcAddress(LDllHandle, 'nk_window_get_content_region_size');
  nk_window_get_height := GetProcAddress(LDllHandle, 'nk_window_get_height');
  nk_window_get_panel := GetProcAddress(LDllHandle, 'nk_window_get_panel');
  nk_window_get_position := GetProcAddress(LDllHandle, 'nk_window_get_position');
  nk_window_get_scroll := GetProcAddress(LDllHandle, 'nk_window_get_scroll');
  nk_window_get_size := GetProcAddress(LDllHandle, 'nk_window_get_size');
  nk_window_get_width := GetProcAddress(LDllHandle, 'nk_window_get_width');
  nk_window_has_focus := GetProcAddress(LDllHandle, 'nk_window_has_focus');
  nk_window_is_active := GetProcAddress(LDllHandle, 'nk_window_is_active');
  nk_window_is_any_hovered := GetProcAddress(LDllHandle, 'nk_window_is_any_hovered');
  nk_window_is_closed := GetProcAddress(LDllHandle, 'nk_window_is_closed');
  nk_window_is_collapsed := GetProcAddress(LDllHandle, 'nk_window_is_collapsed');
  nk_window_is_hidden := GetProcAddress(LDllHandle, 'nk_window_is_hidden');
  nk_window_is_hovered := GetProcAddress(LDllHandle, 'nk_window_is_hovered');
  nk_window_set_bounds := GetProcAddress(LDllHandle, 'nk_window_set_bounds');
  nk_window_set_focus := GetProcAddress(LDllHandle, 'nk_window_set_focus');
  nk_window_set_position := GetProcAddress(LDllHandle, 'nk_window_set_position');
  nk_window_set_scroll := GetProcAddress(LDllHandle, 'nk_window_set_scroll');
  nk_window_set_size := GetProcAddress(LDllHandle, 'nk_window_set_size');
  nk_window_show := GetProcAddress(LDllHandle, 'nk_window_show');
  nk_window_show_if := GetProcAddress(LDllHandle, 'nk_window_show_if');
  PHYSFS_addToSearchPath := GetProcAddress(LDllHandle, 'PHYSFS_addToSearchPath');
  PHYSFS_caseFold := GetProcAddress(LDllHandle, 'PHYSFS_caseFold');
  PHYSFS_close := GetProcAddress(LDllHandle, 'PHYSFS_close');
  PHYSFS_deinit := GetProcAddress(LDllHandle, 'PHYSFS_deinit');
  PHYSFS_delete := GetProcAddress(LDllHandle, 'PHYSFS_delete');
  PHYSFS_deregisterArchiver := GetProcAddress(LDllHandle, 'PHYSFS_deregisterArchiver');
  PHYSFS_enumerate := GetProcAddress(LDllHandle, 'PHYSFS_enumerate');
  PHYSFS_enumerateFiles := GetProcAddress(LDllHandle, 'PHYSFS_enumerateFiles');
  PHYSFS_enumerateFilesCallback := GetProcAddress(LDllHandle, 'PHYSFS_enumerateFilesCallback');
  PHYSFS_eof := GetProcAddress(LDllHandle, 'PHYSFS_eof');
  PHYSFS_exists := GetProcAddress(LDllHandle, 'PHYSFS_exists');
  PHYSFS_fileLength := GetProcAddress(LDllHandle, 'PHYSFS_fileLength');
  PHYSFS_flush := GetProcAddress(LDllHandle, 'PHYSFS_flush');
  PHYSFS_freeList := GetProcAddress(LDllHandle, 'PHYSFS_freeList');
  PHYSFS_getAllocator := GetProcAddress(LDllHandle, 'PHYSFS_getAllocator');
  PHYSFS_getBaseDir := GetProcAddress(LDllHandle, 'PHYSFS_getBaseDir');
  PHYSFS_getCdRomDirs := GetProcAddress(LDllHandle, 'PHYSFS_getCdRomDirs');
  PHYSFS_getCdRomDirsCallback := GetProcAddress(LDllHandle, 'PHYSFS_getCdRomDirsCallback');
  PHYSFS_getDirSeparator := GetProcAddress(LDllHandle, 'PHYSFS_getDirSeparator');
  PHYSFS_getErrorByCode := GetProcAddress(LDllHandle, 'PHYSFS_getErrorByCode');
  PHYSFS_getLastError := GetProcAddress(LDllHandle, 'PHYSFS_getLastError');
  PHYSFS_getLastErrorCode := GetProcAddress(LDllHandle, 'PHYSFS_getLastErrorCode');
  PHYSFS_getLastModTime := GetProcAddress(LDllHandle, 'PHYSFS_getLastModTime');
  PHYSFS_getLinkedVersion := GetProcAddress(LDllHandle, 'PHYSFS_getLinkedVersion');
  PHYSFS_getMountPoint := GetProcAddress(LDllHandle, 'PHYSFS_getMountPoint');
  PHYSFS_getPrefDir := GetProcAddress(LDllHandle, 'PHYSFS_getPrefDir');
  PHYSFS_getRealDir := GetProcAddress(LDllHandle, 'PHYSFS_getRealDir');
  PHYSFS_getSearchPath := GetProcAddress(LDllHandle, 'PHYSFS_getSearchPath');
  PHYSFS_getSearchPathCallback := GetProcAddress(LDllHandle, 'PHYSFS_getSearchPathCallback');
  PHYSFS_getUserDir := GetProcAddress(LDllHandle, 'PHYSFS_getUserDir');
  PHYSFS_getWriteDir := GetProcAddress(LDllHandle, 'PHYSFS_getWriteDir');
  PHYSFS_init := GetProcAddress(LDllHandle, 'PHYSFS_init');
  PHYSFS_isDirectory := GetProcAddress(LDllHandle, 'PHYSFS_isDirectory');
  PHYSFS_isInit := GetProcAddress(LDllHandle, 'PHYSFS_isInit');
  PHYSFS_isSymbolicLink := GetProcAddress(LDllHandle, 'PHYSFS_isSymbolicLink');
  PHYSFS_mkdir := GetProcAddress(LDllHandle, 'PHYSFS_mkdir');
  PHYSFS_mount := GetProcAddress(LDllHandle, 'PHYSFS_mount');
  PHYSFS_mountHandle := GetProcAddress(LDllHandle, 'PHYSFS_mountHandle');
  PHYSFS_mountIo := GetProcAddress(LDllHandle, 'PHYSFS_mountIo');
  PHYSFS_mountMemory := GetProcAddress(LDllHandle, 'PHYSFS_mountMemory');
  PHYSFS_openAppend := GetProcAddress(LDllHandle, 'PHYSFS_openAppend');
  PHYSFS_openRead := GetProcAddress(LDllHandle, 'PHYSFS_openRead');
  PHYSFS_openWrite := GetProcAddress(LDllHandle, 'PHYSFS_openWrite');
  PHYSFS_permitSymbolicLinks := GetProcAddress(LDllHandle, 'PHYSFS_permitSymbolicLinks');
  PHYSFS_read := GetProcAddress(LDllHandle, 'PHYSFS_read');
  PHYSFS_readBytes := GetProcAddress(LDllHandle, 'PHYSFS_readBytes');
  PHYSFS_readSBE16 := GetProcAddress(LDllHandle, 'PHYSFS_readSBE16');
  PHYSFS_readSBE32 := GetProcAddress(LDllHandle, 'PHYSFS_readSBE32');
  PHYSFS_readSBE64 := GetProcAddress(LDllHandle, 'PHYSFS_readSBE64');
  PHYSFS_readSLE16 := GetProcAddress(LDllHandle, 'PHYSFS_readSLE16');
  PHYSFS_readSLE32 := GetProcAddress(LDllHandle, 'PHYSFS_readSLE32');
  PHYSFS_readSLE64 := GetProcAddress(LDllHandle, 'PHYSFS_readSLE64');
  PHYSFS_readUBE16 := GetProcAddress(LDllHandle, 'PHYSFS_readUBE16');
  PHYSFS_readUBE32 := GetProcAddress(LDllHandle, 'PHYSFS_readUBE32');
  PHYSFS_readUBE64 := GetProcAddress(LDllHandle, 'PHYSFS_readUBE64');
  PHYSFS_readULE16 := GetProcAddress(LDllHandle, 'PHYSFS_readULE16');
  PHYSFS_readULE32 := GetProcAddress(LDllHandle, 'PHYSFS_readULE32');
  PHYSFS_readULE64 := GetProcAddress(LDllHandle, 'PHYSFS_readULE64');
  PHYSFS_registerArchiver := GetProcAddress(LDllHandle, 'PHYSFS_registerArchiver');
  PHYSFS_removeFromSearchPath := GetProcAddress(LDllHandle, 'PHYSFS_removeFromSearchPath');
  PHYSFS_seek := GetProcAddress(LDllHandle, 'PHYSFS_seek');
  PHYSFS_setAllocator := GetProcAddress(LDllHandle, 'PHYSFS_setAllocator');
  PHYSFS_setBuffer := GetProcAddress(LDllHandle, 'PHYSFS_setBuffer');
  PHYSFS_setErrorCode := GetProcAddress(LDllHandle, 'PHYSFS_setErrorCode');
  PHYSFS_setRoot := GetProcAddress(LDllHandle, 'PHYSFS_setRoot');
  PHYSFS_setSaneConfig := GetProcAddress(LDllHandle, 'PHYSFS_setSaneConfig');
  PHYSFS_setWriteDir := GetProcAddress(LDllHandle, 'PHYSFS_setWriteDir');
  PHYSFS_stat_ := GetProcAddress(LDllHandle, 'PHYSFS_stat');
  PHYSFS_supportedArchiveTypes := GetProcAddress(LDllHandle, 'PHYSFS_supportedArchiveTypes');
  PHYSFS_swapSBE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapSBE16');
  PHYSFS_swapSBE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapSBE32');
  PHYSFS_swapSBE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapSBE64');
  PHYSFS_swapSLE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapSLE16');
  PHYSFS_swapSLE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapSLE32');
  PHYSFS_swapSLE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapSLE64');
  PHYSFS_swapUBE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapUBE16');
  PHYSFS_swapUBE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapUBE32');
  PHYSFS_swapUBE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapUBE64');
  PHYSFS_swapULE16 := GetProcAddress(LDllHandle, 'PHYSFS_swapULE16');
  PHYSFS_swapULE32 := GetProcAddress(LDllHandle, 'PHYSFS_swapULE32');
  PHYSFS_swapULE64 := GetProcAddress(LDllHandle, 'PHYSFS_swapULE64');
  PHYSFS_symbolicLinksPermitted := GetProcAddress(LDllHandle, 'PHYSFS_symbolicLinksPermitted');
  PHYSFS_tell := GetProcAddress(LDllHandle, 'PHYSFS_tell');
  PHYSFS_ucs4stricmp := GetProcAddress(LDllHandle, 'PHYSFS_ucs4stricmp');
  PHYSFS_unmount := GetProcAddress(LDllHandle, 'PHYSFS_unmount');
  PHYSFS_utf16stricmp := GetProcAddress(LDllHandle, 'PHYSFS_utf16stricmp');
  PHYSFS_utf8FromLatin1 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromLatin1');
  PHYSFS_utf8FromUcs2 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromUcs2');
  PHYSFS_utf8FromUcs4 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromUcs4');
  PHYSFS_utf8FromUtf16 := GetProcAddress(LDllHandle, 'PHYSFS_utf8FromUtf16');
  PHYSFS_utf8stricmp := GetProcAddress(LDllHandle, 'PHYSFS_utf8stricmp');
  PHYSFS_utf8ToUcs2 := GetProcAddress(LDllHandle, 'PHYSFS_utf8ToUcs2');
  PHYSFS_utf8ToUcs4 := GetProcAddress(LDllHandle, 'PHYSFS_utf8ToUcs4');
  PHYSFS_utf8ToUtf16 := GetProcAddress(LDllHandle, 'PHYSFS_utf8ToUtf16');
  PHYSFS_write := GetProcAddress(LDllHandle, 'PHYSFS_write');
  PHYSFS_writeBytes := GetProcAddress(LDllHandle, 'PHYSFS_writeBytes');
  PHYSFS_writeSBE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeSBE16');
  PHYSFS_writeSBE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeSBE32');
  PHYSFS_writeSBE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeSBE64');
  PHYSFS_writeSLE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeSLE16');
  PHYSFS_writeSLE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeSLE32');
  PHYSFS_writeSLE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeSLE64');
  PHYSFS_writeUBE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeUBE16');
  PHYSFS_writeUBE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeUBE32');
  PHYSFS_writeUBE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeUBE64');
  PHYSFS_writeULE16 := GetProcAddress(LDllHandle, 'PHYSFS_writeULE16');
  PHYSFS_writeULE32 := GetProcAddress(LDllHandle, 'PHYSFS_writeULE32');
  PHYSFS_writeULE64 := GetProcAddress(LDllHandle, 'PHYSFS_writeULE64');
  PHYSFSRWOPS_makeRWops := GetProcAddress(LDllHandle, 'PHYSFSRWOPS_makeRWops');
  PHYSFSRWOPS_openAppend := GetProcAddress(LDllHandle, 'PHYSFSRWOPS_openAppend');
  PHYSFSRWOPS_openRead := GetProcAddress(LDllHandle, 'PHYSFSRWOPS_openRead');
  PHYSFSRWOPS_openWrite := GetProcAddress(LDllHandle, 'PHYSFSRWOPS_openWrite');
  pieColor := GetProcAddress(LDllHandle, 'pieColor');
  pieRGBA := GetProcAddress(LDllHandle, 'pieRGBA');
  pixelColor := GetProcAddress(LDllHandle, 'pixelColor');
  pixelRGBA := GetProcAddress(LDllHandle, 'pixelRGBA');
  plm_audio_create_with_buffer := GetProcAddress(LDllHandle, 'plm_audio_create_with_buffer');
  plm_audio_decode := GetProcAddress(LDllHandle, 'plm_audio_decode');
  plm_audio_destroy := GetProcAddress(LDllHandle, 'plm_audio_destroy');
  plm_audio_get_samplerate := GetProcAddress(LDllHandle, 'plm_audio_get_samplerate');
  plm_audio_get_time := GetProcAddress(LDllHandle, 'plm_audio_get_time');
  plm_audio_has_ended := GetProcAddress(LDllHandle, 'plm_audio_has_ended');
  plm_audio_has_header := GetProcAddress(LDllHandle, 'plm_audio_has_header');
  plm_audio_rewind := GetProcAddress(LDllHandle, 'plm_audio_rewind');
  plm_audio_set_time := GetProcAddress(LDllHandle, 'plm_audio_set_time');
  plm_buffer_create_for_appending := GetProcAddress(LDllHandle, 'plm_buffer_create_for_appending');
  plm_buffer_create_with_capacity := GetProcAddress(LDllHandle, 'plm_buffer_create_with_capacity');
  plm_buffer_create_with_file := GetProcAddress(LDllHandle, 'plm_buffer_create_with_file');
  plm_buffer_create_with_filename := GetProcAddress(LDllHandle, 'plm_buffer_create_with_filename');
  plm_buffer_create_with_memory := GetProcAddress(LDllHandle, 'plm_buffer_create_with_memory');
  plm_buffer_destroy := GetProcAddress(LDllHandle, 'plm_buffer_destroy');
  plm_buffer_get_remaining := GetProcAddress(LDllHandle, 'plm_buffer_get_remaining');
  plm_buffer_get_size := GetProcAddress(LDllHandle, 'plm_buffer_get_size');
  plm_buffer_has_ended := GetProcAddress(LDllHandle, 'plm_buffer_has_ended');
  plm_buffer_rewind := GetProcAddress(LDllHandle, 'plm_buffer_rewind');
  plm_buffer_set_load_callback := GetProcAddress(LDllHandle, 'plm_buffer_set_load_callback');
  plm_buffer_signal_end := GetProcAddress(LDllHandle, 'plm_buffer_signal_end');
  plm_buffer_write := GetProcAddress(LDllHandle, 'plm_buffer_write');
  plm_create_with_buffer := GetProcAddress(LDllHandle, 'plm_create_with_buffer');
  plm_create_with_file := GetProcAddress(LDllHandle, 'plm_create_with_file');
  plm_create_with_filename := GetProcAddress(LDllHandle, 'plm_create_with_filename');
  plm_create_with_memory := GetProcAddress(LDllHandle, 'plm_create_with_memory');
  plm_decode := GetProcAddress(LDllHandle, 'plm_decode');
  plm_decode_audio := GetProcAddress(LDllHandle, 'plm_decode_audio');
  plm_decode_video := GetProcAddress(LDllHandle, 'plm_decode_video');
  plm_demux_create := GetProcAddress(LDllHandle, 'plm_demux_create');
  plm_demux_decode := GetProcAddress(LDllHandle, 'plm_demux_decode');
  plm_demux_destroy := GetProcAddress(LDllHandle, 'plm_demux_destroy');
  plm_demux_get_duration := GetProcAddress(LDllHandle, 'plm_demux_get_duration');
  plm_demux_get_num_audio_streams := GetProcAddress(LDllHandle, 'plm_demux_get_num_audio_streams');
  plm_demux_get_num_video_streams := GetProcAddress(LDllHandle, 'plm_demux_get_num_video_streams');
  plm_demux_get_start_time := GetProcAddress(LDllHandle, 'plm_demux_get_start_time');
  plm_demux_has_ended := GetProcAddress(LDllHandle, 'plm_demux_has_ended');
  plm_demux_has_headers := GetProcAddress(LDllHandle, 'plm_demux_has_headers');
  plm_demux_rewind := GetProcAddress(LDllHandle, 'plm_demux_rewind');
  plm_demux_seek := GetProcAddress(LDllHandle, 'plm_demux_seek');
  plm_destroy := GetProcAddress(LDllHandle, 'plm_destroy');
  plm_frame_to_abgr := GetProcAddress(LDllHandle, 'plm_frame_to_abgr');
  plm_frame_to_argb := GetProcAddress(LDllHandle, 'plm_frame_to_argb');
  plm_frame_to_bgr := GetProcAddress(LDllHandle, 'plm_frame_to_bgr');
  plm_frame_to_bgra := GetProcAddress(LDllHandle, 'plm_frame_to_bgra');
  plm_frame_to_rgb := GetProcAddress(LDllHandle, 'plm_frame_to_rgb');
  plm_frame_to_rgba := GetProcAddress(LDllHandle, 'plm_frame_to_rgba');
  plm_get_audio_enabled := GetProcAddress(LDllHandle, 'plm_get_audio_enabled');
  plm_get_audio_lead_time := GetProcAddress(LDllHandle, 'plm_get_audio_lead_time');
  plm_get_duration := GetProcAddress(LDllHandle, 'plm_get_duration');
  plm_get_framerate := GetProcAddress(LDllHandle, 'plm_get_framerate');
  plm_get_height := GetProcAddress(LDllHandle, 'plm_get_height');
  plm_get_loop := GetProcAddress(LDllHandle, 'plm_get_loop');
  plm_get_num_audio_streams := GetProcAddress(LDllHandle, 'plm_get_num_audio_streams');
  plm_get_num_video_streams := GetProcAddress(LDllHandle, 'plm_get_num_video_streams');
  plm_get_samplerate := GetProcAddress(LDllHandle, 'plm_get_samplerate');
  plm_get_time := GetProcAddress(LDllHandle, 'plm_get_time');
  plm_get_video_enabled := GetProcAddress(LDllHandle, 'plm_get_video_enabled');
  plm_get_width := GetProcAddress(LDllHandle, 'plm_get_width');
  plm_has_ended := GetProcAddress(LDllHandle, 'plm_has_ended');
  plm_has_headers := GetProcAddress(LDllHandle, 'plm_has_headers');
  plm_rewind := GetProcAddress(LDllHandle, 'plm_rewind');
  plm_seek := GetProcAddress(LDllHandle, 'plm_seek');
  plm_seek_frame := GetProcAddress(LDllHandle, 'plm_seek_frame');
  plm_set_audio_decode_callback := GetProcAddress(LDllHandle, 'plm_set_audio_decode_callback');
  plm_set_audio_enabled := GetProcAddress(LDllHandle, 'plm_set_audio_enabled');
  plm_set_audio_lead_time := GetProcAddress(LDllHandle, 'plm_set_audio_lead_time');
  plm_set_audio_stream := GetProcAddress(LDllHandle, 'plm_set_audio_stream');
  plm_set_loop := GetProcAddress(LDllHandle, 'plm_set_loop');
  plm_set_video_decode_callback := GetProcAddress(LDllHandle, 'plm_set_video_decode_callback');
  plm_set_video_enabled := GetProcAddress(LDllHandle, 'plm_set_video_enabled');
  plm_video_create_with_buffer := GetProcAddress(LDllHandle, 'plm_video_create_with_buffer');
  plm_video_decode := GetProcAddress(LDllHandle, 'plm_video_decode');
  plm_video_destroy := GetProcAddress(LDllHandle, 'plm_video_destroy');
  plm_video_get_framerate := GetProcAddress(LDllHandle, 'plm_video_get_framerate');
  plm_video_get_height := GetProcAddress(LDllHandle, 'plm_video_get_height');
  plm_video_get_time := GetProcAddress(LDllHandle, 'plm_video_get_time');
  plm_video_get_width := GetProcAddress(LDllHandle, 'plm_video_get_width');
  plm_video_has_ended := GetProcAddress(LDllHandle, 'plm_video_has_ended');
  plm_video_has_header := GetProcAddress(LDllHandle, 'plm_video_has_header');
  plm_video_rewind := GetProcAddress(LDllHandle, 'plm_video_rewind');
  plm_video_set_no_delay := GetProcAddress(LDllHandle, 'plm_video_set_no_delay');
  plm_video_set_time := GetProcAddress(LDllHandle, 'plm_video_set_time');
  polygonColor := GetProcAddress(LDllHandle, 'polygonColor');
  polygonRGBA := GetProcAddress(LDllHandle, 'polygonRGBA');
  rectangleColor := GetProcAddress(LDllHandle, 'rectangleColor');
  rectangleRGBA := GetProcAddress(LDllHandle, 'rectangleRGBA');
  rotateSurface90Degrees := GetProcAddress(LDllHandle, 'rotateSurface90Degrees');
  rotozoomSurface := GetProcAddress(LDllHandle, 'rotozoomSurface');
  rotozoomSurfaceSize := GetProcAddress(LDllHandle, 'rotozoomSurfaceSize');
  rotozoomSurfaceSizeXY := GetProcAddress(LDllHandle, 'rotozoomSurfaceSizeXY');
  rotozoomSurfaceXY := GetProcAddress(LDllHandle, 'rotozoomSurfaceXY');
  roundedBoxColor := GetProcAddress(LDllHandle, 'roundedBoxColor');
  roundedBoxRGBA := GetProcAddress(LDllHandle, 'roundedBoxRGBA');
  roundedRectangleColor := GetProcAddress(LDllHandle, 'roundedRectangleColor');
  roundedRectangleRGBA := GetProcAddress(LDllHandle, 'roundedRectangleRGBA');
  SDL_abs := GetProcAddress(LDllHandle, 'SDL_abs');
  SDL_acos := GetProcAddress(LDllHandle, 'SDL_acos');
  SDL_acosf := GetProcAddress(LDllHandle, 'SDL_acosf');
  SDL_AddEventWatch := GetProcAddress(LDllHandle, 'SDL_AddEventWatch');
  SDL_AddHintCallback := GetProcAddress(LDllHandle, 'SDL_AddHintCallback');
  SDL_AddTimer := GetProcAddress(LDllHandle, 'SDL_AddTimer');
  SDL_AllocFormat := GetProcAddress(LDllHandle, 'SDL_AllocFormat');
  SDL_AllocPalette := GetProcAddress(LDllHandle, 'SDL_AllocPalette');
  SDL_AllocRW := GetProcAddress(LDllHandle, 'SDL_AllocRW');
  SDL_asin := GetProcAddress(LDllHandle, 'SDL_asin');
  SDL_asinf := GetProcAddress(LDllHandle, 'SDL_asinf');
  SDL_asprintf := GetProcAddress(LDllHandle, 'SDL_asprintf');
  SDL_atan := GetProcAddress(LDllHandle, 'SDL_atan');
  SDL_atan2 := GetProcAddress(LDllHandle, 'SDL_atan2');
  SDL_atan2f := GetProcAddress(LDllHandle, 'SDL_atan2f');
  SDL_atanf := GetProcAddress(LDllHandle, 'SDL_atanf');
  SDL_atof := GetProcAddress(LDllHandle, 'SDL_atof');
  SDL_atoi := GetProcAddress(LDllHandle, 'SDL_atoi');
  SDL_AtomicAdd := GetProcAddress(LDllHandle, 'SDL_AtomicAdd');
  SDL_AtomicCAS := GetProcAddress(LDllHandle, 'SDL_AtomicCAS');
  SDL_AtomicCASPtr := GetProcAddress(LDllHandle, 'SDL_AtomicCASPtr');
  SDL_AtomicGet := GetProcAddress(LDllHandle, 'SDL_AtomicGet');
  SDL_AtomicGetPtr := GetProcAddress(LDllHandle, 'SDL_AtomicGetPtr');
  SDL_AtomicLock := GetProcAddress(LDllHandle, 'SDL_AtomicLock');
  SDL_AtomicSet := GetProcAddress(LDllHandle, 'SDL_AtomicSet');
  SDL_AtomicSetPtr := GetProcAddress(LDllHandle, 'SDL_AtomicSetPtr');
  SDL_AtomicTryLock := GetProcAddress(LDllHandle, 'SDL_AtomicTryLock');
  SDL_AtomicUnlock := GetProcAddress(LDllHandle, 'SDL_AtomicUnlock');
  SDL_AudioInit := GetProcAddress(LDllHandle, 'SDL_AudioInit');
  SDL_AudioQuit := GetProcAddress(LDllHandle, 'SDL_AudioQuit');
  SDL_AudioStreamAvailable := GetProcAddress(LDllHandle, 'SDL_AudioStreamAvailable');
  SDL_AudioStreamClear := GetProcAddress(LDllHandle, 'SDL_AudioStreamClear');
  SDL_AudioStreamFlush := GetProcAddress(LDllHandle, 'SDL_AudioStreamFlush');
  SDL_AudioStreamGet := GetProcAddress(LDllHandle, 'SDL_AudioStreamGet');
  SDL_AudioStreamPut := GetProcAddress(LDllHandle, 'SDL_AudioStreamPut');
  SDL_BuildAudioCVT := GetProcAddress(LDllHandle, 'SDL_BuildAudioCVT');
  SDL_CalculateGammaRamp := GetProcAddress(LDllHandle, 'SDL_CalculateGammaRamp');
  SDL_calloc := GetProcAddress(LDllHandle, 'SDL_calloc');
  SDL_CaptureMouse := GetProcAddress(LDllHandle, 'SDL_CaptureMouse');
  SDL_ceil := GetProcAddress(LDllHandle, 'SDL_ceil');
  SDL_ceilf := GetProcAddress(LDllHandle, 'SDL_ceilf');
  SDL_ClearError := GetProcAddress(LDllHandle, 'SDL_ClearError');
  SDL_ClearHints := GetProcAddress(LDllHandle, 'SDL_ClearHints');
  SDL_ClearQueuedAudio := GetProcAddress(LDllHandle, 'SDL_ClearQueuedAudio');
  SDL_CloseAudio := GetProcAddress(LDllHandle, 'SDL_CloseAudio');
  SDL_CloseAudioDevice := GetProcAddress(LDllHandle, 'SDL_CloseAudioDevice');
  SDL_ComposeCustomBlendMode := GetProcAddress(LDllHandle, 'SDL_ComposeCustomBlendMode');
  SDL_CondBroadcast := GetProcAddress(LDllHandle, 'SDL_CondBroadcast');
  SDL_CondSignal := GetProcAddress(LDllHandle, 'SDL_CondSignal');
  SDL_CondWait := GetProcAddress(LDllHandle, 'SDL_CondWait');
  SDL_CondWaitTimeout := GetProcAddress(LDllHandle, 'SDL_CondWaitTimeout');
  SDL_ConvertAudio := GetProcAddress(LDllHandle, 'SDL_ConvertAudio');
  SDL_ConvertPixels := GetProcAddress(LDllHandle, 'SDL_ConvertPixels');
  SDL_ConvertSurface := GetProcAddress(LDllHandle, 'SDL_ConvertSurface');
  SDL_ConvertSurfaceFormat := GetProcAddress(LDllHandle, 'SDL_ConvertSurfaceFormat');
  SDL_copysign := GetProcAddress(LDllHandle, 'SDL_copysign');
  SDL_copysignf := GetProcAddress(LDllHandle, 'SDL_copysignf');
  SDL_cos := GetProcAddress(LDllHandle, 'SDL_cos');
  SDL_cosf := GetProcAddress(LDllHandle, 'SDL_cosf');
  SDL_crc32 := GetProcAddress(LDllHandle, 'SDL_crc32');
  SDL_CreateColorCursor := GetProcAddress(LDllHandle, 'SDL_CreateColorCursor');
  SDL_CreateCond := GetProcAddress(LDllHandle, 'SDL_CreateCond');
  SDL_CreateCursor := GetProcAddress(LDllHandle, 'SDL_CreateCursor');
  SDL_CreateMutex := GetProcAddress(LDllHandle, 'SDL_CreateMutex');
  SDL_CreateRenderer := GetProcAddress(LDllHandle, 'SDL_CreateRenderer');
  SDL_CreateRGBSurface := GetProcAddress(LDllHandle, 'SDL_CreateRGBSurface');
  SDL_CreateRGBSurfaceFrom := GetProcAddress(LDllHandle, 'SDL_CreateRGBSurfaceFrom');
  SDL_CreateRGBSurfaceWithFormat := GetProcAddress(LDllHandle, 'SDL_CreateRGBSurfaceWithFormat');
  SDL_CreateRGBSurfaceWithFormatFrom := GetProcAddress(LDllHandle, 'SDL_CreateRGBSurfaceWithFormatFrom');
  SDL_CreateSemaphore := GetProcAddress(LDllHandle, 'SDL_CreateSemaphore');
  SDL_CreateShapedWindow := GetProcAddress(LDllHandle, 'SDL_CreateShapedWindow');
  SDL_CreateSoftwareRenderer := GetProcAddress(LDllHandle, 'SDL_CreateSoftwareRenderer');
  SDL_CreateSystemCursor := GetProcAddress(LDllHandle, 'SDL_CreateSystemCursor');
  SDL_CreateTexture := GetProcAddress(LDllHandle, 'SDL_CreateTexture');
  SDL_CreateTextureFromSurface := GetProcAddress(LDllHandle, 'SDL_CreateTextureFromSurface');
  SDL_CreateThread := GetProcAddress(LDllHandle, 'SDL_CreateThread');
  SDL_CreateThreadWithStackSize := GetProcAddress(LDllHandle, 'SDL_CreateThreadWithStackSize');
  SDL_CreateWindow := GetProcAddress(LDllHandle, 'SDL_CreateWindow');
  SDL_CreateWindowAndRenderer := GetProcAddress(LDllHandle, 'SDL_CreateWindowAndRenderer');
  SDL_CreateWindowFrom := GetProcAddress(LDllHandle, 'SDL_CreateWindowFrom');
  SDL_Delay := GetProcAddress(LDllHandle, 'SDL_Delay');
  SDL_DelEventWatch := GetProcAddress(LDllHandle, 'SDL_DelEventWatch');
  SDL_DelHintCallback := GetProcAddress(LDllHandle, 'SDL_DelHintCallback');
  SDL_DequeueAudio := GetProcAddress(LDllHandle, 'SDL_DequeueAudio');
  SDL_DestroyCond := GetProcAddress(LDllHandle, 'SDL_DestroyCond');
  SDL_DestroyMutex := GetProcAddress(LDllHandle, 'SDL_DestroyMutex');
  SDL_DestroyRenderer := GetProcAddress(LDllHandle, 'SDL_DestroyRenderer');
  SDL_DestroySemaphore := GetProcAddress(LDllHandle, 'SDL_DestroySemaphore');
  SDL_DestroyTexture := GetProcAddress(LDllHandle, 'SDL_DestroyTexture');
  SDL_DestroyWindow := GetProcAddress(LDllHandle, 'SDL_DestroyWindow');
  SDL_DetachThread := GetProcAddress(LDllHandle, 'SDL_DetachThread');
  SDL_Direct3D9GetAdapterIndex := GetProcAddress(LDllHandle, 'SDL_Direct3D9GetAdapterIndex');
  SDL_DisableScreenSaver := GetProcAddress(LDllHandle, 'SDL_DisableScreenSaver');
  SDL_DuplicateSurface := GetProcAddress(LDllHandle, 'SDL_DuplicateSurface');
  SDL_DXGIGetOutputInfo := GetProcAddress(LDllHandle, 'SDL_DXGIGetOutputInfo');
  SDL_EnableScreenSaver := GetProcAddress(LDllHandle, 'SDL_EnableScreenSaver');
  SDL_EnclosePoints := GetProcAddress(LDllHandle, 'SDL_EnclosePoints');
  SDL_Error := GetProcAddress(LDllHandle, 'SDL_Error');
  SDL_EventState := GetProcAddress(LDllHandle, 'SDL_EventState');
  SDL_exp := GetProcAddress(LDllHandle, 'SDL_exp');
  SDL_expf := GetProcAddress(LDllHandle, 'SDL_expf');
  SDL_fabs := GetProcAddress(LDllHandle, 'SDL_fabs');
  SDL_fabsf := GetProcAddress(LDllHandle, 'SDL_fabsf');
  SDL_FillRect := GetProcAddress(LDllHandle, 'SDL_FillRect');
  SDL_FillRects := GetProcAddress(LDllHandle, 'SDL_FillRects');
  SDL_FilterEvents := GetProcAddress(LDllHandle, 'SDL_FilterEvents');
  SDL_FlashWindow := GetProcAddress(LDllHandle, 'SDL_FlashWindow');
  SDL_floor := GetProcAddress(LDllHandle, 'SDL_floor');
  SDL_floorf := GetProcAddress(LDllHandle, 'SDL_floorf');
  SDL_FlushEvent := GetProcAddress(LDllHandle, 'SDL_FlushEvent');
  SDL_FlushEvents := GetProcAddress(LDllHandle, 'SDL_FlushEvents');
  SDL_fmod := GetProcAddress(LDllHandle, 'SDL_fmod');
  SDL_fmodf := GetProcAddress(LDllHandle, 'SDL_fmodf');
  SDL_framerateDelay := GetProcAddress(LDllHandle, 'SDL_framerateDelay');
  SDL_free := GetProcAddress(LDllHandle, 'SDL_free');
  SDL_FreeAudioStream := GetProcAddress(LDllHandle, 'SDL_FreeAudioStream');
  SDL_FreeCursor := GetProcAddress(LDllHandle, 'SDL_FreeCursor');
  SDL_FreeFormat := GetProcAddress(LDllHandle, 'SDL_FreeFormat');
  SDL_FreePalette := GetProcAddress(LDllHandle, 'SDL_FreePalette');
  SDL_FreeRW := GetProcAddress(LDllHandle, 'SDL_FreeRW');
  SDL_FreeSurface := GetProcAddress(LDllHandle, 'SDL_FreeSurface');
  SDL_FreeWAV := GetProcAddress(LDllHandle, 'SDL_FreeWAV');
  SDL_GameControllerAddMapping := GetProcAddress(LDllHandle, 'SDL_GameControllerAddMapping');
  SDL_GameControllerAddMappingsFromRW := GetProcAddress(LDllHandle, 'SDL_GameControllerAddMappingsFromRW');
  SDL_GameControllerClose := GetProcAddress(LDllHandle, 'SDL_GameControllerClose');
  SDL_GameControllerEventState := GetProcAddress(LDllHandle, 'SDL_GameControllerEventState');
  SDL_GameControllerFromInstanceID := GetProcAddress(LDllHandle, 'SDL_GameControllerFromInstanceID');
  SDL_GameControllerFromPlayerIndex := GetProcAddress(LDllHandle, 'SDL_GameControllerFromPlayerIndex');
  SDL_GameControllerGetAppleSFSymbolsNameForAxis := GetProcAddress(LDllHandle, 'SDL_GameControllerGetAppleSFSymbolsNameForAxis');
  SDL_GameControllerGetAppleSFSymbolsNameForButton := GetProcAddress(LDllHandle, 'SDL_GameControllerGetAppleSFSymbolsNameForButton');
  SDL_GameControllerGetAttached := GetProcAddress(LDllHandle, 'SDL_GameControllerGetAttached');
  SDL_GameControllerGetAxis := GetProcAddress(LDllHandle, 'SDL_GameControllerGetAxis');
  SDL_GameControllerGetAxisFromString := GetProcAddress(LDllHandle, 'SDL_GameControllerGetAxisFromString');
  SDL_GameControllerGetBindForAxis := GetProcAddress(LDllHandle, 'SDL_GameControllerGetBindForAxis');
  SDL_GameControllerGetBindForButton := GetProcAddress(LDllHandle, 'SDL_GameControllerGetBindForButton');
  SDL_GameControllerGetButton := GetProcAddress(LDllHandle, 'SDL_GameControllerGetButton');
  SDL_GameControllerGetButtonFromString := GetProcAddress(LDllHandle, 'SDL_GameControllerGetButtonFromString');
  SDL_GameControllerGetJoystick := GetProcAddress(LDllHandle, 'SDL_GameControllerGetJoystick');
  SDL_GameControllerGetNumTouchpadFingers := GetProcAddress(LDllHandle, 'SDL_GameControllerGetNumTouchpadFingers');
  SDL_GameControllerGetNumTouchpads := GetProcAddress(LDllHandle, 'SDL_GameControllerGetNumTouchpads');
  SDL_GameControllerGetPlayerIndex := GetProcAddress(LDllHandle, 'SDL_GameControllerGetPlayerIndex');
  SDL_GameControllerGetProduct := GetProcAddress(LDllHandle, 'SDL_GameControllerGetProduct');
  SDL_GameControllerGetProductVersion := GetProcAddress(LDllHandle, 'SDL_GameControllerGetProductVersion');
  SDL_GameControllerGetSensorData := GetProcAddress(LDllHandle, 'SDL_GameControllerGetSensorData');
  SDL_GameControllerGetSensorDataRate := GetProcAddress(LDllHandle, 'SDL_GameControllerGetSensorDataRate');
  SDL_GameControllerGetSerial := GetProcAddress(LDllHandle, 'SDL_GameControllerGetSerial');
  SDL_GameControllerGetStringForAxis := GetProcAddress(LDllHandle, 'SDL_GameControllerGetStringForAxis');
  SDL_GameControllerGetStringForButton := GetProcAddress(LDllHandle, 'SDL_GameControllerGetStringForButton');
  SDL_GameControllerGetTouchpadFinger := GetProcAddress(LDllHandle, 'SDL_GameControllerGetTouchpadFinger');
  SDL_GameControllerGetType := GetProcAddress(LDllHandle, 'SDL_GameControllerGetType');
  SDL_GameControllerGetVendor := GetProcAddress(LDllHandle, 'SDL_GameControllerGetVendor');
  SDL_GameControllerHasAxis := GetProcAddress(LDllHandle, 'SDL_GameControllerHasAxis');
  SDL_GameControllerHasButton := GetProcAddress(LDllHandle, 'SDL_GameControllerHasButton');
  SDL_GameControllerHasLED := GetProcAddress(LDllHandle, 'SDL_GameControllerHasLED');
  SDL_GameControllerHasRumble := GetProcAddress(LDllHandle, 'SDL_GameControllerHasRumble');
  SDL_GameControllerHasRumbleTriggers := GetProcAddress(LDllHandle, 'SDL_GameControllerHasRumbleTriggers');
  SDL_GameControllerHasSensor := GetProcAddress(LDllHandle, 'SDL_GameControllerHasSensor');
  SDL_GameControllerIsSensorEnabled := GetProcAddress(LDllHandle, 'SDL_GameControllerIsSensorEnabled');
  SDL_GameControllerMapping := GetProcAddress(LDllHandle, 'SDL_GameControllerMapping');
  SDL_GameControllerMappingForDeviceIndex := GetProcAddress(LDllHandle, 'SDL_GameControllerMappingForDeviceIndex');
  SDL_GameControllerMappingForGUID := GetProcAddress(LDllHandle, 'SDL_GameControllerMappingForGUID');
  SDL_GameControllerMappingForIndex := GetProcAddress(LDllHandle, 'SDL_GameControllerMappingForIndex');
  SDL_GameControllerName := GetProcAddress(LDllHandle, 'SDL_GameControllerName');
  SDL_GameControllerNameForIndex := GetProcAddress(LDllHandle, 'SDL_GameControllerNameForIndex');
  SDL_GameControllerNumMappings := GetProcAddress(LDllHandle, 'SDL_GameControllerNumMappings');
  SDL_GameControllerOpen := GetProcAddress(LDllHandle, 'SDL_GameControllerOpen');
  SDL_GameControllerRumble := GetProcAddress(LDllHandle, 'SDL_GameControllerRumble');
  SDL_GameControllerRumbleTriggers := GetProcAddress(LDllHandle, 'SDL_GameControllerRumbleTriggers');
  SDL_GameControllerSendEffect := GetProcAddress(LDllHandle, 'SDL_GameControllerSendEffect');
  SDL_GameControllerSetLED := GetProcAddress(LDllHandle, 'SDL_GameControllerSetLED');
  SDL_GameControllerSetPlayerIndex := GetProcAddress(LDllHandle, 'SDL_GameControllerSetPlayerIndex');
  SDL_GameControllerSetSensorEnabled := GetProcAddress(LDllHandle, 'SDL_GameControllerSetSensorEnabled');
  SDL_GameControllerTypeForIndex := GetProcAddress(LDllHandle, 'SDL_GameControllerTypeForIndex');
  SDL_GameControllerUpdate := GetProcAddress(LDllHandle, 'SDL_GameControllerUpdate');
  SDL_GetAssertionHandler := GetProcAddress(LDllHandle, 'SDL_GetAssertionHandler');
  SDL_GetAssertionReport := GetProcAddress(LDllHandle, 'SDL_GetAssertionReport');
  SDL_GetAudioDeviceName := GetProcAddress(LDllHandle, 'SDL_GetAudioDeviceName');
  SDL_GetAudioDeviceSpec := GetProcAddress(LDllHandle, 'SDL_GetAudioDeviceSpec');
  SDL_GetAudioDeviceStatus := GetProcAddress(LDllHandle, 'SDL_GetAudioDeviceStatus');
  SDL_GetAudioDriver := GetProcAddress(LDllHandle, 'SDL_GetAudioDriver');
  SDL_GetAudioStatus := GetProcAddress(LDllHandle, 'SDL_GetAudioStatus');
  SDL_GetBasePath := GetProcAddress(LDllHandle, 'SDL_GetBasePath');
  SDL_GetClipboardText := GetProcAddress(LDllHandle, 'SDL_GetClipboardText');
  SDL_GetClipRect := GetProcAddress(LDllHandle, 'SDL_GetClipRect');
  SDL_GetClosestDisplayMode := GetProcAddress(LDllHandle, 'SDL_GetClosestDisplayMode');
  SDL_GetColorKey := GetProcAddress(LDllHandle, 'SDL_GetColorKey');
  SDL_GetCPUCacheLineSize := GetProcAddress(LDllHandle, 'SDL_GetCPUCacheLineSize');
  SDL_GetCPUCount := GetProcAddress(LDllHandle, 'SDL_GetCPUCount');
  SDL_GetCurrentAudioDriver := GetProcAddress(LDllHandle, 'SDL_GetCurrentAudioDriver');
  SDL_GetCurrentDisplayMode := GetProcAddress(LDllHandle, 'SDL_GetCurrentDisplayMode');
  SDL_GetCurrentVideoDriver := GetProcAddress(LDllHandle, 'SDL_GetCurrentVideoDriver');
  SDL_GetCursor := GetProcAddress(LDllHandle, 'SDL_GetCursor');
  SDL_GetDefaultAssertionHandler := GetProcAddress(LDllHandle, 'SDL_GetDefaultAssertionHandler');
  SDL_GetDefaultCursor := GetProcAddress(LDllHandle, 'SDL_GetDefaultCursor');
  SDL_GetDesktopDisplayMode := GetProcAddress(LDllHandle, 'SDL_GetDesktopDisplayMode');
  SDL_GetDisplayBounds := GetProcAddress(LDllHandle, 'SDL_GetDisplayBounds');
  SDL_GetDisplayDPI := GetProcAddress(LDllHandle, 'SDL_GetDisplayDPI');
  SDL_GetDisplayMode := GetProcAddress(LDllHandle, 'SDL_GetDisplayMode');
  SDL_GetDisplayName := GetProcAddress(LDllHandle, 'SDL_GetDisplayName');
  SDL_GetDisplayOrientation := GetProcAddress(LDllHandle, 'SDL_GetDisplayOrientation');
  SDL_GetDisplayUsableBounds := GetProcAddress(LDllHandle, 'SDL_GetDisplayUsableBounds');
  SDL_getenv := GetProcAddress(LDllHandle, 'SDL_getenv');
  SDL_GetError := GetProcAddress(LDllHandle, 'SDL_GetError');
  SDL_GetErrorMsg := GetProcAddress(LDllHandle, 'SDL_GetErrorMsg');
  SDL_GetEventFilter := GetProcAddress(LDllHandle, 'SDL_GetEventFilter');
  SDL_getFramecount := GetProcAddress(LDllHandle, 'SDL_getFramecount');
  SDL_getFramerate := GetProcAddress(LDllHandle, 'SDL_getFramerate');
  SDL_GetGlobalMouseState := GetProcAddress(LDllHandle, 'SDL_GetGlobalMouseState');
  SDL_GetGrabbedWindow := GetProcAddress(LDllHandle, 'SDL_GetGrabbedWindow');
  SDL_GetHint := GetProcAddress(LDllHandle, 'SDL_GetHint');
  SDL_GetHintBoolean := GetProcAddress(LDllHandle, 'SDL_GetHintBoolean');
  SDL_GetKeyboardFocus := GetProcAddress(LDllHandle, 'SDL_GetKeyboardFocus');
  SDL_GetKeyboardState := GetProcAddress(LDllHandle, 'SDL_GetKeyboardState');
  SDL_GetKeyFromName := GetProcAddress(LDllHandle, 'SDL_GetKeyFromName');
  SDL_GetKeyFromScancode := GetProcAddress(LDllHandle, 'SDL_GetKeyFromScancode');
  SDL_GetKeyName := GetProcAddress(LDllHandle, 'SDL_GetKeyName');
  SDL_GetMemoryFunctions := GetProcAddress(LDllHandle, 'SDL_GetMemoryFunctions');
  SDL_GetModState := GetProcAddress(LDllHandle, 'SDL_GetModState');
  SDL_GetMouseFocus := GetProcAddress(LDllHandle, 'SDL_GetMouseFocus');
  SDL_GetMouseState := GetProcAddress(LDllHandle, 'SDL_GetMouseState');
  SDL_GetNumAllocations := GetProcAddress(LDllHandle, 'SDL_GetNumAllocations');
  SDL_GetNumAudioDevices := GetProcAddress(LDllHandle, 'SDL_GetNumAudioDevices');
  SDL_GetNumAudioDrivers := GetProcAddress(LDllHandle, 'SDL_GetNumAudioDrivers');
  SDL_GetNumDisplayModes := GetProcAddress(LDllHandle, 'SDL_GetNumDisplayModes');
  SDL_GetNumRenderDrivers := GetProcAddress(LDllHandle, 'SDL_GetNumRenderDrivers');
  SDL_GetNumTouchDevices := GetProcAddress(LDllHandle, 'SDL_GetNumTouchDevices');
  SDL_GetNumTouchFingers := GetProcAddress(LDllHandle, 'SDL_GetNumTouchFingers');
  SDL_GetNumVideoDisplays := GetProcAddress(LDllHandle, 'SDL_GetNumVideoDisplays');
  SDL_GetNumVideoDrivers := GetProcAddress(LDllHandle, 'SDL_GetNumVideoDrivers');
  SDL_GetPerformanceCounter := GetProcAddress(LDllHandle, 'SDL_GetPerformanceCounter');
  SDL_GetPerformanceFrequency := GetProcAddress(LDllHandle, 'SDL_GetPerformanceFrequency');
  SDL_GetPixelFormatName := GetProcAddress(LDllHandle, 'SDL_GetPixelFormatName');
  SDL_GetPlatform := GetProcAddress(LDllHandle, 'SDL_GetPlatform');
  SDL_GetPowerInfo := GetProcAddress(LDllHandle, 'SDL_GetPowerInfo');
  SDL_GetPreferredLocales := GetProcAddress(LDllHandle, 'SDL_GetPreferredLocales');
  SDL_GetPrefPath := GetProcAddress(LDllHandle, 'SDL_GetPrefPath');
  SDL_GetQueuedAudioSize := GetProcAddress(LDllHandle, 'SDL_GetQueuedAudioSize');
  SDL_GetRelativeMouseMode := GetProcAddress(LDllHandle, 'SDL_GetRelativeMouseMode');
  SDL_GetRelativeMouseState := GetProcAddress(LDllHandle, 'SDL_GetRelativeMouseState');
  SDL_GetRenderDrawBlendMode := GetProcAddress(LDllHandle, 'SDL_GetRenderDrawBlendMode');
  SDL_GetRenderDrawColor := GetProcAddress(LDllHandle, 'SDL_GetRenderDrawColor');
  SDL_GetRenderDriverInfo := GetProcAddress(LDllHandle, 'SDL_GetRenderDriverInfo');
  SDL_GetRenderer := GetProcAddress(LDllHandle, 'SDL_GetRenderer');
  SDL_GetRendererInfo := GetProcAddress(LDllHandle, 'SDL_GetRendererInfo');
  SDL_GetRendererOutputSize := GetProcAddress(LDllHandle, 'SDL_GetRendererOutputSize');
  SDL_GetRenderTarget := GetProcAddress(LDllHandle, 'SDL_GetRenderTarget');
  SDL_GetRevision := GetProcAddress(LDllHandle, 'SDL_GetRevision');
  SDL_GetRevisionNumber := GetProcAddress(LDllHandle, 'SDL_GetRevisionNumber');
  SDL_GetRGB := GetProcAddress(LDllHandle, 'SDL_GetRGB');
  SDL_GetRGBA := GetProcAddress(LDllHandle, 'SDL_GetRGBA');
  SDL_GetScancodeFromKey := GetProcAddress(LDllHandle, 'SDL_GetScancodeFromKey');
  SDL_GetScancodeFromName := GetProcAddress(LDllHandle, 'SDL_GetScancodeFromName');
  SDL_GetScancodeName := GetProcAddress(LDllHandle, 'SDL_GetScancodeName');
  SDL_GetShapedWindowMode := GetProcAddress(LDllHandle, 'SDL_GetShapedWindowMode');
  SDL_GetSurfaceAlphaMod := GetProcAddress(LDllHandle, 'SDL_GetSurfaceAlphaMod');
  SDL_GetSurfaceBlendMode := GetProcAddress(LDllHandle, 'SDL_GetSurfaceBlendMode');
  SDL_GetSurfaceColorMod := GetProcAddress(LDllHandle, 'SDL_GetSurfaceColorMod');
  SDL_GetSystemRAM := GetProcAddress(LDllHandle, 'SDL_GetSystemRAM');
  SDL_GetTextureAlphaMod := GetProcAddress(LDllHandle, 'SDL_GetTextureAlphaMod');
  SDL_GetTextureBlendMode := GetProcAddress(LDllHandle, 'SDL_GetTextureBlendMode');
  SDL_GetTextureColorMod := GetProcAddress(LDllHandle, 'SDL_GetTextureColorMod');
  SDL_GetTextureScaleMode := GetProcAddress(LDllHandle, 'SDL_GetTextureScaleMode');
  SDL_GetTextureUserData := GetProcAddress(LDllHandle, 'SDL_GetTextureUserData');
  SDL_GetThreadID := GetProcAddress(LDllHandle, 'SDL_GetThreadID');
  SDL_GetThreadName := GetProcAddress(LDllHandle, 'SDL_GetThreadName');
  SDL_GetTicks := GetProcAddress(LDllHandle, 'SDL_GetTicks');
  SDL_GetTicks64 := GetProcAddress(LDllHandle, 'SDL_GetTicks64');
  SDL_GetTouchDevice := GetProcAddress(LDllHandle, 'SDL_GetTouchDevice');
  SDL_GetTouchDeviceType := GetProcAddress(LDllHandle, 'SDL_GetTouchDeviceType');
  SDL_GetTouchFinger := GetProcAddress(LDllHandle, 'SDL_GetTouchFinger');
  SDL_GetVersion := GetProcAddress(LDllHandle, 'SDL_GetVersion');
  SDL_GetVideoDriver := GetProcAddress(LDllHandle, 'SDL_GetVideoDriver');
  SDL_GetWindowBordersSize := GetProcAddress(LDllHandle, 'SDL_GetWindowBordersSize');
  SDL_GetWindowBrightness := GetProcAddress(LDllHandle, 'SDL_GetWindowBrightness');
  SDL_GetWindowData := GetProcAddress(LDllHandle, 'SDL_GetWindowData');
  SDL_GetWindowDisplayIndex := GetProcAddress(LDllHandle, 'SDL_GetWindowDisplayIndex');
  SDL_GetWindowDisplayMode := GetProcAddress(LDllHandle, 'SDL_GetWindowDisplayMode');
  SDL_GetWindowFlags := GetProcAddress(LDllHandle, 'SDL_GetWindowFlags');
  SDL_GetWindowFromID := GetProcAddress(LDllHandle, 'SDL_GetWindowFromID');
  SDL_GetWindowGammaRamp := GetProcAddress(LDllHandle, 'SDL_GetWindowGammaRamp');
  SDL_GetWindowGrab := GetProcAddress(LDllHandle, 'SDL_GetWindowGrab');
  SDL_GetWindowICCProfile := GetProcAddress(LDllHandle, 'SDL_GetWindowICCProfile');
  SDL_GetWindowID := GetProcAddress(LDllHandle, 'SDL_GetWindowID');
  SDL_GetWindowKeyboardGrab := GetProcAddress(LDllHandle, 'SDL_GetWindowKeyboardGrab');
  SDL_GetWindowMaximumSize := GetProcAddress(LDllHandle, 'SDL_GetWindowMaximumSize');
  SDL_GetWindowMinimumSize := GetProcAddress(LDllHandle, 'SDL_GetWindowMinimumSize');
  SDL_GetWindowMouseGrab := GetProcAddress(LDllHandle, 'SDL_GetWindowMouseGrab');
  SDL_GetWindowMouseRect := GetProcAddress(LDllHandle, 'SDL_GetWindowMouseRect');
  SDL_GetWindowOpacity := GetProcAddress(LDllHandle, 'SDL_GetWindowOpacity');
  SDL_GetWindowPixelFormat := GetProcAddress(LDllHandle, 'SDL_GetWindowPixelFormat');
  SDL_GetWindowPosition := GetProcAddress(LDllHandle, 'SDL_GetWindowPosition');
  SDL_GetWindowSize := GetProcAddress(LDllHandle, 'SDL_GetWindowSize');
  SDL_GetWindowSurface := GetProcAddress(LDllHandle, 'SDL_GetWindowSurface');
  SDL_GetWindowTitle := GetProcAddress(LDllHandle, 'SDL_GetWindowTitle');
  SDL_GetYUVConversionMode := GetProcAddress(LDllHandle, 'SDL_GetYUVConversionMode');
  SDL_GetYUVConversionModeForResolution := GetProcAddress(LDllHandle, 'SDL_GetYUVConversionModeForResolution');
  SDL_GL_BindTexture := GetProcAddress(LDllHandle, 'SDL_GL_BindTexture');
  SDL_GL_CreateContext := GetProcAddress(LDllHandle, 'SDL_GL_CreateContext');
  SDL_GL_DeleteContext := GetProcAddress(LDllHandle, 'SDL_GL_DeleteContext');
  SDL_GL_ExtensionSupported := GetProcAddress(LDllHandle, 'SDL_GL_ExtensionSupported');
  SDL_GL_GetAttribute := GetProcAddress(LDllHandle, 'SDL_GL_GetAttribute');
  SDL_GL_GetCurrentContext := GetProcAddress(LDllHandle, 'SDL_GL_GetCurrentContext');
  SDL_GL_GetCurrentWindow := GetProcAddress(LDllHandle, 'SDL_GL_GetCurrentWindow');
  SDL_GL_GetDrawableSize := GetProcAddress(LDllHandle, 'SDL_GL_GetDrawableSize');
  SDL_GL_GetProcAddress := GetProcAddress(LDllHandle, 'SDL_GL_GetProcAddress');
  SDL_GL_GetSwapInterval := GetProcAddress(LDllHandle, 'SDL_GL_GetSwapInterval');
  SDL_GL_LoadLibrary := GetProcAddress(LDllHandle, 'SDL_GL_LoadLibrary');
  SDL_GL_MakeCurrent := GetProcAddress(LDllHandle, 'SDL_GL_MakeCurrent');
  SDL_GL_ResetAttributes := GetProcAddress(LDllHandle, 'SDL_GL_ResetAttributes');
  SDL_GL_SetAttribute := GetProcAddress(LDllHandle, 'SDL_GL_SetAttribute');
  SDL_GL_SetSwapInterval := GetProcAddress(LDllHandle, 'SDL_GL_SetSwapInterval');
  SDL_GL_SwapWindow := GetProcAddress(LDllHandle, 'SDL_GL_SwapWindow');
  SDL_GL_UnbindTexture := GetProcAddress(LDllHandle, 'SDL_GL_UnbindTexture');
  SDL_GL_UnloadLibrary := GetProcAddress(LDllHandle, 'SDL_GL_UnloadLibrary');
  SDL_HapticClose := GetProcAddress(LDllHandle, 'SDL_HapticClose');
  SDL_HapticDestroyEffect := GetProcAddress(LDllHandle, 'SDL_HapticDestroyEffect');
  SDL_HapticEffectSupported := GetProcAddress(LDllHandle, 'SDL_HapticEffectSupported');
  SDL_HapticGetEffectStatus := GetProcAddress(LDllHandle, 'SDL_HapticGetEffectStatus');
  SDL_HapticIndex := GetProcAddress(LDllHandle, 'SDL_HapticIndex');
  SDL_HapticName := GetProcAddress(LDllHandle, 'SDL_HapticName');
  SDL_HapticNewEffect := GetProcAddress(LDllHandle, 'SDL_HapticNewEffect');
  SDL_HapticNumAxes := GetProcAddress(LDllHandle, 'SDL_HapticNumAxes');
  SDL_HapticNumEffects := GetProcAddress(LDllHandle, 'SDL_HapticNumEffects');
  SDL_HapticNumEffectsPlaying := GetProcAddress(LDllHandle, 'SDL_HapticNumEffectsPlaying');
  SDL_HapticOpen := GetProcAddress(LDllHandle, 'SDL_HapticOpen');
  SDL_HapticOpened := GetProcAddress(LDllHandle, 'SDL_HapticOpened');
  SDL_HapticOpenFromJoystick := GetProcAddress(LDllHandle, 'SDL_HapticOpenFromJoystick');
  SDL_HapticOpenFromMouse := GetProcAddress(LDllHandle, 'SDL_HapticOpenFromMouse');
  SDL_HapticPause := GetProcAddress(LDllHandle, 'SDL_HapticPause');
  SDL_HapticQuery := GetProcAddress(LDllHandle, 'SDL_HapticQuery');
  SDL_HapticRumbleInit := GetProcAddress(LDllHandle, 'SDL_HapticRumbleInit');
  SDL_HapticRumblePlay := GetProcAddress(LDllHandle, 'SDL_HapticRumblePlay');
  SDL_HapticRumbleStop := GetProcAddress(LDllHandle, 'SDL_HapticRumbleStop');
  SDL_HapticRumbleSupported := GetProcAddress(LDllHandle, 'SDL_HapticRumbleSupported');
  SDL_HapticRunEffect := GetProcAddress(LDllHandle, 'SDL_HapticRunEffect');
  SDL_HapticSetAutocenter := GetProcAddress(LDllHandle, 'SDL_HapticSetAutocenter');
  SDL_HapticSetGain := GetProcAddress(LDllHandle, 'SDL_HapticSetGain');
  SDL_HapticStopAll := GetProcAddress(LDllHandle, 'SDL_HapticStopAll');
  SDL_HapticStopEffect := GetProcAddress(LDllHandle, 'SDL_HapticStopEffect');
  SDL_HapticUnpause := GetProcAddress(LDllHandle, 'SDL_HapticUnpause');
  SDL_HapticUpdateEffect := GetProcAddress(LDllHandle, 'SDL_HapticUpdateEffect');
  SDL_Has3DNow := GetProcAddress(LDllHandle, 'SDL_Has3DNow');
  SDL_HasAltiVec := GetProcAddress(LDllHandle, 'SDL_HasAltiVec');
  SDL_HasARMSIMD := GetProcAddress(LDllHandle, 'SDL_HasARMSIMD');
  SDL_HasAVX := GetProcAddress(LDllHandle, 'SDL_HasAVX');
  SDL_HasAVX2 := GetProcAddress(LDllHandle, 'SDL_HasAVX2');
  SDL_HasAVX512F := GetProcAddress(LDllHandle, 'SDL_HasAVX512F');
  SDL_HasClipboardText := GetProcAddress(LDllHandle, 'SDL_HasClipboardText');
  SDL_HasColorKey := GetProcAddress(LDllHandle, 'SDL_HasColorKey');
  SDL_HasEvent := GetProcAddress(LDllHandle, 'SDL_HasEvent');
  SDL_HasEvents := GetProcAddress(LDllHandle, 'SDL_HasEvents');
  SDL_HasIntersection := GetProcAddress(LDllHandle, 'SDL_HasIntersection');
  SDL_HasMMX := GetProcAddress(LDllHandle, 'SDL_HasMMX');
  SDL_HasNEON := GetProcAddress(LDllHandle, 'SDL_HasNEON');
  SDL_HasRDTSC := GetProcAddress(LDllHandle, 'SDL_HasRDTSC');
  SDL_HasScreenKeyboardSupport := GetProcAddress(LDllHandle, 'SDL_HasScreenKeyboardSupport');
  SDL_HasSSE := GetProcAddress(LDllHandle, 'SDL_HasSSE');
  SDL_HasSSE2 := GetProcAddress(LDllHandle, 'SDL_HasSSE2');
  SDL_HasSSE3 := GetProcAddress(LDllHandle, 'SDL_HasSSE3');
  SDL_HasSSE41 := GetProcAddress(LDllHandle, 'SDL_HasSSE41');
  SDL_HasSSE42 := GetProcAddress(LDllHandle, 'SDL_HasSSE42');
  SDL_HasSurfaceRLE := GetProcAddress(LDllHandle, 'SDL_HasSurfaceRLE');
  SDL_hid_ble_scan := GetProcAddress(LDllHandle, 'SDL_hid_ble_scan');
  SDL_hid_close := GetProcAddress(LDllHandle, 'SDL_hid_close');
  SDL_hid_device_change_count := GetProcAddress(LDllHandle, 'SDL_hid_device_change_count');
  SDL_hid_enumerate := GetProcAddress(LDllHandle, 'SDL_hid_enumerate');
  SDL_hid_exit := GetProcAddress(LDllHandle, 'SDL_hid_exit');
  SDL_hid_free_enumeration := GetProcAddress(LDllHandle, 'SDL_hid_free_enumeration');
  SDL_hid_get_feature_report := GetProcAddress(LDllHandle, 'SDL_hid_get_feature_report');
  SDL_hid_get_indexed_string := GetProcAddress(LDllHandle, 'SDL_hid_get_indexed_string');
  SDL_hid_get_manufacturer_string := GetProcAddress(LDllHandle, 'SDL_hid_get_manufacturer_string');
  SDL_hid_get_product_string := GetProcAddress(LDllHandle, 'SDL_hid_get_product_string');
  SDL_hid_get_serial_number_string := GetProcAddress(LDllHandle, 'SDL_hid_get_serial_number_string');
  SDL_hid_init := GetProcAddress(LDllHandle, 'SDL_hid_init');
  SDL_hid_open := GetProcAddress(LDllHandle, 'SDL_hid_open');
  SDL_hid_open_path := GetProcAddress(LDllHandle, 'SDL_hid_open_path');
  SDL_hid_read := GetProcAddress(LDllHandle, 'SDL_hid_read');
  SDL_hid_read_timeout := GetProcAddress(LDllHandle, 'SDL_hid_read_timeout');
  SDL_hid_send_feature_report := GetProcAddress(LDllHandle, 'SDL_hid_send_feature_report');
  SDL_hid_set_nonblocking := GetProcAddress(LDllHandle, 'SDL_hid_set_nonblocking');
  SDL_hid_write := GetProcAddress(LDllHandle, 'SDL_hid_write');
  SDL_HideWindow := GetProcAddress(LDllHandle, 'SDL_HideWindow');
  SDL_iconv := GetProcAddress(LDllHandle, 'SDL_iconv');
  SDL_iconv_close := GetProcAddress(LDllHandle, 'SDL_iconv_close');
  SDL_iconv_open := GetProcAddress(LDllHandle, 'SDL_iconv_open');
  SDL_iconv_string := GetProcAddress(LDllHandle, 'SDL_iconv_string');
  SDL_imageFilterAbsDiff := GetProcAddress(LDllHandle, 'SDL_imageFilterAbsDiff');
  SDL_imageFilterAdd := GetProcAddress(LDllHandle, 'SDL_imageFilterAdd');
  SDL_imageFilterAddByte := GetProcAddress(LDllHandle, 'SDL_imageFilterAddByte');
  SDL_imageFilterAddByteToHalf := GetProcAddress(LDllHandle, 'SDL_imageFilterAddByteToHalf');
  SDL_imageFilterAddUint := GetProcAddress(LDllHandle, 'SDL_imageFilterAddUint');
  SDL_imageFilterBinarizeUsingThreshold := GetProcAddress(LDllHandle, 'SDL_imageFilterBinarizeUsingThreshold');
  SDL_imageFilterBitAnd := GetProcAddress(LDllHandle, 'SDL_imageFilterBitAnd');
  SDL_imageFilterBitNegation := GetProcAddress(LDllHandle, 'SDL_imageFilterBitNegation');
  SDL_imageFilterBitOr := GetProcAddress(LDllHandle, 'SDL_imageFilterBitOr');
  SDL_imageFilterClipToRange := GetProcAddress(LDllHandle, 'SDL_imageFilterClipToRange');
  SDL_imageFilterDiv := GetProcAddress(LDllHandle, 'SDL_imageFilterDiv');
  SDL_imageFilterMean := GetProcAddress(LDllHandle, 'SDL_imageFilterMean');
  SDL_imageFilterMMXdetect := GetProcAddress(LDllHandle, 'SDL_imageFilterMMXdetect');
  SDL_imageFilterMMXoff := GetProcAddress(LDllHandle, 'SDL_imageFilterMMXoff');
  SDL_imageFilterMMXon := GetProcAddress(LDllHandle, 'SDL_imageFilterMMXon');
  SDL_imageFilterMult := GetProcAddress(LDllHandle, 'SDL_imageFilterMult');
  SDL_imageFilterMultByByte := GetProcAddress(LDllHandle, 'SDL_imageFilterMultByByte');
  SDL_imageFilterMultDivby2 := GetProcAddress(LDllHandle, 'SDL_imageFilterMultDivby2');
  SDL_imageFilterMultDivby4 := GetProcAddress(LDllHandle, 'SDL_imageFilterMultDivby4');
  SDL_imageFilterMultNor := GetProcAddress(LDllHandle, 'SDL_imageFilterMultNor');
  SDL_imageFilterNormalizeLinear := GetProcAddress(LDllHandle, 'SDL_imageFilterNormalizeLinear');
  SDL_imageFilterShiftLeft := GetProcAddress(LDllHandle, 'SDL_imageFilterShiftLeft');
  SDL_imageFilterShiftLeftByte := GetProcAddress(LDllHandle, 'SDL_imageFilterShiftLeftByte');
  SDL_imageFilterShiftLeftUint := GetProcAddress(LDllHandle, 'SDL_imageFilterShiftLeftUint');
  SDL_imageFilterShiftRight := GetProcAddress(LDllHandle, 'SDL_imageFilterShiftRight');
  SDL_imageFilterShiftRightAndMultByByte := GetProcAddress(LDllHandle, 'SDL_imageFilterShiftRightAndMultByByte');
  SDL_imageFilterShiftRightUint := GetProcAddress(LDllHandle, 'SDL_imageFilterShiftRightUint');
  SDL_imageFilterSub := GetProcAddress(LDllHandle, 'SDL_imageFilterSub');
  SDL_imageFilterSubByte := GetProcAddress(LDllHandle, 'SDL_imageFilterSubByte');
  SDL_imageFilterSubUint := GetProcAddress(LDllHandle, 'SDL_imageFilterSubUint');
  SDL_Init := GetProcAddress(LDllHandle, 'SDL_Init');
  SDL_initFramerate := GetProcAddress(LDllHandle, 'SDL_initFramerate');
  SDL_InitSubSystem := GetProcAddress(LDllHandle, 'SDL_InitSubSystem');
  SDL_IntersectRect := GetProcAddress(LDllHandle, 'SDL_IntersectRect');
  SDL_IntersectRectAndLine := GetProcAddress(LDllHandle, 'SDL_IntersectRectAndLine');
  SDL_isalnum := GetProcAddress(LDllHandle, 'SDL_isalnum');
  SDL_isalpha := GetProcAddress(LDllHandle, 'SDL_isalpha');
  SDL_isblank := GetProcAddress(LDllHandle, 'SDL_isblank');
  SDL_iscntrl := GetProcAddress(LDllHandle, 'SDL_iscntrl');
  SDL_isdigit := GetProcAddress(LDllHandle, 'SDL_isdigit');
  SDL_IsGameController := GetProcAddress(LDllHandle, 'SDL_IsGameController');
  SDL_isgraph := GetProcAddress(LDllHandle, 'SDL_isgraph');
  SDL_islower := GetProcAddress(LDllHandle, 'SDL_islower');
  SDL_isprint := GetProcAddress(LDllHandle, 'SDL_isprint');
  SDL_ispunct := GetProcAddress(LDllHandle, 'SDL_ispunct');
  SDL_IsScreenKeyboardShown := GetProcAddress(LDllHandle, 'SDL_IsScreenKeyboardShown');
  SDL_IsScreenSaverEnabled := GetProcAddress(LDllHandle, 'SDL_IsScreenSaverEnabled');
  SDL_IsShapedWindow := GetProcAddress(LDllHandle, 'SDL_IsShapedWindow');
  SDL_isspace := GetProcAddress(LDllHandle, 'SDL_isspace');
  SDL_IsTablet := GetProcAddress(LDllHandle, 'SDL_IsTablet');
  SDL_IsTextInputActive := GetProcAddress(LDllHandle, 'SDL_IsTextInputActive');
  SDL_isupper := GetProcAddress(LDllHandle, 'SDL_isupper');
  SDL_isxdigit := GetProcAddress(LDllHandle, 'SDL_isxdigit');
  SDL_itoa := GetProcAddress(LDllHandle, 'SDL_itoa');
  SDL_JoystickAttachVirtual := GetProcAddress(LDllHandle, 'SDL_JoystickAttachVirtual');
  SDL_JoystickClose := GetProcAddress(LDllHandle, 'SDL_JoystickClose');
  SDL_JoystickCurrentPowerLevel := GetProcAddress(LDllHandle, 'SDL_JoystickCurrentPowerLevel');
  SDL_JoystickDetachVirtual := GetProcAddress(LDllHandle, 'SDL_JoystickDetachVirtual');
  SDL_JoystickEventState := GetProcAddress(LDllHandle, 'SDL_JoystickEventState');
  SDL_JoystickFromInstanceID := GetProcAddress(LDllHandle, 'SDL_JoystickFromInstanceID');
  SDL_JoystickFromPlayerIndex := GetProcAddress(LDllHandle, 'SDL_JoystickFromPlayerIndex');
  SDL_JoystickGetAttached := GetProcAddress(LDllHandle, 'SDL_JoystickGetAttached');
  SDL_JoystickGetAxis := GetProcAddress(LDllHandle, 'SDL_JoystickGetAxis');
  SDL_JoystickGetAxisInitialState := GetProcAddress(LDllHandle, 'SDL_JoystickGetAxisInitialState');
  SDL_JoystickGetBall := GetProcAddress(LDllHandle, 'SDL_JoystickGetBall');
  SDL_JoystickGetButton := GetProcAddress(LDllHandle, 'SDL_JoystickGetButton');
  SDL_JoystickGetDeviceGUID := GetProcAddress(LDllHandle, 'SDL_JoystickGetDeviceGUID');
  SDL_JoystickGetDeviceInstanceID := GetProcAddress(LDllHandle, 'SDL_JoystickGetDeviceInstanceID');
  SDL_JoystickGetDevicePlayerIndex := GetProcAddress(LDllHandle, 'SDL_JoystickGetDevicePlayerIndex');
  SDL_JoystickGetDeviceProduct := GetProcAddress(LDllHandle, 'SDL_JoystickGetDeviceProduct');
  SDL_JoystickGetDeviceProductVersion := GetProcAddress(LDllHandle, 'SDL_JoystickGetDeviceProductVersion');
  SDL_JoystickGetDeviceType := GetProcAddress(LDllHandle, 'SDL_JoystickGetDeviceType');
  SDL_JoystickGetDeviceVendor := GetProcAddress(LDllHandle, 'SDL_JoystickGetDeviceVendor');
  SDL_JoystickGetGUID := GetProcAddress(LDllHandle, 'SDL_JoystickGetGUID');
  SDL_JoystickGetGUIDFromString := GetProcAddress(LDllHandle, 'SDL_JoystickGetGUIDFromString');
  SDL_JoystickGetGUIDString := GetProcAddress(LDllHandle, 'SDL_JoystickGetGUIDString');
  SDL_JoystickGetHat := GetProcAddress(LDllHandle, 'SDL_JoystickGetHat');
  SDL_JoystickGetPlayerIndex := GetProcAddress(LDllHandle, 'SDL_JoystickGetPlayerIndex');
  SDL_JoystickGetProduct := GetProcAddress(LDllHandle, 'SDL_JoystickGetProduct');
  SDL_JoystickGetProductVersion := GetProcAddress(LDllHandle, 'SDL_JoystickGetProductVersion');
  SDL_JoystickGetSerial := GetProcAddress(LDllHandle, 'SDL_JoystickGetSerial');
  SDL_JoystickGetType := GetProcAddress(LDllHandle, 'SDL_JoystickGetType');
  SDL_JoystickGetVendor := GetProcAddress(LDllHandle, 'SDL_JoystickGetVendor');
  SDL_JoystickHasLED := GetProcAddress(LDllHandle, 'SDL_JoystickHasLED');
  SDL_JoystickHasRumble := GetProcAddress(LDllHandle, 'SDL_JoystickHasRumble');
  SDL_JoystickHasRumbleTriggers := GetProcAddress(LDllHandle, 'SDL_JoystickHasRumbleTriggers');
  SDL_JoystickInstanceID := GetProcAddress(LDllHandle, 'SDL_JoystickInstanceID');
  SDL_JoystickIsHaptic := GetProcAddress(LDllHandle, 'SDL_JoystickIsHaptic');
  SDL_JoystickIsVirtual := GetProcAddress(LDllHandle, 'SDL_JoystickIsVirtual');
  SDL_JoystickName := GetProcAddress(LDllHandle, 'SDL_JoystickName');
  SDL_JoystickNameForIndex := GetProcAddress(LDllHandle, 'SDL_JoystickNameForIndex');
  SDL_JoystickNumAxes := GetProcAddress(LDllHandle, 'SDL_JoystickNumAxes');
  SDL_JoystickNumBalls := GetProcAddress(LDllHandle, 'SDL_JoystickNumBalls');
  SDL_JoystickNumButtons := GetProcAddress(LDllHandle, 'SDL_JoystickNumButtons');
  SDL_JoystickNumHats := GetProcAddress(LDllHandle, 'SDL_JoystickNumHats');
  SDL_JoystickOpen := GetProcAddress(LDllHandle, 'SDL_JoystickOpen');
  SDL_JoystickRumble := GetProcAddress(LDllHandle, 'SDL_JoystickRumble');
  SDL_JoystickRumbleTriggers := GetProcAddress(LDllHandle, 'SDL_JoystickRumbleTriggers');
  SDL_JoystickSendEffect := GetProcAddress(LDllHandle, 'SDL_JoystickSendEffect');
  SDL_JoystickSetLED := GetProcAddress(LDllHandle, 'SDL_JoystickSetLED');
  SDL_JoystickSetPlayerIndex := GetProcAddress(LDllHandle, 'SDL_JoystickSetPlayerIndex');
  SDL_JoystickSetVirtualAxis := GetProcAddress(LDllHandle, 'SDL_JoystickSetVirtualAxis');
  SDL_JoystickSetVirtualButton := GetProcAddress(LDllHandle, 'SDL_JoystickSetVirtualButton');
  SDL_JoystickSetVirtualHat := GetProcAddress(LDllHandle, 'SDL_JoystickSetVirtualHat');
  SDL_JoystickUpdate := GetProcAddress(LDllHandle, 'SDL_JoystickUpdate');
  SDL_lltoa := GetProcAddress(LDllHandle, 'SDL_lltoa');
  SDL_LoadBMP_RW := GetProcAddress(LDllHandle, 'SDL_LoadBMP_RW');
  SDL_LoadDollarTemplates := GetProcAddress(LDllHandle, 'SDL_LoadDollarTemplates');
  SDL_LoadFile := GetProcAddress(LDllHandle, 'SDL_LoadFile');
  SDL_LoadFile_RW := GetProcAddress(LDllHandle, 'SDL_LoadFile_RW');
  SDL_LoadFunction := GetProcAddress(LDllHandle, 'SDL_LoadFunction');
  SDL_LoadObject := GetProcAddress(LDllHandle, 'SDL_LoadObject');
  SDL_LoadWAV_RW := GetProcAddress(LDllHandle, 'SDL_LoadWAV_RW');
  SDL_LockAudio := GetProcAddress(LDllHandle, 'SDL_LockAudio');
  SDL_LockAudioDevice := GetProcAddress(LDllHandle, 'SDL_LockAudioDevice');
  SDL_LockJoysticks := GetProcAddress(LDllHandle, 'SDL_LockJoysticks');
  SDL_LockMutex := GetProcAddress(LDllHandle, 'SDL_LockMutex');
  SDL_LockSensors := GetProcAddress(LDllHandle, 'SDL_LockSensors');
  SDL_LockSurface := GetProcAddress(LDllHandle, 'SDL_LockSurface');
  SDL_LockTexture := GetProcAddress(LDllHandle, 'SDL_LockTexture');
  SDL_LockTextureToSurface := GetProcAddress(LDllHandle, 'SDL_LockTextureToSurface');
  SDL_log := GetProcAddress(LDllHandle, 'SDL_log');
  SDL_Log_ := GetProcAddress(LDllHandle, 'SDL_Log');
  SDL_log10 := GetProcAddress(LDllHandle, 'SDL_log10');
  SDL_log10f := GetProcAddress(LDllHandle, 'SDL_log10f');
  SDL_LogCritical := GetProcAddress(LDllHandle, 'SDL_LogCritical');
  SDL_LogDebug := GetProcAddress(LDllHandle, 'SDL_LogDebug');
  SDL_LogError := GetProcAddress(LDllHandle, 'SDL_LogError');
  SDL_logf := GetProcAddress(LDllHandle, 'SDL_logf');
  SDL_LogGetOutputFunction := GetProcAddress(LDllHandle, 'SDL_LogGetOutputFunction');
  SDL_LogGetPriority := GetProcAddress(LDllHandle, 'SDL_LogGetPriority');
  SDL_LogInfo := GetProcAddress(LDllHandle, 'SDL_LogInfo');
  SDL_LogMessage := GetProcAddress(LDllHandle, 'SDL_LogMessage');
  SDL_LogMessageV := GetProcAddress(LDllHandle, 'SDL_LogMessageV');
  SDL_LogResetPriorities := GetProcAddress(LDllHandle, 'SDL_LogResetPriorities');
  SDL_LogSetAllPriority := GetProcAddress(LDllHandle, 'SDL_LogSetAllPriority');
  SDL_LogSetOutputFunction := GetProcAddress(LDllHandle, 'SDL_LogSetOutputFunction');
  SDL_LogSetPriority := GetProcAddress(LDllHandle, 'SDL_LogSetPriority');
  SDL_LogVerbose := GetProcAddress(LDllHandle, 'SDL_LogVerbose');
  SDL_LogWarn := GetProcAddress(LDllHandle, 'SDL_LogWarn');
  SDL_LowerBlit := GetProcAddress(LDllHandle, 'SDL_LowerBlit');
  SDL_LowerBlitScaled := GetProcAddress(LDllHandle, 'SDL_LowerBlitScaled');
  SDL_lround := GetProcAddress(LDllHandle, 'SDL_lround');
  SDL_lroundf := GetProcAddress(LDllHandle, 'SDL_lroundf');
  SDL_ltoa := GetProcAddress(LDllHandle, 'SDL_ltoa');
  SDL_main := GetProcAddress(LDllHandle, 'SDL_main');
  SDL_malloc := GetProcAddress(LDllHandle, 'SDL_malloc');
  SDL_MapRGB := GetProcAddress(LDllHandle, 'SDL_MapRGB');
  SDL_MapRGBA := GetProcAddress(LDllHandle, 'SDL_MapRGBA');
  SDL_MasksToPixelFormatEnum := GetProcAddress(LDllHandle, 'SDL_MasksToPixelFormatEnum');
  SDL_MaximizeWindow := GetProcAddress(LDllHandle, 'SDL_MaximizeWindow');
  SDL_memcmp := GetProcAddress(LDllHandle, 'SDL_memcmp');
  SDL_memcpy := GetProcAddress(LDllHandle, 'SDL_memcpy');
  SDL_memmove := GetProcAddress(LDllHandle, 'SDL_memmove');
  SDL_MemoryBarrierAcquireFunction := GetProcAddress(LDllHandle, 'SDL_MemoryBarrierAcquireFunction');
  SDL_MemoryBarrierReleaseFunction := GetProcAddress(LDllHandle, 'SDL_MemoryBarrierReleaseFunction');
  SDL_memset := GetProcAddress(LDllHandle, 'SDL_memset');
  SDL_Metal_CreateView := GetProcAddress(LDllHandle, 'SDL_Metal_CreateView');
  SDL_Metal_DestroyView := GetProcAddress(LDllHandle, 'SDL_Metal_DestroyView');
  SDL_Metal_GetDrawableSize := GetProcAddress(LDllHandle, 'SDL_Metal_GetDrawableSize');
  SDL_Metal_GetLayer := GetProcAddress(LDllHandle, 'SDL_Metal_GetLayer');
  SDL_MinimizeWindow := GetProcAddress(LDllHandle, 'SDL_MinimizeWindow');
  SDL_MixAudio := GetProcAddress(LDllHandle, 'SDL_MixAudio');
  SDL_MixAudioFormat := GetProcAddress(LDllHandle, 'SDL_MixAudioFormat');
  SDL_MouseIsHaptic := GetProcAddress(LDllHandle, 'SDL_MouseIsHaptic');
  SDL_NewAudioStream := GetProcAddress(LDllHandle, 'SDL_NewAudioStream');
  SDL_NumHaptics := GetProcAddress(LDllHandle, 'SDL_NumHaptics');
  SDL_NumJoysticks := GetProcAddress(LDllHandle, 'SDL_NumJoysticks');
  SDL_NumSensors := GetProcAddress(LDllHandle, 'SDL_NumSensors');
  SDL_OnApplicationDidBecomeActive := GetProcAddress(LDllHandle, 'SDL_OnApplicationDidBecomeActive');
  SDL_OnApplicationDidEnterBackground := GetProcAddress(LDllHandle, 'SDL_OnApplicationDidEnterBackground');
  SDL_OnApplicationDidReceiveMemoryWarning := GetProcAddress(LDllHandle, 'SDL_OnApplicationDidReceiveMemoryWarning');
  SDL_OnApplicationWillEnterForeground := GetProcAddress(LDllHandle, 'SDL_OnApplicationWillEnterForeground');
  SDL_OnApplicationWillResignActive := GetProcAddress(LDllHandle, 'SDL_OnApplicationWillResignActive');
  SDL_OnApplicationWillTerminate := GetProcAddress(LDllHandle, 'SDL_OnApplicationWillTerminate');
  SDL_OpenAudio := GetProcAddress(LDllHandle, 'SDL_OpenAudio');
  SDL_OpenAudioDevice := GetProcAddress(LDllHandle, 'SDL_OpenAudioDevice');
  SDL_OpenURL := GetProcAddress(LDllHandle, 'SDL_OpenURL');
  SDL_PauseAudio := GetProcAddress(LDllHandle, 'SDL_PauseAudio');
  SDL_PauseAudioDevice := GetProcAddress(LDllHandle, 'SDL_PauseAudioDevice');
  SDL_PeepEvents := GetProcAddress(LDllHandle, 'SDL_PeepEvents');
  SDL_PixelFormatEnumToMasks := GetProcAddress(LDllHandle, 'SDL_PixelFormatEnumToMasks');
  SDL_PollEvent := GetProcAddress(LDllHandle, 'SDL_PollEvent');
  SDL_pow := GetProcAddress(LDllHandle, 'SDL_pow');
  SDL_powf := GetProcAddress(LDllHandle, 'SDL_powf');
  SDL_PremultiplyAlpha := GetProcAddress(LDllHandle, 'SDL_PremultiplyAlpha');
  SDL_PumpEvents := GetProcAddress(LDllHandle, 'SDL_PumpEvents');
  SDL_PushEvent := GetProcAddress(LDllHandle, 'SDL_PushEvent');
  SDL_qsort := GetProcAddress(LDllHandle, 'SDL_qsort');
  SDL_QueryTexture := GetProcAddress(LDllHandle, 'SDL_QueryTexture');
  SDL_QueueAudio := GetProcAddress(LDllHandle, 'SDL_QueueAudio');
  SDL_Quit := GetProcAddress(LDllHandle, 'SDL_Quit');
  SDL_QuitSubSystem := GetProcAddress(LDllHandle, 'SDL_QuitSubSystem');
  SDL_RaiseWindow := GetProcAddress(LDllHandle, 'SDL_RaiseWindow');
  SDL_ReadBE16 := GetProcAddress(LDllHandle, 'SDL_ReadBE16');
  SDL_ReadBE32 := GetProcAddress(LDllHandle, 'SDL_ReadBE32');
  SDL_ReadBE64 := GetProcAddress(LDllHandle, 'SDL_ReadBE64');
  SDL_ReadLE16 := GetProcAddress(LDllHandle, 'SDL_ReadLE16');
  SDL_ReadLE32 := GetProcAddress(LDllHandle, 'SDL_ReadLE32');
  SDL_ReadLE64 := GetProcAddress(LDllHandle, 'SDL_ReadLE64');
  SDL_ReadU8 := GetProcAddress(LDllHandle, 'SDL_ReadU8');
  SDL_realloc := GetProcAddress(LDllHandle, 'SDL_realloc');
  SDL_RecordGesture := GetProcAddress(LDllHandle, 'SDL_RecordGesture');
  SDL_RegisterApp := GetProcAddress(LDllHandle, 'SDL_RegisterApp');
  SDL_RegisterEvents := GetProcAddress(LDllHandle, 'SDL_RegisterEvents');
  SDL_RemoveTimer := GetProcAddress(LDllHandle, 'SDL_RemoveTimer');
  SDL_RenderClear := GetProcAddress(LDllHandle, 'SDL_RenderClear');
  SDL_RenderCopy := GetProcAddress(LDllHandle, 'SDL_RenderCopy');
  SDL_RenderCopyEx := GetProcAddress(LDllHandle, 'SDL_RenderCopyEx');
  SDL_RenderCopyExF := GetProcAddress(LDllHandle, 'SDL_RenderCopyExF');
  SDL_RenderCopyF := GetProcAddress(LDllHandle, 'SDL_RenderCopyF');
  SDL_RenderDrawLine := GetProcAddress(LDllHandle, 'SDL_RenderDrawLine');
  SDL_RenderDrawLineF := GetProcAddress(LDllHandle, 'SDL_RenderDrawLineF');
  SDL_RenderDrawLines := GetProcAddress(LDllHandle, 'SDL_RenderDrawLines');
  SDL_RenderDrawLinesF := GetProcAddress(LDllHandle, 'SDL_RenderDrawLinesF');
  SDL_RenderDrawPoint := GetProcAddress(LDllHandle, 'SDL_RenderDrawPoint');
  SDL_RenderDrawPointF := GetProcAddress(LDllHandle, 'SDL_RenderDrawPointF');
  SDL_RenderDrawPoints := GetProcAddress(LDllHandle, 'SDL_RenderDrawPoints');
  SDL_RenderDrawPointsF := GetProcAddress(LDllHandle, 'SDL_RenderDrawPointsF');
  SDL_RenderDrawRect := GetProcAddress(LDllHandle, 'SDL_RenderDrawRect');
  SDL_RenderDrawRectF := GetProcAddress(LDllHandle, 'SDL_RenderDrawRectF');
  SDL_RenderDrawRects := GetProcAddress(LDllHandle, 'SDL_RenderDrawRects');
  SDL_RenderDrawRectsF := GetProcAddress(LDllHandle, 'SDL_RenderDrawRectsF');
  SDL_RenderFillRect := GetProcAddress(LDllHandle, 'SDL_RenderFillRect');
  SDL_RenderFillRectF := GetProcAddress(LDllHandle, 'SDL_RenderFillRectF');
  SDL_RenderFillRects := GetProcAddress(LDllHandle, 'SDL_RenderFillRects');
  SDL_RenderFillRectsF := GetProcAddress(LDllHandle, 'SDL_RenderFillRectsF');
  SDL_RenderFlush := GetProcAddress(LDllHandle, 'SDL_RenderFlush');
  SDL_RenderGeometry := GetProcAddress(LDllHandle, 'SDL_RenderGeometry');
  SDL_RenderGeometryRaw := GetProcAddress(LDllHandle, 'SDL_RenderGeometryRaw');
  SDL_RenderGetClipRect := GetProcAddress(LDllHandle, 'SDL_RenderGetClipRect');
  SDL_RenderGetD3D11Device := GetProcAddress(LDllHandle, 'SDL_RenderGetD3D11Device');
  SDL_RenderGetD3D9Device := GetProcAddress(LDllHandle, 'SDL_RenderGetD3D9Device');
  SDL_RenderGetIntegerScale := GetProcAddress(LDllHandle, 'SDL_RenderGetIntegerScale');
  SDL_RenderGetLogicalSize := GetProcAddress(LDllHandle, 'SDL_RenderGetLogicalSize');
  SDL_RenderGetMetalCommandEncoder := GetProcAddress(LDllHandle, 'SDL_RenderGetMetalCommandEncoder');
  SDL_RenderGetMetalLayer := GetProcAddress(LDllHandle, 'SDL_RenderGetMetalLayer');
  SDL_RenderGetScale := GetProcAddress(LDllHandle, 'SDL_RenderGetScale');
  SDL_RenderGetViewport := GetProcAddress(LDllHandle, 'SDL_RenderGetViewport');
  SDL_RenderIsClipEnabled := GetProcAddress(LDllHandle, 'SDL_RenderIsClipEnabled');
  SDL_RenderLogicalToWindow := GetProcAddress(LDllHandle, 'SDL_RenderLogicalToWindow');
  SDL_RenderPresent := GetProcAddress(LDllHandle, 'SDL_RenderPresent');
  SDL_RenderReadPixels := GetProcAddress(LDllHandle, 'SDL_RenderReadPixels');
  SDL_RenderSetClipRect := GetProcAddress(LDllHandle, 'SDL_RenderSetClipRect');
  SDL_RenderSetIntegerScale := GetProcAddress(LDllHandle, 'SDL_RenderSetIntegerScale');
  SDL_RenderSetLogicalSize := GetProcAddress(LDllHandle, 'SDL_RenderSetLogicalSize');
  SDL_RenderSetScale := GetProcAddress(LDllHandle, 'SDL_RenderSetScale');
  SDL_RenderSetViewport := GetProcAddress(LDllHandle, 'SDL_RenderSetViewport');
  SDL_RenderSetVSync := GetProcAddress(LDllHandle, 'SDL_RenderSetVSync');
  SDL_RenderTargetSupported := GetProcAddress(LDllHandle, 'SDL_RenderTargetSupported');
  SDL_RenderWindowToLogical := GetProcAddress(LDllHandle, 'SDL_RenderWindowToLogical');
  SDL_ReportAssertion := GetProcAddress(LDllHandle, 'SDL_ReportAssertion');
  SDL_ResetAssertionReport := GetProcAddress(LDllHandle, 'SDL_ResetAssertionReport');
  SDL_RestoreWindow := GetProcAddress(LDllHandle, 'SDL_RestoreWindow');
  SDL_round := GetProcAddress(LDllHandle, 'SDL_round');
  SDL_roundf := GetProcAddress(LDllHandle, 'SDL_roundf');
  SDL_RWclose := GetProcAddress(LDllHandle, 'SDL_RWclose');
  SDL_RWFromConstMem := GetProcAddress(LDllHandle, 'SDL_RWFromConstMem');
  SDL_RWFromFile := GetProcAddress(LDllHandle, 'SDL_RWFromFile');
  SDL_RWFromFP := GetProcAddress(LDllHandle, 'SDL_RWFromFP');
  SDL_RWFromMem := GetProcAddress(LDllHandle, 'SDL_RWFromMem');
  SDL_RWread := GetProcAddress(LDllHandle, 'SDL_RWread');
  SDL_RWseek := GetProcAddress(LDllHandle, 'SDL_RWseek');
  SDL_RWsize := GetProcAddress(LDllHandle, 'SDL_RWsize');
  SDL_RWtell := GetProcAddress(LDllHandle, 'SDL_RWtell');
  SDL_RWwrite := GetProcAddress(LDllHandle, 'SDL_RWwrite');
  SDL_SaveAllDollarTemplates := GetProcAddress(LDllHandle, 'SDL_SaveAllDollarTemplates');
  SDL_SaveBMP_RW := GetProcAddress(LDllHandle, 'SDL_SaveBMP_RW');
  SDL_SaveDollarTemplate := GetProcAddress(LDllHandle, 'SDL_SaveDollarTemplate');
  SDL_scalbn := GetProcAddress(LDllHandle, 'SDL_scalbn');
  SDL_scalbnf := GetProcAddress(LDllHandle, 'SDL_scalbnf');
  SDL_SemPost := GetProcAddress(LDllHandle, 'SDL_SemPost');
  SDL_SemTryWait := GetProcAddress(LDllHandle, 'SDL_SemTryWait');
  SDL_SemValue := GetProcAddress(LDllHandle, 'SDL_SemValue');
  SDL_SemWait := GetProcAddress(LDllHandle, 'SDL_SemWait');
  SDL_SemWaitTimeout := GetProcAddress(LDllHandle, 'SDL_SemWaitTimeout');
  SDL_SensorClose := GetProcAddress(LDllHandle, 'SDL_SensorClose');
  SDL_SensorFromInstanceID := GetProcAddress(LDllHandle, 'SDL_SensorFromInstanceID');
  SDL_SensorGetData := GetProcAddress(LDllHandle, 'SDL_SensorGetData');
  SDL_SensorGetDeviceInstanceID := GetProcAddress(LDllHandle, 'SDL_SensorGetDeviceInstanceID');
  SDL_SensorGetDeviceName := GetProcAddress(LDllHandle, 'SDL_SensorGetDeviceName');
  SDL_SensorGetDeviceNonPortableType := GetProcAddress(LDllHandle, 'SDL_SensorGetDeviceNonPortableType');
  SDL_SensorGetDeviceType := GetProcAddress(LDllHandle, 'SDL_SensorGetDeviceType');
  SDL_SensorGetInstanceID := GetProcAddress(LDllHandle, 'SDL_SensorGetInstanceID');
  SDL_SensorGetName := GetProcAddress(LDllHandle, 'SDL_SensorGetName');
  SDL_SensorGetNonPortableType := GetProcAddress(LDllHandle, 'SDL_SensorGetNonPortableType');
  SDL_SensorGetType := GetProcAddress(LDllHandle, 'SDL_SensorGetType');
  SDL_SensorOpen := GetProcAddress(LDllHandle, 'SDL_SensorOpen');
  SDL_SensorUpdate := GetProcAddress(LDllHandle, 'SDL_SensorUpdate');
  SDL_SetAssertionHandler := GetProcAddress(LDllHandle, 'SDL_SetAssertionHandler');
  SDL_SetClipboardText := GetProcAddress(LDllHandle, 'SDL_SetClipboardText');
  SDL_SetClipRect := GetProcAddress(LDllHandle, 'SDL_SetClipRect');
  SDL_SetColorKey := GetProcAddress(LDllHandle, 'SDL_SetColorKey');
  SDL_SetCursor := GetProcAddress(LDllHandle, 'SDL_SetCursor');
  SDL_setenv := GetProcAddress(LDllHandle, 'SDL_setenv');
  SDL_SetError := GetProcAddress(LDllHandle, 'SDL_SetError');
  SDL_SetEventFilter := GetProcAddress(LDllHandle, 'SDL_SetEventFilter');
  SDL_setFramerate := GetProcAddress(LDllHandle, 'SDL_setFramerate');
  SDL_SetHint := GetProcAddress(LDllHandle, 'SDL_SetHint');
  SDL_SetHintWithPriority := GetProcAddress(LDllHandle, 'SDL_SetHintWithPriority');
  SDL_SetMainReady := GetProcAddress(LDllHandle, 'SDL_SetMainReady');
  SDL_SetMemoryFunctions := GetProcAddress(LDllHandle, 'SDL_SetMemoryFunctions');
  SDL_SetModState := GetProcAddress(LDllHandle, 'SDL_SetModState');
  SDL_SetPaletteColors := GetProcAddress(LDllHandle, 'SDL_SetPaletteColors');
  SDL_SetPixelFormatPalette := GetProcAddress(LDllHandle, 'SDL_SetPixelFormatPalette');
  SDL_SetRelativeMouseMode := GetProcAddress(LDllHandle, 'SDL_SetRelativeMouseMode');
  SDL_SetRenderDrawBlendMode := GetProcAddress(LDllHandle, 'SDL_SetRenderDrawBlendMode');
  SDL_SetRenderDrawColor := GetProcAddress(LDllHandle, 'SDL_SetRenderDrawColor');
  SDL_SetRenderTarget := GetProcAddress(LDllHandle, 'SDL_SetRenderTarget');
  SDL_SetSurfaceAlphaMod := GetProcAddress(LDllHandle, 'SDL_SetSurfaceAlphaMod');
  SDL_SetSurfaceBlendMode := GetProcAddress(LDllHandle, 'SDL_SetSurfaceBlendMode');
  SDL_SetSurfaceColorMod := GetProcAddress(LDllHandle, 'SDL_SetSurfaceColorMod');
  SDL_SetSurfacePalette := GetProcAddress(LDllHandle, 'SDL_SetSurfacePalette');
  SDL_SetSurfaceRLE := GetProcAddress(LDllHandle, 'SDL_SetSurfaceRLE');
  SDL_SetTextInputRect := GetProcAddress(LDllHandle, 'SDL_SetTextInputRect');
  SDL_SetTextureAlphaMod := GetProcAddress(LDllHandle, 'SDL_SetTextureAlphaMod');
  SDL_SetTextureBlendMode := GetProcAddress(LDllHandle, 'SDL_SetTextureBlendMode');
  SDL_SetTextureColorMod := GetProcAddress(LDllHandle, 'SDL_SetTextureColorMod');
  SDL_SetTextureScaleMode := GetProcAddress(LDllHandle, 'SDL_SetTextureScaleMode');
  SDL_SetTextureUserData := GetProcAddress(LDllHandle, 'SDL_SetTextureUserData');
  SDL_SetThreadPriority := GetProcAddress(LDllHandle, 'SDL_SetThreadPriority');
  SDL_SetWindowAlwaysOnTop := GetProcAddress(LDllHandle, 'SDL_SetWindowAlwaysOnTop');
  SDL_SetWindowBordered := GetProcAddress(LDllHandle, 'SDL_SetWindowBordered');
  SDL_SetWindowBrightness := GetProcAddress(LDllHandle, 'SDL_SetWindowBrightness');
  SDL_SetWindowData := GetProcAddress(LDllHandle, 'SDL_SetWindowData');
  SDL_SetWindowDisplayMode := GetProcAddress(LDllHandle, 'SDL_SetWindowDisplayMode');
  SDL_SetWindowFullscreen := GetProcAddress(LDllHandle, 'SDL_SetWindowFullscreen');
  SDL_SetWindowGammaRamp := GetProcAddress(LDllHandle, 'SDL_SetWindowGammaRamp');
  SDL_SetWindowGrab := GetProcAddress(LDllHandle, 'SDL_SetWindowGrab');
  SDL_SetWindowHitTest := GetProcAddress(LDllHandle, 'SDL_SetWindowHitTest');
  SDL_SetWindowIcon := GetProcAddress(LDllHandle, 'SDL_SetWindowIcon');
  SDL_SetWindowInputFocus := GetProcAddress(LDllHandle, 'SDL_SetWindowInputFocus');
  SDL_SetWindowKeyboardGrab := GetProcAddress(LDllHandle, 'SDL_SetWindowKeyboardGrab');
  SDL_SetWindowMaximumSize := GetProcAddress(LDllHandle, 'SDL_SetWindowMaximumSize');
  SDL_SetWindowMinimumSize := GetProcAddress(LDllHandle, 'SDL_SetWindowMinimumSize');
  SDL_SetWindowModalFor := GetProcAddress(LDllHandle, 'SDL_SetWindowModalFor');
  SDL_SetWindowMouseGrab := GetProcAddress(LDllHandle, 'SDL_SetWindowMouseGrab');
  SDL_SetWindowMouseRect := GetProcAddress(LDllHandle, 'SDL_SetWindowMouseRect');
  SDL_SetWindowOpacity := GetProcAddress(LDllHandle, 'SDL_SetWindowOpacity');
  SDL_SetWindowPosition := GetProcAddress(LDllHandle, 'SDL_SetWindowPosition');
  SDL_SetWindowResizable := GetProcAddress(LDllHandle, 'SDL_SetWindowResizable');
  SDL_SetWindowShape := GetProcAddress(LDllHandle, 'SDL_SetWindowShape');
  SDL_SetWindowSize := GetProcAddress(LDllHandle, 'SDL_SetWindowSize');
  SDL_SetWindowsMessageHook := GetProcAddress(LDllHandle, 'SDL_SetWindowsMessageHook');
  SDL_SetWindowTitle := GetProcAddress(LDllHandle, 'SDL_SetWindowTitle');
  SDL_SetYUVConversionMode := GetProcAddress(LDllHandle, 'SDL_SetYUVConversionMode');
  SDL_ShowCursor := GetProcAddress(LDllHandle, 'SDL_ShowCursor');
  SDL_ShowMessageBox := GetProcAddress(LDllHandle, 'SDL_ShowMessageBox');
  SDL_ShowSimpleMessageBox := GetProcAddress(LDllHandle, 'SDL_ShowSimpleMessageBox');
  SDL_ShowWindow := GetProcAddress(LDllHandle, 'SDL_ShowWindow');
  SDL_SIMDAlloc := GetProcAddress(LDllHandle, 'SDL_SIMDAlloc');
  SDL_SIMDFree := GetProcAddress(LDllHandle, 'SDL_SIMDFree');
  SDL_SIMDGetAlignment := GetProcAddress(LDllHandle, 'SDL_SIMDGetAlignment');
  SDL_SIMDRealloc := GetProcAddress(LDllHandle, 'SDL_SIMDRealloc');
  SDL_sin := GetProcAddress(LDllHandle, 'SDL_sin');
  SDL_sinf := GetProcAddress(LDllHandle, 'SDL_sinf');
  SDL_snprintf := GetProcAddress(LDllHandle, 'SDL_snprintf');
  SDL_SoftStretch := GetProcAddress(LDllHandle, 'SDL_SoftStretch');
  SDL_SoftStretchLinear := GetProcAddress(LDllHandle, 'SDL_SoftStretchLinear');
  SDL_sqrt := GetProcAddress(LDllHandle, 'SDL_sqrt');
  SDL_sqrtf := GetProcAddress(LDllHandle, 'SDL_sqrtf');
  SDL_sscanf := GetProcAddress(LDllHandle, 'SDL_sscanf');
  SDL_StartTextInput := GetProcAddress(LDllHandle, 'SDL_StartTextInput');
  SDL_StopTextInput := GetProcAddress(LDllHandle, 'SDL_StopTextInput');
  SDL_strcasecmp := GetProcAddress(LDllHandle, 'SDL_strcasecmp');
  SDL_strchr := GetProcAddress(LDllHandle, 'SDL_strchr');
  SDL_strcmp := GetProcAddress(LDllHandle, 'SDL_strcmp');
  SDL_strdup := GetProcAddress(LDllHandle, 'SDL_strdup');
  SDL_strlcat := GetProcAddress(LDllHandle, 'SDL_strlcat');
  SDL_strlcpy := GetProcAddress(LDllHandle, 'SDL_strlcpy');
  SDL_strlen := GetProcAddress(LDllHandle, 'SDL_strlen');
  SDL_strlwr := GetProcAddress(LDllHandle, 'SDL_strlwr');
  SDL_strncasecmp := GetProcAddress(LDllHandle, 'SDL_strncasecmp');
  SDL_strncmp := GetProcAddress(LDllHandle, 'SDL_strncmp');
  SDL_strrchr := GetProcAddress(LDllHandle, 'SDL_strrchr');
  SDL_strrev := GetProcAddress(LDllHandle, 'SDL_strrev');
  SDL_strstr := GetProcAddress(LDllHandle, 'SDL_strstr');
  SDL_strtod := GetProcAddress(LDllHandle, 'SDL_strtod');
  SDL_strtokr := GetProcAddress(LDllHandle, 'SDL_strtokr');
  SDL_strtol := GetProcAddress(LDllHandle, 'SDL_strtol');
  SDL_strtoll := GetProcAddress(LDllHandle, 'SDL_strtoll');
  SDL_strtoul := GetProcAddress(LDllHandle, 'SDL_strtoul');
  SDL_strtoull := GetProcAddress(LDllHandle, 'SDL_strtoull');
  SDL_strupr := GetProcAddress(LDllHandle, 'SDL_strupr');
  SDL_tan := GetProcAddress(LDllHandle, 'SDL_tan');
  SDL_tanf := GetProcAddress(LDllHandle, 'SDL_tanf');
  SDL_ThreadID := GetProcAddress(LDllHandle, 'SDL_ThreadID');
  SDL_TLSCleanup := GetProcAddress(LDllHandle, 'SDL_TLSCleanup');
  SDL_TLSCreate := GetProcAddress(LDllHandle, 'SDL_TLSCreate');
  SDL_TLSGet := GetProcAddress(LDllHandle, 'SDL_TLSGet');
  SDL_TLSSet := GetProcAddress(LDllHandle, 'SDL_TLSSet');
  SDL_tolower := GetProcAddress(LDllHandle, 'SDL_tolower');
  SDL_toupper := GetProcAddress(LDllHandle, 'SDL_toupper');
  SDL_trunc := GetProcAddress(LDllHandle, 'SDL_trunc');
  SDL_truncf := GetProcAddress(LDllHandle, 'SDL_truncf');
  SDL_TryLockMutex := GetProcAddress(LDllHandle, 'SDL_TryLockMutex');
  SDL_uitoa := GetProcAddress(LDllHandle, 'SDL_uitoa');
  SDL_ulltoa := GetProcAddress(LDllHandle, 'SDL_ulltoa');
  SDL_ultoa := GetProcAddress(LDllHandle, 'SDL_ultoa');
  SDL_UnionRect := GetProcAddress(LDllHandle, 'SDL_UnionRect');
  SDL_UnloadObject := GetProcAddress(LDllHandle, 'SDL_UnloadObject');
  SDL_UnlockAudio := GetProcAddress(LDllHandle, 'SDL_UnlockAudio');
  SDL_UnlockAudioDevice := GetProcAddress(LDllHandle, 'SDL_UnlockAudioDevice');
  SDL_UnlockJoysticks := GetProcAddress(LDllHandle, 'SDL_UnlockJoysticks');
  SDL_UnlockMutex := GetProcAddress(LDllHandle, 'SDL_UnlockMutex');
  SDL_UnlockSensors := GetProcAddress(LDllHandle, 'SDL_UnlockSensors');
  SDL_UnlockSurface := GetProcAddress(LDllHandle, 'SDL_UnlockSurface');
  SDL_UnlockTexture := GetProcAddress(LDllHandle, 'SDL_UnlockTexture');
  SDL_UnregisterApp := GetProcAddress(LDllHandle, 'SDL_UnregisterApp');
  SDL_UpdateNVTexture := GetProcAddress(LDllHandle, 'SDL_UpdateNVTexture');
  SDL_UpdateTexture := GetProcAddress(LDllHandle, 'SDL_UpdateTexture');
  SDL_UpdateWindowSurface := GetProcAddress(LDllHandle, 'SDL_UpdateWindowSurface');
  SDL_UpdateWindowSurfaceRects := GetProcAddress(LDllHandle, 'SDL_UpdateWindowSurfaceRects');
  SDL_UpdateYUVTexture := GetProcAddress(LDllHandle, 'SDL_UpdateYUVTexture');
  SDL_UpperBlit := GetProcAddress(LDllHandle, 'SDL_UpperBlit');
  SDL_UpperBlitScaled := GetProcAddress(LDllHandle, 'SDL_UpperBlitScaled');
  SDL_utf8strlcpy := GetProcAddress(LDllHandle, 'SDL_utf8strlcpy');
  SDL_utf8strlen := GetProcAddress(LDllHandle, 'SDL_utf8strlen');
  SDL_vasprintf := GetProcAddress(LDllHandle, 'SDL_vasprintf');
  SDL_VideoInit := GetProcAddress(LDllHandle, 'SDL_VideoInit');
  SDL_VideoQuit := GetProcAddress(LDllHandle, 'SDL_VideoQuit');
  SDL_vsnprintf := GetProcAddress(LDllHandle, 'SDL_vsnprintf');
  SDL_vsscanf := GetProcAddress(LDllHandle, 'SDL_vsscanf');
  SDL_WaitEvent := GetProcAddress(LDllHandle, 'SDL_WaitEvent');
  SDL_WaitEventTimeout := GetProcAddress(LDllHandle, 'SDL_WaitEventTimeout');
  SDL_WaitThread := GetProcAddress(LDllHandle, 'SDL_WaitThread');
  SDL_WarpMouseGlobal := GetProcAddress(LDllHandle, 'SDL_WarpMouseGlobal');
  SDL_WarpMouseInWindow := GetProcAddress(LDllHandle, 'SDL_WarpMouseInWindow');
  SDL_WasInit := GetProcAddress(LDllHandle, 'SDL_WasInit');
  SDL_wcscasecmp := GetProcAddress(LDllHandle, 'SDL_wcscasecmp');
  SDL_wcscmp := GetProcAddress(LDllHandle, 'SDL_wcscmp');
  SDL_wcsdup := GetProcAddress(LDllHandle, 'SDL_wcsdup');
  SDL_wcslcat := GetProcAddress(LDllHandle, 'SDL_wcslcat');
  SDL_wcslcpy := GetProcAddress(LDllHandle, 'SDL_wcslcpy');
  SDL_wcslen := GetProcAddress(LDllHandle, 'SDL_wcslen');
  SDL_wcsncasecmp := GetProcAddress(LDllHandle, 'SDL_wcsncasecmp');
  SDL_wcsncmp := GetProcAddress(LDllHandle, 'SDL_wcsncmp');
  SDL_wcsstr := GetProcAddress(LDllHandle, 'SDL_wcsstr');
  SDL_WriteBE16 := GetProcAddress(LDllHandle, 'SDL_WriteBE16');
  SDL_WriteBE32 := GetProcAddress(LDllHandle, 'SDL_WriteBE32');
  SDL_WriteBE64 := GetProcAddress(LDllHandle, 'SDL_WriteBE64');
  SDL_WriteLE16 := GetProcAddress(LDllHandle, 'SDL_WriteLE16');
  SDL_WriteLE32 := GetProcAddress(LDllHandle, 'SDL_WriteLE32');
  SDL_WriteLE64 := GetProcAddress(LDllHandle, 'SDL_WriteLE64');
  SDL_WriteU8 := GetProcAddress(LDllHandle, 'SDL_WriteU8');
  shrinkSurface := GetProcAddress(LDllHandle, 'shrinkSurface');
  stbi_convert_iphone_png_to_rgb := GetProcAddress(LDllHandle, 'stbi_convert_iphone_png_to_rgb');
  stbi_convert_iphone_png_to_rgb_thread := GetProcAddress(LDllHandle, 'stbi_convert_iphone_png_to_rgb_thread');
  stbi_failure_reason := GetProcAddress(LDllHandle, 'stbi_failure_reason');
  stbi_flip_vertically_on_write := GetProcAddress(LDllHandle, 'stbi_flip_vertically_on_write');
  stbi_hdr_to_ldr_gamma := GetProcAddress(LDllHandle, 'stbi_hdr_to_ldr_gamma');
  stbi_hdr_to_ldr_scale := GetProcAddress(LDllHandle, 'stbi_hdr_to_ldr_scale');
  stbi_image_free := GetProcAddress(LDllHandle, 'stbi_image_free');
  stbi_info := GetProcAddress(LDllHandle, 'stbi_info');
  stbi_info_from_callbacks := GetProcAddress(LDllHandle, 'stbi_info_from_callbacks');
  stbi_info_from_file := GetProcAddress(LDllHandle, 'stbi_info_from_file');
  stbi_info_from_memory := GetProcAddress(LDllHandle, 'stbi_info_from_memory');
  stbi_is_16_bit := GetProcAddress(LDllHandle, 'stbi_is_16_bit');
  stbi_is_16_bit_from_callbacks := GetProcAddress(LDllHandle, 'stbi_is_16_bit_from_callbacks');
  stbi_is_16_bit_from_file := GetProcAddress(LDllHandle, 'stbi_is_16_bit_from_file');
  stbi_is_16_bit_from_memory := GetProcAddress(LDllHandle, 'stbi_is_16_bit_from_memory');
  stbi_is_hdr := GetProcAddress(LDllHandle, 'stbi_is_hdr');
  stbi_is_hdr_from_callbacks := GetProcAddress(LDllHandle, 'stbi_is_hdr_from_callbacks');
  stbi_is_hdr_from_file := GetProcAddress(LDllHandle, 'stbi_is_hdr_from_file');
  stbi_is_hdr_from_memory := GetProcAddress(LDllHandle, 'stbi_is_hdr_from_memory');
  stbi_ldr_to_hdr_gamma := GetProcAddress(LDllHandle, 'stbi_ldr_to_hdr_gamma');
  stbi_ldr_to_hdr_scale := GetProcAddress(LDllHandle, 'stbi_ldr_to_hdr_scale');
  stbi_load := GetProcAddress(LDllHandle, 'stbi_load');
  stbi_load_16 := GetProcAddress(LDllHandle, 'stbi_load_16');
  stbi_load_16_from_callbacks := GetProcAddress(LDllHandle, 'stbi_load_16_from_callbacks');
  stbi_load_16_from_memory := GetProcAddress(LDllHandle, 'stbi_load_16_from_memory');
  stbi_load_from_callbacks := GetProcAddress(LDllHandle, 'stbi_load_from_callbacks');
  stbi_load_from_file := GetProcAddress(LDllHandle, 'stbi_load_from_file');
  stbi_load_from_file_16 := GetProcAddress(LDllHandle, 'stbi_load_from_file_16');
  stbi_load_from_memory := GetProcAddress(LDllHandle, 'stbi_load_from_memory');
  stbi_load_gif_from_memory := GetProcAddress(LDllHandle, 'stbi_load_gif_from_memory');
  stbi_loadf := GetProcAddress(LDllHandle, 'stbi_loadf');
  stbi_loadf_from_callbacks := GetProcAddress(LDllHandle, 'stbi_loadf_from_callbacks');
  stbi_loadf_from_file := GetProcAddress(LDllHandle, 'stbi_loadf_from_file');
  stbi_loadf_from_memory := GetProcAddress(LDllHandle, 'stbi_loadf_from_memory');
  stbi_set_flip_vertically_on_load := GetProcAddress(LDllHandle, 'stbi_set_flip_vertically_on_load');
  stbi_set_flip_vertically_on_load_thread := GetProcAddress(LDllHandle, 'stbi_set_flip_vertically_on_load_thread');
  stbi_set_unpremultiply_on_load := GetProcAddress(LDllHandle, 'stbi_set_unpremultiply_on_load');
  stbi_set_unpremultiply_on_load_thread := GetProcAddress(LDllHandle, 'stbi_set_unpremultiply_on_load_thread');
  stbi_write_bmp := GetProcAddress(LDllHandle, 'stbi_write_bmp');
  stbi_write_bmp_to_func := GetProcAddress(LDllHandle, 'stbi_write_bmp_to_func');
  stbi_write_hdr := GetProcAddress(LDllHandle, 'stbi_write_hdr');
  stbi_write_hdr_to_func := GetProcAddress(LDllHandle, 'stbi_write_hdr_to_func');
  stbi_write_jpg := GetProcAddress(LDllHandle, 'stbi_write_jpg');
  stbi_write_jpg_to_func := GetProcAddress(LDllHandle, 'stbi_write_jpg_to_func');
  stbi_write_png := GetProcAddress(LDllHandle, 'stbi_write_png');
  stbi_write_png_to_func := GetProcAddress(LDllHandle, 'stbi_write_png_to_func');
  stbi_write_tga := GetProcAddress(LDllHandle, 'stbi_write_tga');
  stbi_write_tga_to_func := GetProcAddress(LDllHandle, 'stbi_write_tga_to_func');
  stbi_zlib_decode_buffer := GetProcAddress(LDllHandle, 'stbi_zlib_decode_buffer');
  stbi_zlib_decode_malloc := GetProcAddress(LDllHandle, 'stbi_zlib_decode_malloc');
  stbi_zlib_decode_malloc_guesssize := GetProcAddress(LDllHandle, 'stbi_zlib_decode_malloc_guesssize');
  stbi_zlib_decode_malloc_guesssize_headerflag := GetProcAddress(LDllHandle, 'stbi_zlib_decode_malloc_guesssize_headerflag');
  stbi_zlib_decode_noheader_buffer := GetProcAddress(LDllHandle, 'stbi_zlib_decode_noheader_buffer');
  stbi_zlib_decode_noheader_malloc := GetProcAddress(LDllHandle, 'stbi_zlib_decode_noheader_malloc');
  stbtt_BakeFontBitmap := GetProcAddress(LDllHandle, 'stbtt_BakeFontBitmap');
  stbtt_CompareUTF8toUTF16_bigendian := GetProcAddress(LDllHandle, 'stbtt_CompareUTF8toUTF16_bigendian');
  stbtt_FindGlyphIndex := GetProcAddress(LDllHandle, 'stbtt_FindGlyphIndex');
  stbtt_FindMatchingFont := GetProcAddress(LDllHandle, 'stbtt_FindMatchingFont');
  stbtt_FindSVGDoc := GetProcAddress(LDllHandle, 'stbtt_FindSVGDoc');
  stbtt_FreeBitmap := GetProcAddress(LDllHandle, 'stbtt_FreeBitmap');
  stbtt_FreeSDF := GetProcAddress(LDllHandle, 'stbtt_FreeSDF');
  stbtt_FreeShape := GetProcAddress(LDllHandle, 'stbtt_FreeShape');
  stbtt_GetBakedQuad := GetProcAddress(LDllHandle, 'stbtt_GetBakedQuad');
  stbtt_GetCodepointBitmap := GetProcAddress(LDllHandle, 'stbtt_GetCodepointBitmap');
  stbtt_GetCodepointBitmapBox := GetProcAddress(LDllHandle, 'stbtt_GetCodepointBitmapBox');
  stbtt_GetCodepointBitmapBoxSubpixel := GetProcAddress(LDllHandle, 'stbtt_GetCodepointBitmapBoxSubpixel');
  stbtt_GetCodepointBitmapSubpixel := GetProcAddress(LDllHandle, 'stbtt_GetCodepointBitmapSubpixel');
  stbtt_GetCodepointBox := GetProcAddress(LDllHandle, 'stbtt_GetCodepointBox');
  stbtt_GetCodepointHMetrics := GetProcAddress(LDllHandle, 'stbtt_GetCodepointHMetrics');
  stbtt_GetCodepointKernAdvance := GetProcAddress(LDllHandle, 'stbtt_GetCodepointKernAdvance');
  stbtt_GetCodepointSDF := GetProcAddress(LDllHandle, 'stbtt_GetCodepointSDF');
  stbtt_GetCodepointShape := GetProcAddress(LDllHandle, 'stbtt_GetCodepointShape');
  stbtt_GetCodepointSVG := GetProcAddress(LDllHandle, 'stbtt_GetCodepointSVG');
  stbtt_GetFontBoundingBox := GetProcAddress(LDllHandle, 'stbtt_GetFontBoundingBox');
  stbtt_GetFontNameString := GetProcAddress(LDllHandle, 'stbtt_GetFontNameString');
  stbtt_GetFontOffsetForIndex := GetProcAddress(LDllHandle, 'stbtt_GetFontOffsetForIndex');
  stbtt_GetFontVMetrics := GetProcAddress(LDllHandle, 'stbtt_GetFontVMetrics');
  stbtt_GetFontVMetricsOS2 := GetProcAddress(LDllHandle, 'stbtt_GetFontVMetricsOS2');
  stbtt_GetGlyphBitmap := GetProcAddress(LDllHandle, 'stbtt_GetGlyphBitmap');
  stbtt_GetGlyphBitmapBox := GetProcAddress(LDllHandle, 'stbtt_GetGlyphBitmapBox');
  stbtt_GetGlyphBitmapBoxSubpixel := GetProcAddress(LDllHandle, 'stbtt_GetGlyphBitmapBoxSubpixel');
  stbtt_GetGlyphBitmapSubpixel := GetProcAddress(LDllHandle, 'stbtt_GetGlyphBitmapSubpixel');
  stbtt_GetGlyphBox := GetProcAddress(LDllHandle, 'stbtt_GetGlyphBox');
  stbtt_GetGlyphHMetrics := GetProcAddress(LDllHandle, 'stbtt_GetGlyphHMetrics');
  stbtt_GetGlyphKernAdvance := GetProcAddress(LDllHandle, 'stbtt_GetGlyphKernAdvance');
  stbtt_GetGlyphSDF := GetProcAddress(LDllHandle, 'stbtt_GetGlyphSDF');
  stbtt_GetGlyphShape := GetProcAddress(LDllHandle, 'stbtt_GetGlyphShape');
  stbtt_GetGlyphSVG := GetProcAddress(LDllHandle, 'stbtt_GetGlyphSVG');
  stbtt_GetKerningTable := GetProcAddress(LDllHandle, 'stbtt_GetKerningTable');
  stbtt_GetKerningTableLength := GetProcAddress(LDllHandle, 'stbtt_GetKerningTableLength');
  stbtt_GetNumberOfFonts := GetProcAddress(LDllHandle, 'stbtt_GetNumberOfFonts');
  stbtt_GetPackedQuad := GetProcAddress(LDllHandle, 'stbtt_GetPackedQuad');
  stbtt_GetScaledFontVMetrics := GetProcAddress(LDllHandle, 'stbtt_GetScaledFontVMetrics');
  stbtt_InitFont := GetProcAddress(LDllHandle, 'stbtt_InitFont');
  stbtt_IsGlyphEmpty := GetProcAddress(LDllHandle, 'stbtt_IsGlyphEmpty');
  stbtt_MakeCodepointBitmap := GetProcAddress(LDllHandle, 'stbtt_MakeCodepointBitmap');
  stbtt_MakeCodepointBitmapSubpixel := GetProcAddress(LDllHandle, 'stbtt_MakeCodepointBitmapSubpixel');
  stbtt_MakeCodepointBitmapSubpixelPrefilter := GetProcAddress(LDllHandle, 'stbtt_MakeCodepointBitmapSubpixelPrefilter');
  stbtt_MakeGlyphBitmap := GetProcAddress(LDllHandle, 'stbtt_MakeGlyphBitmap');
  stbtt_MakeGlyphBitmapSubpixel := GetProcAddress(LDllHandle, 'stbtt_MakeGlyphBitmapSubpixel');
  stbtt_MakeGlyphBitmapSubpixelPrefilter := GetProcAddress(LDllHandle, 'stbtt_MakeGlyphBitmapSubpixelPrefilter');
  stbtt_PackBegin := GetProcAddress(LDllHandle, 'stbtt_PackBegin');
  stbtt_PackEnd := GetProcAddress(LDllHandle, 'stbtt_PackEnd');
  stbtt_PackFontRange := GetProcAddress(LDllHandle, 'stbtt_PackFontRange');
  stbtt_PackFontRanges := GetProcAddress(LDllHandle, 'stbtt_PackFontRanges');
  stbtt_PackFontRangesGatherRects := GetProcAddress(LDllHandle, 'stbtt_PackFontRangesGatherRects');
  stbtt_PackFontRangesPackRects := GetProcAddress(LDllHandle, 'stbtt_PackFontRangesPackRects');
  stbtt_PackFontRangesRenderIntoRects := GetProcAddress(LDllHandle, 'stbtt_PackFontRangesRenderIntoRects');
  stbtt_PackSetOversampling := GetProcAddress(LDllHandle, 'stbtt_PackSetOversampling');
  stbtt_PackSetSkipMissingCodepoints := GetProcAddress(LDllHandle, 'stbtt_PackSetSkipMissingCodepoints');
  stbtt_Rasterize := GetProcAddress(LDllHandle, 'stbtt_Rasterize');
  stbtt_ScaleForMappingEmToPixels := GetProcAddress(LDllHandle, 'stbtt_ScaleForMappingEmToPixels');
  stbtt_ScaleForPixelHeight := GetProcAddress(LDllHandle, 'stbtt_ScaleForPixelHeight');
  stringColor := GetProcAddress(LDllHandle, 'stringColor');
  stringRGBA := GetProcAddress(LDllHandle, 'stringRGBA');
  texturedPolygon := GetProcAddress(LDllHandle, 'texturedPolygon');
  thickArcRGBA := GetProcAddress(LDllHandle, 'thickArcRGBA');
  thickCircleRGBA := GetProcAddress(LDllHandle, 'thickCircleRGBA');
  thickEllipseRGBA := GetProcAddress(LDllHandle, 'thickEllipseRGBA');
  thickLineColor := GetProcAddress(LDllHandle, 'thickLineColor');
  thickLineRGBA := GetProcAddress(LDllHandle, 'thickLineRGBA');
  trigonColor := GetProcAddress(LDllHandle, 'trigonColor');
  trigonRGBA := GetProcAddress(LDllHandle, 'trigonRGBA');
  unzClose := GetProcAddress(LDllHandle, 'unzClose');
  unzCloseCurrentFile := GetProcAddress(LDllHandle, 'unzCloseCurrentFile');
  unzeof := GetProcAddress(LDllHandle, 'unzeof');
  unzGetCurrentFileInfo := GetProcAddress(LDllHandle, 'unzGetCurrentFileInfo');
  unzGetCurrentFileInfo64 := GetProcAddress(LDllHandle, 'unzGetCurrentFileInfo64');
  unzGetCurrentFileZStreamPos64 := GetProcAddress(LDllHandle, 'unzGetCurrentFileZStreamPos64');
  unzGetFilePos := GetProcAddress(LDllHandle, 'unzGetFilePos');
  unzGetFilePos64 := GetProcAddress(LDllHandle, 'unzGetFilePos64');
  unzGetGlobalComment := GetProcAddress(LDllHandle, 'unzGetGlobalComment');
  unzGetGlobalInfo := GetProcAddress(LDllHandle, 'unzGetGlobalInfo');
  unzGetGlobalInfo64 := GetProcAddress(LDllHandle, 'unzGetGlobalInfo64');
  unzGetLocalExtrafield := GetProcAddress(LDllHandle, 'unzGetLocalExtrafield');
  unzGetOffset := GetProcAddress(LDllHandle, 'unzGetOffset');
  unzGetOffset64 := GetProcAddress(LDllHandle, 'unzGetOffset64');
  unzGoToFilePos := GetProcAddress(LDllHandle, 'unzGoToFilePos');
  unzGoToFilePos64 := GetProcAddress(LDllHandle, 'unzGoToFilePos64');
  unzGoToFirstFile := GetProcAddress(LDllHandle, 'unzGoToFirstFile');
  unzGoToNextFile := GetProcAddress(LDllHandle, 'unzGoToNextFile');
  unzLocateFile := GetProcAddress(LDllHandle, 'unzLocateFile');
  unzOpen := GetProcAddress(LDllHandle, 'unzOpen');
  unzOpen2 := GetProcAddress(LDllHandle, 'unzOpen2');
  unzOpen2_64 := GetProcAddress(LDllHandle, 'unzOpen2_64');
  unzOpen64 := GetProcAddress(LDllHandle, 'unzOpen64');
  unzOpenCurrentFile := GetProcAddress(LDllHandle, 'unzOpenCurrentFile');
  unzOpenCurrentFile2 := GetProcAddress(LDllHandle, 'unzOpenCurrentFile2');
  unzOpenCurrentFile3 := GetProcAddress(LDllHandle, 'unzOpenCurrentFile3');
  unzOpenCurrentFilePassword := GetProcAddress(LDllHandle, 'unzOpenCurrentFilePassword');
  unzReadCurrentFile := GetProcAddress(LDllHandle, 'unzReadCurrentFile');
  unzSetOffset := GetProcAddress(LDllHandle, 'unzSetOffset');
  unzSetOffset64 := GetProcAddress(LDllHandle, 'unzSetOffset64');
  unzStringFileNameCompare := GetProcAddress(LDllHandle, 'unzStringFileNameCompare');
  unztell := GetProcAddress(LDllHandle, 'unztell');
  unztell64 := GetProcAddress(LDllHandle, 'unztell64');
  vlineColor := GetProcAddress(LDllHandle, 'vlineColor');
  vlineRGBA := GetProcAddress(LDllHandle, 'vlineRGBA');
  zipClose := GetProcAddress(LDllHandle, 'zipClose');
  zipCloseFileInZip := GetProcAddress(LDllHandle, 'zipCloseFileInZip');
  zipCloseFileInZipRaw := GetProcAddress(LDllHandle, 'zipCloseFileInZipRaw');
  zipCloseFileInZipRaw64 := GetProcAddress(LDllHandle, 'zipCloseFileInZipRaw64');
  zipOpen := GetProcAddress(LDllHandle, 'zipOpen');
  zipOpen2 := GetProcAddress(LDllHandle, 'zipOpen2');
  zipOpen2_64 := GetProcAddress(LDllHandle, 'zipOpen2_64');
  zipOpen64 := GetProcAddress(LDllHandle, 'zipOpen64');
  zipOpenNewFileInZip := GetProcAddress(LDllHandle, 'zipOpenNewFileInZip');
  zipOpenNewFileInZip2 := GetProcAddress(LDllHandle, 'zipOpenNewFileInZip2');
  zipOpenNewFileInZip2_64 := GetProcAddress(LDllHandle, 'zipOpenNewFileInZip2_64');
  zipOpenNewFileInZip3 := GetProcAddress(LDllHandle, 'zipOpenNewFileInZip3');
  zipOpenNewFileInZip3_64 := GetProcAddress(LDllHandle, 'zipOpenNewFileInZip3_64');
  zipOpenNewFileInZip4 := GetProcAddress(LDllHandle, 'zipOpenNewFileInZip4');
  zipOpenNewFileInZip4_64 := GetProcAddress(LDllHandle, 'zipOpenNewFileInZip4_64');
  zipOpenNewFileInZip64 := GetProcAddress(LDllHandle, 'zipOpenNewFileInZip64');
  zipRemoveExtraInfoBlock := GetProcAddress(LDllHandle, 'zipRemoveExtraInfoBlock');
  zipWriteInFileInZip := GetProcAddress(LDllHandle, 'zipWriteInFileInZip');
  zoomSurface := GetProcAddress(LDllHandle, 'zoomSurface');
  zoomSurfaceSize := GetProcAddress(LDllHandle, 'zoomSurfaceSize');
end;

procedure UnloadDLL;
begin
  FreeLibrary(LDllHandle);
  TFile.Delete(LDllName);
end;

initialization
  ReportMemoryLeaksOnShutdown := True;
  LoadDLL;

finalization
  UnloadDLL;

end.
